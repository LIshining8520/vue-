!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=58)}([function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function s(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],i=0;i<e.length;i++){var a=e[i],l=t.base?a[0]+t.base:a[0],c=n[l]||0,p="".concat(l," ").concat(c);n[l]=c+1;var u=s(p),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(o[u].references++,o[u].updater(d)):o.push({identifier:p,updater:g(d,t),references:1}),r.push(p)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var p,u=(p=[],function(e,t){return p[e]=t,p.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(t,i);else{var a=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function f(e,t,n){var r=n.css,i=n.media,a=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function g(e,t){var n,r,i;if(t.singleton){var a=m++;n=h||(h=c(t)),r=d.bind(null,n,a,!1),i=d.bind(null,n,a,!0)}else n=c(t),r=f.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=s(n[r]);o[i].references--}for(var a=l(e,t),c=0;c<n.length;c++){var p=s(n[c]);0===o[p].references&&(o[p].updater(),o.splice(p,1))}n=a}}}},function(e,t,n){"use strict";function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,a=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var t=r(e,4),n=t[1],i=t[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),s="/*# ".concat(o," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(l).concat([s]).join("\n")}return[n].join("\n")}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t,n){"use strict";function r(e,t,n,r,i,a,o,s){var l,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),o?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(o)},c._ssrRegister=l):i&&(l=s?function(){i.call(this,this.$root.$options.shadowRoot)}:i),l)if(c.functional){c._injectStyles=l;var p=c.render;c.render=function(e,t){return l.call(t),p(e,t)}}else{var u=c.beforeCreate;c.beforeCreate=u?[].concat(u,l):[l]}return{exports:e,options:c}}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(21),i=n(37),a=Object.prototype.toString;function o(e){return"[object Array]"===a.call(e)}function s(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===a.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:l,isStream:function(e){return s(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,i=arguments.length;r<i;r++)c(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,i=arguments.length;r<i;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"products product"},[n("div",{staticClass:"pro-col",attrs:{"data-v-0ef3150e":""}},[n("h4",{staticClass:"pro-group-title",attrs:{"data-v-0ef3150e":""}},[e._v("智能用品")]),e._v(" "),n("div",{staticClass:"flex-row pro-block",attrs:{"data-v-0ef3150e":""}},[n("img",{staticClass:"pro-thumb",attrs:{"data-v-0ef3150e":"",src:"/img/1545100156_bcd7cf4cfdeae8b8df43dea36a52b3c9.png",alt:""}}),e._v(" "),n("div",{attrs:{"data-v-0ef3150e":""},on:{click:e.pro}},[n("h5",{staticClass:"pro-title pro-h5",attrs:{"data-v-0ef3150e":""}},[e._v("宠物饮水机")]),e._v(" "),n("p",{staticClass:"pro-summary kaiti",attrs:{"data-v-0ef3150e":""}},[e._v("呵护爱宠 健康饮水")])])]),n("br"),e._v(" "),e._m(0)]),e._v(" "),e._m(1),e._v(" "),e._m(2)])};r._withStripped=!0;var i={name:"products",data:function(){return{}},methods:{pro:function(){location.href="product.html"}},mounted:function(){}},a=n(0),o=n.n(a),s=n(8),l={insert:"head",singleton:!1},c=(o()(s.a,l),s.a.locals,n(3)),p=Object(c.a)(i,r,[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"flex-row pro-block",attrs:{"data-v-0ef3150e":""}},[t("img",{staticClass:"pro-thumb",attrs:{"data-v-0ef3150e":"",src:"/img/1569566741_5c3d477f9293108d105cc14faba2d9b2.png",alt:""}}),this._v(" "),t("div",{attrs:{"data-v-0ef3150e":""}},[t("h5",{staticClass:"pro-title pro-h5",attrs:{"data-v-0ef3150e":""}},[this._v("智能宠物零食机")]),this._v(" "),t("p",{staticClass:"pro-summary kaiti",attrs:{"data-v-0ef3150e":""}},[this._v("智能“逗猫” 远程“遛狗”")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"pro-col",attrs:{"data-v-0ef3150e":""}},[t("h4",{staticClass:"pro-group-title",attrs:{"data-v-0ef3150e":""}},[this._v("清洁")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"pro-col",attrs:{"data-v-0ef3150e":""}},[t("h4",{staticClass:"pro-group-title",attrs:{"data-v-0ef3150e":""}},[this._v("配件")]),this._v(" "),t("div",{staticClass:"flex-row pro-block",attrs:{"data-v-0ef3150e":""}},[t("img",{staticClass:"pro-thumb",attrs:{"data-v-0ef3150e":"",src:"/img/1545100779_5bfb0d5fa046511a64dc7cad9cff8d34.png",alt:""}}),this._v(" "),t("div",{attrs:{"data-v-0ef3150e":""}},[t("h5",{staticClass:"pro-title pro-h5",attrs:{"data-v-0ef3150e":""}},[this._v("宠物饮水机滤芯")]),this._v(" "),t("p",{staticClass:"pro-summary kaiti",attrs:{"data-v-0ef3150e":""}},[this._v("优质滤材 四重过滤")])])]),t("br")])}],!1,null,"a8e61a62",null);p.options.__file="src/component/products.vue";t.a=p.exports},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(e,n){
/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({});function i(e){return null==e}function a(e){return null!=e}function o(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function l(e){return null!==e&&"object"==typeof e}var c=Object.prototype.toString;function p(e){return"[object Object]"===c.call(e)}function u(e){return"[object RegExp]"===c.call(e)}function d(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function f(e){return a(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function h(e){return null==e?"":Array.isArray(e)||p(e)&&e.toString===c?JSON.stringify(e,null,2):String(e)}function m(e){var t=parseFloat(e);return isNaN(t)?e:t}function g(e,t){for(var n=Object.create(null),r=e.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var v=g("slot,component",!0),A=g("key,ref,slot,slot-scope,is");function w(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var y=Object.prototype.hasOwnProperty;function C(e,t){return y.call(e,t)}function b(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var x=/-(\w)/g,k=b((function(e){return e.replace(x,(function(e,t){return t?t.toUpperCase():""}))})),T=b((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),S=/\B([A-Z])/g,E=b((function(e){return e.replace(S,"-$1").toLowerCase()}));var _=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function D(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function B(e,t){for(var n in t)e[n]=t[n];return e}function z(e){for(var t={},n=0;n<e.length;n++)e[n]&&B(t,e[n]);return t}function M(e,t,n){}var L=function(e,t,n){return!1},O=function(e){return e};function P(e,t){if(e===t)return!0;var n=l(e),r=l(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var i=Array.isArray(e),a=Array.isArray(t);if(i&&a)return e.length===t.length&&e.every((function(e,n){return P(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(i||a)return!1;var o=Object.keys(e),s=Object.keys(t);return o.length===s.length&&o.every((function(n){return P(e[n],t[n])}))}catch(e){return!1}}function I(e,t){for(var n=0;n<e.length;n++)if(P(e[n],t))return n;return-1}function N(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var F=["component","directive","filter"],j=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],$={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:L,isReservedAttr:L,isUnknownElement:L,getTagNamespace:M,parsePlatformTagName:O,mustUseProp:L,async:!0,_lifecycleHooks:j},R=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function q(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var W=new RegExp("[^"+R.source+".$_\\d]");var U,Y="__proto__"in{},G="undefined"!=typeof window,X="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,V=X&&WXEnvironment.platform.toLowerCase(),K=G&&window.navigator.userAgent.toLowerCase(),J=K&&/msie|trident/.test(K),Q=K&&K.indexOf("msie 9.0")>0,Z=K&&K.indexOf("edge/")>0,ee=(K&&K.indexOf("android"),K&&/iphone|ipad|ipod|ios/.test(K)||"ios"===V),te=(K&&/chrome\/\d+/.test(K),K&&/phantomjs/.test(K),K&&K.match(/firefox\/(\d+)/)),ne={}.watch,re=!1;if(G)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){re=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var ae=function(){return void 0===U&&(U=!G&&!X&&void 0!==e&&(e.process&&"server"===e.process.env.VUE_ENV)),U},oe=G&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var le,ce="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);le="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var pe=M,ue=0,de=function(){this.id=ue++,this.subs=[]};de.prototype.addSub=function(e){this.subs.push(e)},de.prototype.removeSub=function(e){w(this.subs,e)},de.prototype.depend=function(){de.target&&de.target.addDep(this)},de.prototype.notify=function(){var e=this.subs.slice();for(var t=0,n=e.length;t<n;t++)e[t].update()},de.target=null;var fe=[];function he(e){fe.push(e),de.target=e}function me(){fe.pop(),de.target=fe[fe.length-1]}var ge=function(e,t,n,r,i,a,o,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ve={child:{configurable:!0}};ve.child.get=function(){return this.componentInstance},Object.defineProperties(ge.prototype,ve);var Ae=function(e){void 0===e&&(e="");var t=new ge;return t.text=e,t.isComment=!0,t};function we(e){return new ge(void 0,void 0,void 0,String(e))}function ye(e){var t=new ge(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Ce=Array.prototype,be=Object.create(Ce);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=Ce[e];q(be,e,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,a=t.apply(this,n),o=this.__ob__;switch(e){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&o.observeArray(i),o.dep.notify(),a}))}));var xe=Object.getOwnPropertyNames(be),ke=!0;function Te(e){ke=e}var Se=function(e){this.value=e,this.dep=new de,this.vmCount=0,q(e,"__ob__",this),Array.isArray(e)?(Y?function(e,t){e.__proto__=t}(e,be):function(e,t,n){for(var r=0,i=n.length;r<i;r++){var a=n[r];q(e,a,t[a])}}(e,be,xe),this.observeArray(e)):this.walk(e)};function Ee(e,t){var n;if(l(e)&&!(e instanceof ge))return C(e,"__ob__")&&e.__ob__ instanceof Se?n=e.__ob__:ke&&!ae()&&(Array.isArray(e)||p(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Se(e)),t&&n&&n.vmCount++,n}function _e(e,t,n,r,i){var a=new de,o=Object.getOwnPropertyDescriptor(e,t);if(!o||!1!==o.configurable){var s=o&&o.get,l=o&&o.set;s&&!l||2!==arguments.length||(n=e[t]);var c=!i&&Ee(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return de.target&&(a.depend(),c&&(c.dep.depend(),Array.isArray(t)&&ze(t))),t},set:function(t){var r=s?s.call(e):n;t===r||t!=t&&r!=r||s&&!l||(l?l.call(e,t):n=t,c=!i&&Ee(t),a.notify())}})}}function De(e,t,n){if(Array.isArray(e)&&d(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var r=e.__ob__;return e._isVue||r&&r.vmCount?n:r?(_e(r.value,t,n),r.dep.notify(),n):(e[t]=n,n)}function Be(e,t){if(Array.isArray(e)&&d(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||C(e,t)&&(delete e[t],n&&n.dep.notify())}}function ze(e){for(var t=void 0,n=0,r=e.length;n<r;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&ze(t)}Se.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)_e(e,t[n])},Se.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Ee(e[t])};var Me=$.optionMergeStrategies;function Le(e,t){if(!t)return e;for(var n,r,i,a=ce?Reflect.ownKeys(t):Object.keys(t),o=0;o<a.length;o++)"__ob__"!==(n=a[o])&&(r=e[n],i=t[n],C(e,n)?r!==i&&p(r)&&p(i)&&Le(r,i):De(e,n,i));return e}function Oe(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,i="function"==typeof e?e.call(n,n):e;return r?Le(r,i):i}:t?e?function(){return Le("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Pe(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Ie(e,t,n,r){var i=Object.create(e||null);return t?B(i,t):i}Me.data=function(e,t,n){return n?Oe(e,t,n):t&&"function"!=typeof t?e:Oe(e,t)},j.forEach((function(e){Me[e]=Pe})),F.forEach((function(e){Me[e+"s"]=Ie})),Me.watch=function(e,t,n,r){if(e===ne&&(e=void 0),t===ne&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var i={};for(var a in B(i,e),t){var o=i[a],s=t[a];o&&!Array.isArray(o)&&(o=[o]),i[a]=o?o.concat(s):Array.isArray(s)?s:[s]}return i},Me.props=Me.methods=Me.inject=Me.computed=function(e,t,n,r){if(!e)return t;var i=Object.create(null);return B(i,e),t&&B(i,t),i},Me.provide=Oe;var Ne=function(e,t){return void 0===t?e:t};function Fe(e,t,n){if("function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var r,i,a={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(i=n[r])&&(a[k(i)]={type:null});else if(p(n))for(var o in n)i=n[o],a[k(o)]=p(i)?i:{type:i};else 0;e.props=a}}(t),function(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(p(n))for(var a in n){var o=n[a];r[a]=p(o)?B({from:a},o):{from:o}}else 0}}(t),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}(t),!t._base&&(t.extends&&(e=Fe(e,t.extends,n)),t.mixins))for(var r=0,i=t.mixins.length;r<i;r++)e=Fe(e,t.mixins[r],n);var a,o={};for(a in e)s(a);for(a in t)C(e,a)||s(a);function s(r){var i=Me[r]||Ne;o[r]=i(e[r],t[r],n,r)}return o}function je(e,t,n,r){if("string"==typeof n){var i=e[t];if(C(i,n))return i[n];var a=k(n);if(C(i,a))return i[a];var o=T(a);return C(i,o)?i[o]:i[n]||i[a]||i[o]}}function $e(e,t,n,r){var i=t[e],a=!C(n,e),o=n[e],s=qe(Boolean,i.type);if(s>-1)if(a&&!C(i,"default"))o=!1;else if(""===o||o===E(e)){var l=qe(String,i.type);(l<0||s<l)&&(o=!0)}if(void 0===o){o=function(e,t,n){if(!C(t,"default"))return;var r=t.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof r&&"Function"!==Re(t.type)?r.call(e):r}(r,i,e);var c=ke;Te(!0),Ee(o),Te(c)}return o}function Re(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function He(e,t){return Re(e)===Re(t)}function qe(e,t){if(!Array.isArray(t))return He(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(He(t[n],e))return n;return-1}function We(e,t,n){he();try{if(t)for(var r=t;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var a=0;a<i.length;a++)try{if(!1===i[a].call(r,e,t,n))return}catch(e){Ye(e,r,"errorCaptured hook")}}Ye(e,t,n)}finally{me()}}function Ue(e,t,n,r,i){var a;try{(a=n?e.apply(t,n):e.call(t))&&!a._isVue&&f(a)&&!a._handled&&(a.catch((function(e){return We(e,r,i+" (Promise/async)")})),a._handled=!0)}catch(e){We(e,r,i)}return a}function Ye(e,t,n){if($.errorHandler)try{return $.errorHandler.call(null,e,t,n)}catch(t){t!==e&&Ge(t,null,"config.errorHandler")}Ge(e,t,n)}function Ge(e,t,n){if(!G&&!X||"undefined"==typeof console)throw e;console.error(e)}var Xe,Ve=!1,Ke=[],Je=!1;function Qe(){Je=!1;var e=Ke.slice(0);Ke.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&se(Promise)){var Ze=Promise.resolve();Xe=function(){Ze.then(Qe),ee&&setTimeout(M)},Ve=!0}else if(J||"undefined"==typeof MutationObserver||!se(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Xe=void 0!==n&&se(n)?function(){n(Qe)}:function(){setTimeout(Qe,0)};else{var et=1,tt=new MutationObserver(Qe),nt=document.createTextNode(String(et));tt.observe(nt,{characterData:!0}),Xe=function(){et=(et+1)%2,nt.data=String(et)},Ve=!0}function rt(e,t){var n;if(Ke.push((function(){if(e)try{e.call(t)}catch(e){We(e,t,"nextTick")}else n&&n(t)})),Je||(Je=!0,Xe()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var it=new le;function at(e){!function e(t,n){var r,i,a=Array.isArray(t);if(!a&&!l(t)||Object.isFrozen(t)||t instanceof ge)return;if(t.__ob__){var o=t.__ob__.dep.id;if(n.has(o))return;n.add(o)}if(a)for(r=t.length;r--;)e(t[r],n);else for(i=Object.keys(t),r=i.length;r--;)e(t[i[r]],n)}(e,it),it.clear()}var ot=b((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}}));function st(e,t){function n(){var e=arguments,r=n.fns;if(!Array.isArray(r))return Ue(r,null,arguments,t,"v-on handler");for(var i=r.slice(),a=0;a<i.length;a++)Ue(i[a],null,e,t,"v-on handler")}return n.fns=e,n}function lt(e,t,n,r,a,s){var l,c,p,u;for(l in e)c=e[l],p=t[l],u=ot(l),i(c)||(i(p)?(i(c.fns)&&(c=e[l]=st(c,s)),o(u.once)&&(c=e[l]=a(u.name,c,u.capture)),n(u.name,c,u.capture,u.passive,u.params)):c!==p&&(p.fns=c,e[l]=p));for(l in t)i(e[l])&&r((u=ot(l)).name,t[l],u.capture)}function ct(e,t,n){var r;e instanceof ge&&(e=e.data.hook||(e.data.hook={}));var s=e[t];function l(){n.apply(this,arguments),w(r.fns,l)}i(s)?r=st([l]):a(s.fns)&&o(s.merged)?(r=s).fns.push(l):r=st([s,l]),r.merged=!0,e[t]=r}function pt(e,t,n,r,i){if(a(t)){if(C(t,n))return e[n]=t[n],i||delete t[n],!0;if(C(t,r))return e[n]=t[r],i||delete t[r],!0}return!1}function ut(e){return s(e)?[we(e)]:Array.isArray(e)?function e(t,n){var r,l,c,p,u=[];for(r=0;r<t.length;r++)i(l=t[r])||"boolean"==typeof l||(c=u.length-1,p=u[c],Array.isArray(l)?l.length>0&&(dt((l=e(l,(n||"")+"_"+r))[0])&&dt(p)&&(u[c]=we(p.text+l[0].text),l.shift()),u.push.apply(u,l)):s(l)?dt(p)?u[c]=we(p.text+l):""!==l&&u.push(we(l)):dt(l)&&dt(p)?u[c]=we(p.text+l.text):(o(t._isVList)&&a(l.tag)&&i(l.key)&&a(n)&&(l.key="__vlist"+n+"_"+r+"__"),u.push(l)));return u}(e):void 0}function dt(e){return a(e)&&a(e.text)&&!1===e.isComment}function ft(e,t){if(e){for(var n=Object.create(null),r=ce?Reflect.ownKeys(e):Object.keys(e),i=0;i<r.length;i++){var a=r[i];if("__ob__"!==a){for(var o=e[a].from,s=t;s;){if(s._provided&&C(s._provided,o)){n[a]=s._provided[o];break}s=s.$parent}if(!s)if("default"in e[a]){var l=e[a].default;n[a]="function"==typeof l?l.call(t):l}else 0}}return n}}function ht(e,t){if(!e||!e.length)return{};for(var n={},r=0,i=e.length;r<i;r++){var a=e[r],o=a.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,a.context!==t&&a.fnContext!==t||!o||null==o.slot)(n.default||(n.default=[])).push(a);else{var s=o.slot,l=n[s]||(n[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in n)n[c].every(mt)&&delete n[c];return n}function mt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function gt(e,t,n){var i,a=Object.keys(t).length>0,o=e?!!e.$stable:!a,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(o&&n&&n!==r&&s===n.$key&&!a&&!n.$hasNormal)return n;for(var l in i={},e)e[l]&&"$"!==l[0]&&(i[l]=vt(t,l,e[l]))}else i={};for(var c in t)c in i||(i[c]=At(t,c));return e&&Object.isExtensible(e)&&(e._normalized=i),q(i,"$stable",o),q(i,"$key",s),q(i,"$hasNormal",a),i}function vt(e,t,n){var r=function(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:ut(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function At(e,t){return function(){return e[t]}}function wt(e,t){var n,r,i,o,s;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,i=e.length;r<i;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(l(e))if(ce&&e[Symbol.iterator]){n=[];for(var c=e[Symbol.iterator](),p=c.next();!p.done;)n.push(t(p.value,n.length)),p=c.next()}else for(o=Object.keys(e),n=new Array(o.length),r=0,i=o.length;r<i;r++)s=o[r],n[r]=t(e[s],s,r);return a(n)||(n=[]),n._isVList=!0,n}function yt(e,t,n,r){var i,a=this.$scopedSlots[e];a?(n=n||{},r&&(n=B(B({},r),n)),i=a(n)||t):i=this.$slots[e]||t;var o=n&&n.slot;return o?this.$createElement("template",{slot:o},i):i}function Ct(e){return je(this.$options,"filters",e)||O}function bt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function xt(e,t,n,r,i){var a=$.keyCodes[t]||n;return i&&r&&!$.keyCodes[t]?bt(i,r):a?bt(a,e):r?E(r)!==t:void 0}function kt(e,t,n,r,i){if(n)if(l(n)){var a;Array.isArray(n)&&(n=z(n));var o=function(o){if("class"===o||"style"===o||A(o))a=e;else{var s=e.attrs&&e.attrs.type;a=r||$.mustUseProp(t,s,o)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=k(o),c=E(o);l in a||c in a||(a[o]=n[o],i&&((e.on||(e.on={}))["update:"+o]=function(e){n[o]=e}))};for(var s in n)o(s)}else;return e}function Tt(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t||Et(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r}function St(e,t,n){return Et(e,"__once__"+t+(n?"_"+n:""),!0),e}function Et(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&_t(e[r],t+"_"+r,n);else _t(e,t,n)}function _t(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function Dt(e,t){if(t)if(p(t)){var n=e.on=e.on?B({},e.on):{};for(var r in t){var i=n[r],a=t[r];n[r]=i?[].concat(i,a):a}}else;return e}function Bt(e,t,n,r){t=t||{$stable:!n};for(var i=0;i<e.length;i++){var a=e[i];Array.isArray(a)?Bt(a,t,n):a&&(a.proxy&&(a.fn.proxy=!0),t[a.key]=a.fn)}return r&&(t.$key=r),t}function zt(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"==typeof r&&r&&(e[t[n]]=t[n+1])}return e}function Mt(e,t){return"string"==typeof e?t+e:e}function Lt(e){e._o=St,e._n=m,e._s=h,e._l=wt,e._t=yt,e._q=P,e._i=I,e._m=Tt,e._f=Ct,e._k=xt,e._b=kt,e._v=we,e._e=Ae,e._u=Bt,e._g=Dt,e._d=zt,e._p=Mt}function Ot(e,t,n,i,a){var s,l=this,c=a.options;C(i,"_uid")?(s=Object.create(i))._original=i:(s=i,i=i._original);var p=o(c._compiled),u=!p;this.data=e,this.props=t,this.children=n,this.parent=i,this.listeners=e.on||r,this.injections=ft(c.inject,i),this.slots=function(){return l.$slots||gt(e.scopedSlots,l.$slots=ht(n,i)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return gt(e.scopedSlots,this.slots())}}),p&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=gt(e.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,t,n,r){var a=Rt(s,e,t,n,r,u);return a&&!Array.isArray(a)&&(a.fnScopeId=c._scopeId,a.fnContext=i),a}:this._c=function(e,t,n,r){return Rt(s,e,t,n,r,u)}}function Pt(e,t,n,r,i){var a=ye(e);return a.fnContext=n,a.fnOptions=r,t.slot&&((a.data||(a.data={})).slot=t.slot),a}function It(e,t){for(var n in t)e[k(n)]=t[n]}Lt(Ot.prototype);var Nt={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;Nt.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;a(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,Jt)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,i,a){0;var o=i.data.scopedSlots,s=e.$scopedSlots,l=!!(o&&!o.$stable||s!==r&&!s.$stable||o&&e.$scopedSlots.$key!==o.$key),c=!!(a||e.$options._renderChildren||l);e.$options._parentVnode=i,e.$vnode=i,e._vnode&&(e._vnode.parent=i);if(e.$options._renderChildren=a,e.$attrs=i.data.attrs||r,e.$listeners=n||r,t&&e.$options.props){Te(!1);for(var p=e._props,u=e.$options._propKeys||[],d=0;d<u.length;d++){var f=u[d],h=e.$options.props;p[f]=$e(f,h,t,e)}Te(!0),e.$options.propsData=t}n=n||r;var m=e.$options._parentListeners;e.$options._parentListeners=n,Kt(e,n,m),c&&(e.$slots=ht(a,i.context),e.$forceUpdate());0}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,tn(r,"mounted")),e.data.keepAlive&&(n._isMounted?((t=r)._inactive=!1,rn.push(t)):en(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(n&&(t._directInactive=!0,Zt(t)))return;if(!t._inactive){t._inactive=!0;for(var r=0;r<t.$children.length;r++)e(t.$children[r]);tn(t,"deactivated")}}(t,!0):t.$destroy())}},Ft=Object.keys(Nt);function jt(e,t,n,s,c){if(!i(e)){var p=n.$options._base;if(l(e)&&(e=p.extend(e)),"function"==typeof e){var u;if(i(e.cid)&&void 0===(e=function(e,t){if(o(e.error)&&a(e.errorComp))return e.errorComp;if(a(e.resolved))return e.resolved;var n=qt;n&&a(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n);if(o(e.loading)&&a(e.loadingComp))return e.loadingComp;if(n&&!a(e.owners)){var r=e.owners=[n],s=!0,c=null,p=null;n.$on("hook:destroyed",(function(){return w(r,n)}));var u=function(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0,null!==c&&(clearTimeout(c),c=null),null!==p&&(clearTimeout(p),p=null))},d=N((function(n){e.resolved=Wt(n,t),s?r.length=0:u(!0)})),h=N((function(t){a(e.errorComp)&&(e.error=!0,u(!0))})),m=e(d,h);return l(m)&&(f(m)?i(e.resolved)&&m.then(d,h):f(m.component)&&(m.component.then(d,h),a(m.error)&&(e.errorComp=Wt(m.error,t)),a(m.loading)&&(e.loadingComp=Wt(m.loading,t),0===m.delay?e.loading=!0:c=setTimeout((function(){c=null,i(e.resolved)&&i(e.error)&&(e.loading=!0,u(!1))}),m.delay||200)),a(m.timeout)&&(p=setTimeout((function(){p=null,i(e.resolved)&&h(null)}),m.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}(u=e,p)))return function(e,t,n,r,i){var a=Ae();return a.asyncFactory=e,a.asyncMeta={data:t,context:n,children:r,tag:i},a}(u,t,n,s,c);t=t||{},kn(e),a(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var i=t.on||(t.on={}),o=i[r],s=t.model.callback;a(o)?(Array.isArray(o)?-1===o.indexOf(s):o!==s)&&(i[r]=[s].concat(o)):i[r]=s}(e.options,t);var d=function(e,t,n){var r=t.options.props;if(!i(r)){var o={},s=e.attrs,l=e.props;if(a(s)||a(l))for(var c in r){var p=E(c);pt(o,l,c,p,!0)||pt(o,s,c,p,!1)}return o}}(t,e);if(o(e.options.functional))return function(e,t,n,i,o){var s=e.options,l={},c=s.props;if(a(c))for(var p in c)l[p]=$e(p,c,t||r);else a(n.attrs)&&It(l,n.attrs),a(n.props)&&It(l,n.props);var u=new Ot(n,l,o,i,e),d=s.render.call(null,u._c,u);if(d instanceof ge)return Pt(d,n,u.parent,s,u);if(Array.isArray(d)){for(var f=ut(d)||[],h=new Array(f.length),m=0;m<f.length;m++)h[m]=Pt(f[m],n,u.parent,s,u);return h}}(e,d,t,n,s);var h=t.on;if(t.on=t.nativeOn,o(e.options.abstract)){var m=t.slot;t={},m&&(t.slot=m)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<Ft.length;n++){var r=Ft[n],i=t[r],a=Nt[r];i===a||i&&i._merged||(t[r]=i?$t(a,i):a)}}(t);var g=e.options.name||c;return new ge("vue-component-"+e.cid+(g?"-"+g:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:d,listeners:h,tag:c,children:s},u)}}}function $t(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}function Rt(e,t,n,r,c,p){return(Array.isArray(n)||s(n))&&(c=r,r=n,n=void 0),o(p)&&(c=2),function(e,t,n,r,s){if(a(n)&&a(n.__ob__))return Ae();a(n)&&a(n.is)&&(t=n.is);if(!t)return Ae();0;Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);2===s?r=ut(r):1===s&&(r=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(r));var c,p;if("string"==typeof t){var u;p=e.$vnode&&e.$vnode.ns||$.getTagNamespace(t),c=$.isReservedTag(t)?new ge($.parsePlatformTagName(t),n,r,void 0,void 0,e):n&&n.pre||!a(u=je(e.$options,"components",t))?new ge(t,n,r,void 0,void 0,e):jt(u,n,e,r,t)}else c=jt(t,n,e,r);return Array.isArray(c)?c:a(c)?(a(p)&&function e(t,n,r){t.ns=n,"foreignObject"===t.tag&&(n=void 0,r=!0);if(a(t.children))for(var s=0,l=t.children.length;s<l;s++){var c=t.children[s];a(c.tag)&&(i(c.ns)||o(r)&&"svg"!==c.tag)&&e(c,n,r)}}(c,p),a(n)&&function(e){l(e.style)&&at(e.style);l(e.class)&&at(e.class)}(n),c):Ae()}(e,t,n,r,c)}var Ht,qt=null;function Wt(e,t){return(e.__esModule||ce&&"Module"===e[Symbol.toStringTag])&&(e=e.default),l(e)?t.extend(e):e}function Ut(e){return e.isComment&&e.asyncFactory}function Yt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(a(n)&&(a(n.componentOptions)||Ut(n)))return n}}function Gt(e,t){Ht.$on(e,t)}function Xt(e,t){Ht.$off(e,t)}function Vt(e,t){var n=Ht;return function r(){var i=t.apply(null,arguments);null!==i&&n.$off(e,r)}}function Kt(e,t,n){Ht=e,lt(t,n||{},Gt,Xt,Vt,e),Ht=void 0}var Jt=null;function Qt(e){var t=Jt;return Jt=e,function(){Jt=t}}function Zt(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function en(e,t){if(t){if(e._directInactive=!1,Zt(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)en(e.$children[n]);tn(e,"activated")}}function tn(e,t){he();var n=e.$options[t],r=t+" hook";if(n)for(var i=0,a=n.length;i<a;i++)Ue(n[i],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),me()}var nn=[],rn=[],an={},on=!1,sn=!1,ln=0;var cn=0,pn=Date.now;if(G&&!J){var un=window.performance;un&&"function"==typeof un.now&&pn()>document.createEvent("Event").timeStamp&&(pn=function(){return un.now()})}function dn(){var e,t;for(cn=pn(),sn=!0,nn.sort((function(e,t){return e.id-t.id})),ln=0;ln<nn.length;ln++)(e=nn[ln]).before&&e.before(),t=e.id,an[t]=null,e.run();var n=rn.slice(),r=nn.slice();ln=nn.length=rn.length=0,an={},on=sn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,en(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&tn(r,"updated")}}(r),oe&&$.devtools&&oe.emit("flush")}var fn=0,hn=function(e,t,n,r,i){this.vm=e,i&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++fn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new le,this.newDepIds=new le,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!W.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=M)),this.value=this.lazy?void 0:this.get()};hn.prototype.get=function(){var e;he(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;We(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&at(e),me(),this.cleanupDeps()}return e},hn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},hn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},hn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==an[t]){if(an[t]=!0,sn){for(var n=nn.length-1;n>ln&&nn[n].id>e.id;)n--;nn.splice(n+1,0,e)}else nn.push(e);on||(on=!0,rt(dn))}}(this)},hn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||l(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){We(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},hn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},hn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},hn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||w(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var mn={enumerable:!0,configurable:!0,get:M,set:M};function gn(e,t,n){mn.get=function(){return this[t][n]},mn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,mn)}function vn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},r=e._props={},i=e.$options._propKeys=[];e.$parent&&Te(!1);var a=function(a){i.push(a);var o=$e(a,t,n,e);_e(r,a,o),a in e||gn(e,"_props",a)};for(var o in t)a(o);Te(!0)}(e,t.props),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?M:_(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;p(t=e._data="function"==typeof t?function(e,t){he();try{return e.call(t,t)}catch(e){return We(e,t,"data()"),{}}finally{me()}}(t,e):t||{})||(t={});var n=Object.keys(t),r=e.$options.props,i=(e.$options.methods,n.length);for(;i--;){var a=n[i];0,r&&C(r,a)||H(a)||gn(e,"_data",a)}Ee(t,!0)}(e):Ee(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=ae();for(var i in t){var a=t[i],o="function"==typeof a?a:a.get;0,r||(n[i]=new hn(e,o||M,M,An)),i in e||wn(e,i,a)}}(e,t.computed),t.watch&&t.watch!==ne&&function(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)bn(e,n,r[i]);else bn(e,n,r)}}(e,t.watch)}var An={lazy:!0};function wn(e,t,n){var r=!ae();"function"==typeof n?(mn.get=r?yn(t):Cn(n),mn.set=M):(mn.get=n.get?r&&!1!==n.cache?yn(t):Cn(n.get):M,mn.set=n.set||M),Object.defineProperty(e,t,mn)}function yn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),de.target&&t.depend(),t.value}}function Cn(e){return function(){return e.call(this,this)}}function bn(e,t,n,r){return p(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}var xn=0;function kn(e){var t=e.options;if(e.super){var n=kn(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.sealedOptions;for(var i in n)n[i]!==r[i]&&(t||(t={}),t[i]=n[i]);return t}(e);r&&B(e.extendOptions,r),(t=e.options=Fe(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function Tn(e){this._init(e)}function Sn(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,i=e._Ctor||(e._Ctor={});if(i[r])return i[r];var a=e.name||n.options.name;var o=function(e){this._init(e)};return(o.prototype=Object.create(n.prototype)).constructor=o,o.cid=t++,o.options=Fe(n.options,e),o.super=n,o.options.props&&function(e){var t=e.options.props;for(var n in t)gn(e.prototype,"_props",n)}(o),o.options.computed&&function(e){var t=e.options.computed;for(var n in t)wn(e.prototype,n,t[n])}(o),o.extend=n.extend,o.mixin=n.mixin,o.use=n.use,F.forEach((function(e){o[e]=n[e]})),a&&(o.options.components[a]=o),o.superOptions=n.options,o.extendOptions=e,o.sealedOptions=B({},o.options),i[r]=o,o}}function En(e){return e&&(e.Ctor.options.name||e.tag)}function _n(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!u(e)&&e.test(t)}function Dn(e,t){var n=e.cache,r=e.keys,i=e._vnode;for(var a in n){var o=n[a];if(o){var s=En(o.componentOptions);s&&!t(s)&&Bn(n,a,r,i)}}}function Bn(e,t,n,r){var i=e[t];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),e[t]=null,w(n,t)}!function(e){e.prototype._init=function(e){var t=this;t._uid=xn++,t._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=Fe(kn(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Kt(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,i=n&&n.context;e.$slots=ht(t._renderChildren,i),e.$scopedSlots=r,e._c=function(t,n,r,i){return Rt(e,t,n,r,i,!1)},e.$createElement=function(t,n,r,i){return Rt(e,t,n,r,i,!0)};var a=n&&n.data;_e(e,"$attrs",a&&a.attrs||r,null,!0),_e(e,"$listeners",t._parentListeners||r,null,!0)}(t),tn(t,"beforeCreate"),function(e){var t=ft(e.$options.inject,e);t&&(Te(!1),Object.keys(t).forEach((function(n){_e(e,n,t[n])})),Te(!0))}(t),vn(t),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(t),tn(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(Tn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=De,e.prototype.$delete=Be,e.prototype.$watch=function(e,t,n){if(p(t))return bn(this,e,t,n);(n=n||{}).user=!0;var r=new hn(this,e,t,n);if(n.immediate)try{t.call(this,r.value)}catch(e){We(e,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(Tn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var i=0,a=e.length;i<a;i++)r.$on(e[i],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,i=e.length;r<i;r++)n.$off(e[r],t);return n}var a,o=n._events[e];if(!o)return n;if(!t)return n._events[e]=null,n;for(var s=o.length;s--;)if((a=o[s])===t||a.fn===t){o.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?D(n):n;for(var r=D(arguments,1),i='event handler for "'+e+'"',a=0,o=n.length;a<o;a++)Ue(n[a],t,r,t,i)}return t}}(Tn),function(e){e.prototype._update=function(e,t){var n=this,r=n.$el,i=n._vnode,a=Qt(n);n._vnode=e,n.$el=i?n.__patch__(i,e):n.__patch__(n.$el,e,t,!1),a(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){tn(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||w(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),tn(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Tn),function(e){Lt(e.prototype),e.prototype.$nextTick=function(e){return rt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,i=n._parentVnode;i&&(t.$scopedSlots=gt(i.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=i;try{qt=t,e=r.call(t._renderProxy,t.$createElement)}catch(n){We(n,t,"render"),e=t._vnode}finally{qt=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof ge||(e=Ae()),e.parent=i,e}}(Tn);var zn=[String,RegExp,Array],Mn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:zn,exclude:zn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Bn(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",(function(t){Dn(e,(function(e){return _n(t,e)}))})),this.$watch("exclude",(function(t){Dn(e,(function(e){return!_n(t,e)}))}))},render:function(){var e=this.$slots.default,t=Yt(e),n=t&&t.componentOptions;if(n){var r=En(n),i=this.include,a=this.exclude;if(i&&(!r||!_n(i,r))||a&&r&&_n(a,r))return t;var o=this.cache,s=this.keys,l=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;o[l]?(t.componentInstance=o[l].componentInstance,w(s,l),s.push(l)):(o[l]=t,s.push(l),this.max&&s.length>parseInt(this.max)&&Bn(o,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return $}};Object.defineProperty(e,"config",t),e.util={warn:pe,extend:B,mergeOptions:Fe,defineReactive:_e},e.set=De,e.delete=Be,e.nextTick=rt,e.observable=function(e){return Ee(e),e},e.options=Object.create(null),F.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,B(e.options.components,Mn),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=D(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Fe(this.options,e),this}}(e),Sn(e),function(e){F.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&p(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(Tn),Object.defineProperty(Tn.prototype,"$isServer",{get:ae}),Object.defineProperty(Tn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Tn,"FunctionalRenderContext",{value:Ot}),Tn.version="2.6.10";var Ln=g("style,class"),On=g("input,textarea,option,select,progress"),Pn=function(e,t,n){return"value"===n&&On(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},In=g("contenteditable,draggable,spellcheck"),Nn=g("events,caret,typing,plaintext-only"),Fn=g("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),jn="http://www.w3.org/1999/xlink",$n=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Rn=function(e){return $n(e)?e.slice(6,e.length):""},Hn=function(e){return null==e||!1===e};function qn(e){for(var t=e.data,n=e,r=e;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=Wn(r.data,t));for(;a(n=n.parent);)n&&n.data&&(t=Wn(t,n.data));return function(e,t){if(a(e)||a(t))return Un(e,Yn(t));return""}(t.staticClass,t.class)}function Wn(e,t){return{staticClass:Un(e.staticClass,t.staticClass),class:a(e.class)?[e.class,t.class]:t.class}}function Un(e,t){return e?t?e+" "+t:e:t||""}function Yn(e){return Array.isArray(e)?function(e){for(var t,n="",r=0,i=e.length;r<i;r++)a(t=Yn(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):l(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var Gn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Xn=g("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Vn=g("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Kn=function(e){return Xn(e)||Vn(e)};function Jn(e){return Vn(e)?"svg":"math"===e?"math":void 0}var Qn=Object.create(null);var Zn=g("text,number,password,search,email,tel,url");function er(e){if("string"==typeof e){var t=document.querySelector(e);return t||document.createElement("div")}return e}var tr=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(Gn[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),nr={create:function(e,t){rr(t)},update:function(e,t){e.data.ref!==t.data.ref&&(rr(e,!0),rr(t))},destroy:function(e){rr(e,!0)}};function rr(e,t){var n=e.data.ref;if(a(n)){var r=e.context,i=e.componentInstance||e.elm,o=r.$refs;t?Array.isArray(o[n])?w(o[n],i):o[n]===i&&(o[n]=void 0):e.data.refInFor?Array.isArray(o[n])?o[n].indexOf(i)<0&&o[n].push(i):o[n]=[i]:o[n]=i}}var ir=new ge("",{},[]),ar=["create","activate","update","remove","destroy"];function or(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&a(e.data)===a(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,r=a(n=e.data)&&a(n=n.attrs)&&n.type,i=a(n=t.data)&&a(n=n.attrs)&&n.type;return r===i||Zn(r)&&Zn(i)}(e,t)||o(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&i(t.asyncFactory.error))}function sr(e,t,n){var r,i,o={};for(r=t;r<=n;++r)a(i=e[r].key)&&(o[i]=r);return o}var lr={create:cr,update:cr,destroy:function(e){cr(e,ir)}};function cr(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,r,i,a=e===ir,o=t===ir,s=ur(e.data.directives,e.context),l=ur(t.data.directives,t.context),c=[],p=[];for(n in l)r=s[n],i=l[n],r?(i.oldValue=r.value,i.oldArg=r.arg,fr(i,"update",t,e),i.def&&i.def.componentUpdated&&p.push(i)):(fr(i,"bind",t,e),i.def&&i.def.inserted&&c.push(i));if(c.length){var u=function(){for(var n=0;n<c.length;n++)fr(c[n],"inserted",t,e)};a?ct(t,"insert",u):u()}p.length&&ct(t,"postpatch",(function(){for(var n=0;n<p.length;n++)fr(p[n],"componentUpdated",t,e)}));if(!a)for(n in s)l[n]||fr(s[n],"unbind",e,e,o)}(e,t)}var pr=Object.create(null);function ur(e,t){var n,r,i=Object.create(null);if(!e)return i;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=pr),i[dr(r)]=r,r.def=je(t.$options,"directives",r.name);return i}function dr(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function fr(e,t,n,r,i){var a=e.def&&e.def[t];if(a)try{a(n.elm,e,n,r,i)}catch(r){We(r,n.context,"directive "+e.name+" "+t+" hook")}}var hr=[nr,lr];function mr(e,t){var n=t.componentOptions;if(!(a(n)&&!1===n.Ctor.options.inheritAttrs||i(e.data.attrs)&&i(t.data.attrs))){var r,o,s=t.elm,l=e.data.attrs||{},c=t.data.attrs||{};for(r in a(c.__ob__)&&(c=t.data.attrs=B({},c)),c)o=c[r],l[r]!==o&&gr(s,r,o);for(r in(J||Z)&&c.value!==l.value&&gr(s,"value",c.value),l)i(c[r])&&($n(r)?s.removeAttributeNS(jn,Rn(r)):In(r)||s.removeAttribute(r))}}function gr(e,t,n){e.tagName.indexOf("-")>-1?vr(e,t,n):Fn(t)?Hn(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):In(t)?e.setAttribute(t,function(e,t){return Hn(t)||"false"===t?"false":"contenteditable"===e&&Nn(t)?t:"true"}(t,n)):$n(t)?Hn(n)?e.removeAttributeNS(jn,Rn(t)):e.setAttributeNS(jn,t,n):vr(e,t,n)}function vr(e,t,n){if(Hn(n))e.removeAttribute(t);else{if(J&&!Q&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var r=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",r)};e.addEventListener("input",r),e.__ieph=!0}e.setAttribute(t,n)}}var Ar={create:mr,update:mr};function wr(e,t){var n=t.elm,r=t.data,o=e.data;if(!(i(r.staticClass)&&i(r.class)&&(i(o)||i(o.staticClass)&&i(o.class)))){var s=qn(t),l=n._transitionClasses;a(l)&&(s=Un(s,Yn(l))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var yr,Cr,br,xr,kr,Tr,Sr={create:wr,update:wr},Er=/[\w).+\-_$\]]/;function _r(e){var t,n,r,i,a,o=!1,s=!1,l=!1,c=!1,p=0,u=0,d=0,f=0;for(r=0;r<e.length;r++)if(n=t,t=e.charCodeAt(r),o)39===t&&92!==n&&(o=!1);else if(s)34===t&&92!==n&&(s=!1);else if(l)96===t&&92!==n&&(l=!1);else if(c)47===t&&92!==n&&(c=!1);else if(124!==t||124===e.charCodeAt(r+1)||124===e.charCodeAt(r-1)||p||u||d){switch(t){case 34:s=!0;break;case 39:o=!0;break;case 96:l=!0;break;case 40:d++;break;case 41:d--;break;case 91:u++;break;case 93:u--;break;case 123:p++;break;case 125:p--}if(47===t){for(var h=r-1,m=void 0;h>=0&&" "===(m=e.charAt(h));h--);m&&Er.test(m)||(c=!0)}}else void 0===i?(f=r+1,i=e.slice(0,r).trim()):g();function g(){(a||(a=[])).push(e.slice(f,r).trim()),f=r+1}if(void 0===i?i=e.slice(0,r).trim():0!==f&&g(),a)for(r=0;r<a.length;r++)i=Dr(i,a[r]);return i}function Dr(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var r=t.slice(0,n),i=t.slice(n+1);return'_f("'+r+'")('+e+(")"!==i?","+i:i)}function Br(e,t){console.error("[Vue compiler]: "+e)}function zr(e,t){return e?e.map((function(e){return e[t]})).filter((function(e){return e})):[]}function Mr(e,t,n,r,i){(e.props||(e.props=[])).push(Rr({name:t,value:n,dynamic:i},r)),e.plain=!1}function Lr(e,t,n,r,i){(i?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(Rr({name:t,value:n,dynamic:i},r)),e.plain=!1}function Or(e,t,n,r){e.attrsMap[t]=n,e.attrsList.push(Rr({name:t,value:n},r))}function Pr(e,t,n,r,i,a,o,s){(e.directives||(e.directives=[])).push(Rr({name:t,rawName:n,value:r,arg:i,isDynamicArg:a,modifiers:o},s)),e.plain=!1}function Ir(e,t,n){return n?"_p("+t+',"'+e+'")':e+t}function Nr(e,t,n,i,a,o,s,l){var c;(i=i||r).right?l?t="("+t+")==='click'?'contextmenu':("+t+")":"click"===t&&(t="contextmenu",delete i.right):i.middle&&(l?t="("+t+")==='click'?'mouseup':("+t+")":"click"===t&&(t="mouseup")),i.capture&&(delete i.capture,t=Ir("!",t,l)),i.once&&(delete i.once,t=Ir("~",t,l)),i.passive&&(delete i.passive,t=Ir("&",t,l)),i.native?(delete i.native,c=e.nativeEvents||(e.nativeEvents={})):c=e.events||(e.events={});var p=Rr({value:n.trim(),dynamic:l},s);i!==r&&(p.modifiers=i);var u=c[t];Array.isArray(u)?a?u.unshift(p):u.push(p):c[t]=u?a?[p,u]:[u,p]:p,e.plain=!1}function Fr(e,t,n){var r=jr(e,":"+t)||jr(e,"v-bind:"+t);if(null!=r)return _r(r);if(!1!==n){var i=jr(e,t);if(null!=i)return JSON.stringify(i)}}function jr(e,t,n){var r;if(null!=(r=e.attrsMap[t]))for(var i=e.attrsList,a=0,o=i.length;a<o;a++)if(i[a].name===t){i.splice(a,1);break}return n&&delete e.attrsMap[t],r}function $r(e,t){for(var n=e.attrsList,r=0,i=n.length;r<i;r++){var a=n[r];if(t.test(a.name))return n.splice(r,1),a}}function Rr(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function Hr(e,t,n){var r=n||{},i=r.number,a="$$v";r.trim&&(a="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(a="_n("+a+")");var o=qr(t,a);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+o+"}"}}function qr(e,t){var n=function(e){if(e=e.trim(),yr=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<yr-1)return(xr=e.lastIndexOf("."))>-1?{exp:e.slice(0,xr),key:'"'+e.slice(xr+1)+'"'}:{exp:e,key:null};Cr=e,xr=kr=Tr=0;for(;!Ur();)Yr(br=Wr())?Xr(br):91===br&&Gr(br);return{exp:e.slice(0,kr),key:e.slice(kr+1,Tr)}}(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function Wr(){return Cr.charCodeAt(++xr)}function Ur(){return xr>=yr}function Yr(e){return 34===e||39===e}function Gr(e){var t=1;for(kr=xr;!Ur();)if(Yr(e=Wr()))Xr(e);else if(91===e&&t++,93===e&&t--,0===t){Tr=xr;break}}function Xr(e){for(var t=e;!Ur()&&(e=Wr())!==t;);}var Vr;function Kr(e,t,n){var r=Vr;return function i(){var a=t.apply(null,arguments);null!==a&&Zr(e,i,n,r)}}var Jr=Ve&&!(te&&Number(te[1])<=53);function Qr(e,t,n,r){if(Jr){var i=cn,a=t;t=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return a.apply(this,arguments)}}Vr.addEventListener(e,t,re?{capture:n,passive:r}:n)}function Zr(e,t,n,r){(r||Vr).removeEventListener(e,t._wrapper||t,n)}function ei(e,t){if(!i(e.data.on)||!i(t.data.on)){var n=t.data.on||{},r=e.data.on||{};Vr=t.elm,function(e){if(a(e.__r)){var t=J?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}a(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),lt(n,r,Qr,Zr,Kr,t.context),Vr=void 0}}var ti,ni={create:ei,update:ei};function ri(e,t){if(!i(e.data.domProps)||!i(t.data.domProps)){var n,r,o=t.elm,s=e.data.domProps||{},l=t.data.domProps||{};for(n in a(l.__ob__)&&(l=t.data.domProps=B({},l)),s)n in l||(o[n]="");for(n in l){if(r=l[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===s[n])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===n&&"PROGRESS"!==o.tagName){o._value=r;var c=i(r)?"":String(r);ii(o,c)&&(o.value=c)}else if("innerHTML"===n&&Vn(o.tagName)&&i(o.innerHTML)){(ti=ti||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var p=ti.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;p.firstChild;)o.appendChild(p.firstChild)}else if(r!==s[n])try{o[n]=r}catch(e){}}}}function ii(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,r=e._vModifiers;if(a(r)){if(r.number)return m(n)!==m(t);if(r.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var ai={create:ri,update:ri},oi=b((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}})),t}));function si(e){var t=li(e.style);return e.staticStyle?B(e.staticStyle,t):t}function li(e){return Array.isArray(e)?z(e):"string"==typeof e?oi(e):e}var ci,pi=/^--/,ui=/\s*!important$/,di=function(e,t,n){if(pi.test(t))e.style.setProperty(t,n);else if(ui.test(n))e.style.setProperty(E(t),n.replace(ui,""),"important");else{var r=hi(t);if(Array.isArray(n))for(var i=0,a=n.length;i<a;i++)e.style[r]=n[i];else e.style[r]=n}},fi=["Webkit","Moz","ms"],hi=b((function(e){if(ci=ci||document.createElement("div").style,"filter"!==(e=k(e))&&e in ci)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<fi.length;n++){var r=fi[n]+t;if(r in ci)return r}}));function mi(e,t){var n=t.data,r=e.data;if(!(i(n.staticStyle)&&i(n.style)&&i(r.staticStyle)&&i(r.style))){var o,s,l=t.elm,c=r.staticStyle,p=r.normalizedStyle||r.style||{},u=c||p,d=li(t.data.style)||{};t.data.normalizedStyle=a(d.__ob__)?B({},d):d;var f=function(e,t){var n,r={};if(t)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=si(i.data))&&B(r,n);(n=si(e.data))&&B(r,n);for(var a=e;a=a.parent;)a.data&&(n=si(a.data))&&B(r,n);return r}(t,!0);for(s in u)i(f[s])&&di(l,s,"");for(s in f)(o=f[s])!==u[s]&&di(l,s,null==o?"":o)}}var gi={create:mi,update:mi},vi=/\s+/;function Ai(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(vi).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function wi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(vi).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function yi(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&B(t,Ci(e.name||"v")),B(t,e),t}return"string"==typeof e?Ci(e):void 0}}var Ci=b((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),bi=G&&!Q,xi="transition",ki="transitionend",Ti="animation",Si="animationend";bi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(xi="WebkitTransition",ki="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ti="WebkitAnimation",Si="webkitAnimationEnd"));var Ei=G?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function _i(e){Ei((function(){Ei(e)}))}function Di(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),Ai(e,t))}function Bi(e,t){e._transitionClasses&&w(e._transitionClasses,t),wi(e,t)}function zi(e,t,n){var r=Li(e,t),i=r.type,a=r.timeout,o=r.propCount;if(!i)return n();var s="transition"===i?ki:Si,l=0,c=function(){e.removeEventListener(s,p),n()},p=function(t){t.target===e&&++l>=o&&c()};setTimeout((function(){l<o&&c()}),a+1),e.addEventListener(s,p)}var Mi=/\b(transform|all)(,|$)/;function Li(e,t){var n,r=window.getComputedStyle(e),i=(r[xi+"Delay"]||"").split(", "),a=(r[xi+"Duration"]||"").split(", "),o=Oi(i,a),s=(r[Ti+"Delay"]||"").split(", "),l=(r[Ti+"Duration"]||"").split(", "),c=Oi(s,l),p=0,u=0;return"transition"===t?o>0&&(n="transition",p=o,u=a.length):"animation"===t?c>0&&(n="animation",p=c,u=l.length):u=(n=(p=Math.max(o,c))>0?o>c?"transition":"animation":null)?"transition"===n?a.length:l.length:0,{type:n,timeout:p,propCount:u,hasTransform:"transition"===n&&Mi.test(r[xi+"Property"])}}function Oi(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return Pi(t)+Pi(e[n])})))}function Pi(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Ii(e,t){var n=e.elm;a(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=yi(e.data.transition);if(!i(r)&&!a(n._enterCb)&&1===n.nodeType){for(var o=r.css,s=r.type,c=r.enterClass,p=r.enterToClass,u=r.enterActiveClass,d=r.appearClass,f=r.appearToClass,h=r.appearActiveClass,g=r.beforeEnter,v=r.enter,A=r.afterEnter,w=r.enterCancelled,y=r.beforeAppear,C=r.appear,b=r.afterAppear,x=r.appearCancelled,k=r.duration,T=Jt,S=Jt.$vnode;S&&S.parent;)T=S.context,S=S.parent;var E=!T._isMounted||!e.isRootInsert;if(!E||C||""===C){var _=E&&d?d:c,D=E&&h?h:u,B=E&&f?f:p,z=E&&y||g,M=E&&"function"==typeof C?C:v,L=E&&b||A,O=E&&x||w,P=m(l(k)?k.enter:k);0;var I=!1!==o&&!Q,F=ji(M),j=n._enterCb=N((function(){I&&(Bi(n,B),Bi(n,D)),j.cancelled?(I&&Bi(n,_),O&&O(n)):L&&L(n),n._enterCb=null}));e.data.show||ct(e,"insert",(function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),M&&M(n,j)})),z&&z(n),I&&(Di(n,_),Di(n,D),_i((function(){Bi(n,_),j.cancelled||(Di(n,B),F||(Fi(P)?setTimeout(j,P):zi(n,s,j)))}))),e.data.show&&(t&&t(),M&&M(n,j)),I||F||j()}}}function Ni(e,t){var n=e.elm;a(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=yi(e.data.transition);if(i(r)||1!==n.nodeType)return t();if(!a(n._leaveCb)){var o=r.css,s=r.type,c=r.leaveClass,p=r.leaveToClass,u=r.leaveActiveClass,d=r.beforeLeave,f=r.leave,h=r.afterLeave,g=r.leaveCancelled,v=r.delayLeave,A=r.duration,w=!1!==o&&!Q,y=ji(f),C=m(l(A)?A.leave:A);0;var b=n._leaveCb=N((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),w&&(Bi(n,p),Bi(n,u)),b.cancelled?(w&&Bi(n,c),g&&g(n)):(t(),h&&h(n)),n._leaveCb=null}));v?v(x):x()}function x(){b.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),d&&d(n),w&&(Di(n,c),Di(n,u),_i((function(){Bi(n,c),b.cancelled||(Di(n,p),y||(Fi(C)?setTimeout(b,C):zi(n,s,b)))}))),f&&f(n,b),w||y||b())}}function Fi(e){return"number"==typeof e&&!isNaN(e)}function ji(e){if(i(e))return!1;var t=e.fns;return a(t)?ji(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function $i(e,t){!0!==t.data.show&&Ii(t)}var Ri=function(e){var t,n,r={},l=e.modules,c=e.nodeOps;for(t=0;t<ar.length;++t)for(r[ar[t]]=[],n=0;n<l.length;++n)a(l[n][ar[t]])&&r[ar[t]].push(l[n][ar[t]]);function p(e){var t=c.parentNode(e);a(t)&&c.removeChild(t,e)}function u(e,t,n,i,s,l,p){if(a(e.elm)&&a(l)&&(e=l[p]=ye(e)),e.isRootInsert=!s,!function(e,t,n,i){var s=e.data;if(a(s)){var l=a(e.componentInstance)&&s.keepAlive;if(a(s=s.hook)&&a(s=s.init)&&s(e,!1),a(e.componentInstance))return d(e,t),f(n,e.elm,i),o(l)&&function(e,t,n,i){var o,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,a(o=s.data)&&a(o=o.transition)){for(o=0;o<r.activate.length;++o)r.activate[o](ir,s);t.push(s);break}f(n,e.elm,i)}(e,t,n,i),!0}}(e,t,n,i)){var u=e.data,m=e.children,g=e.tag;a(g)?(e.elm=e.ns?c.createElementNS(e.ns,g):c.createElement(g,e),A(e),h(e,m,t),a(u)&&v(e,t),f(n,e.elm,i)):o(e.isComment)?(e.elm=c.createComment(e.text),f(n,e.elm,i)):(e.elm=c.createTextNode(e.text),f(n,e.elm,i))}}function d(e,t){a(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,m(e)?(v(e,t),A(e)):(rr(e),t.push(e))}function f(e,t,n){a(e)&&(a(n)?c.parentNode(n)===e&&c.insertBefore(e,t,n):c.appendChild(e,t))}function h(e,t,n){if(Array.isArray(t)){0;for(var r=0;r<t.length;++r)u(t[r],n,e.elm,null,!0,t,r)}else s(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function m(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return a(e.tag)}function v(e,n){for(var i=0;i<r.create.length;++i)r.create[i](ir,e);a(t=e.data.hook)&&(a(t.create)&&t.create(ir,e),a(t.insert)&&n.push(e))}function A(e){var t;if(a(t=e.fnScopeId))c.setStyleScope(e.elm,t);else for(var n=e;n;)a(t=n.context)&&a(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t),n=n.parent;a(t=Jt)&&t!==e.context&&t!==e.fnContext&&a(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t)}function w(e,t,n,r,i,a){for(;r<=i;++r)u(n[r],a,e,t,!1,n,r)}function y(e){var t,n,i=e.data;if(a(i))for(a(t=i.hook)&&a(t=t.destroy)&&t(e),t=0;t<r.destroy.length;++t)r.destroy[t](e);if(a(t=e.children))for(n=0;n<e.children.length;++n)y(e.children[n])}function C(e,t,n,r){for(;n<=r;++n){var i=t[n];a(i)&&(a(i.tag)?(b(i),y(i)):p(i.elm))}}function b(e,t){if(a(t)||a(e.data)){var n,i=r.remove.length+1;for(a(t)?t.listeners+=i:t=function(e,t){function n(){0==--n.listeners&&p(e)}return n.listeners=t,n}(e.elm,i),a(n=e.componentInstance)&&a(n=n._vnode)&&a(n.data)&&b(n,t),n=0;n<r.remove.length;++n)r.remove[n](e,t);a(n=e.data.hook)&&a(n=n.remove)?n(e,t):t()}else p(e.elm)}function x(e,t,n,r){for(var i=n;i<r;i++){var o=t[i];if(a(o)&&or(e,o))return i}}function k(e,t,n,s,l,p){if(e!==t){a(t.elm)&&a(s)&&(t=s[l]=ye(t));var d=t.elm=e.elm;if(o(e.isAsyncPlaceholder))a(t.asyncFactory.resolved)?E(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(o(t.isStatic)&&o(e.isStatic)&&t.key===e.key&&(o(t.isCloned)||o(t.isOnce)))t.componentInstance=e.componentInstance;else{var f,h=t.data;a(h)&&a(f=h.hook)&&a(f=f.prepatch)&&f(e,t);var g=e.children,v=t.children;if(a(h)&&m(t)){for(f=0;f<r.update.length;++f)r.update[f](e,t);a(f=h.hook)&&a(f=f.update)&&f(e,t)}i(t.text)?a(g)&&a(v)?g!==v&&function(e,t,n,r,o){var s,l,p,d=0,f=0,h=t.length-1,m=t[0],g=t[h],v=n.length-1,A=n[0],y=n[v],b=!o;for(0;d<=h&&f<=v;)i(m)?m=t[++d]:i(g)?g=t[--h]:or(m,A)?(k(m,A,r,n,f),m=t[++d],A=n[++f]):or(g,y)?(k(g,y,r,n,v),g=t[--h],y=n[--v]):or(m,y)?(k(m,y,r,n,v),b&&c.insertBefore(e,m.elm,c.nextSibling(g.elm)),m=t[++d],y=n[--v]):or(g,A)?(k(g,A,r,n,f),b&&c.insertBefore(e,g.elm,m.elm),g=t[--h],A=n[++f]):(i(s)&&(s=sr(t,d,h)),i(l=a(A.key)?s[A.key]:x(A,t,d,h))?u(A,r,e,m.elm,!1,n,f):or(p=t[l],A)?(k(p,A,r,n,f),t[l]=void 0,b&&c.insertBefore(e,p.elm,m.elm)):u(A,r,e,m.elm,!1,n,f),A=n[++f]);d>h?w(e,i(n[v+1])?null:n[v+1].elm,n,f,v,r):f>v&&C(0,t,d,h)}(d,g,v,n,p):a(v)?(a(e.text)&&c.setTextContent(d,""),w(d,null,v,0,v.length-1,n)):a(g)?C(0,g,0,g.length-1):a(e.text)&&c.setTextContent(d,""):e.text!==t.text&&c.setTextContent(d,t.text),a(h)&&a(f=h.hook)&&a(f=f.postpatch)&&f(e,t)}}}function T(e,t,n){if(o(n)&&a(e.parent))e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var S=g("attrs,class,staticClass,staticStyle,key");function E(e,t,n,r){var i,s=t.tag,l=t.data,c=t.children;if(r=r||l&&l.pre,t.elm=e,o(t.isComment)&&a(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(a(l)&&(a(i=l.hook)&&a(i=i.init)&&i(t,!0),a(i=t.componentInstance)))return d(t,n),!0;if(a(s)){if(a(c))if(e.hasChildNodes())if(a(i=l)&&a(i=i.domProps)&&a(i=i.innerHTML)){if(i!==e.innerHTML)return!1}else{for(var p=!0,u=e.firstChild,f=0;f<c.length;f++){if(!u||!E(u,c[f],n,r)){p=!1;break}u=u.nextSibling}if(!p||u)return!1}else h(t,c,n);if(a(l)){var m=!1;for(var g in l)if(!S(g)){m=!0,v(t,n);break}!m&&l.class&&at(l.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,s){if(!i(t)){var l,p=!1,d=[];if(i(e))p=!0,u(t,d);else{var f=a(e.nodeType);if(!f&&or(e,t))k(e,t,d,null,null,s);else{if(f){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),n=!0),o(n)&&E(e,t,d))return T(t,d,!0),e;l=e,e=new ge(c.tagName(l).toLowerCase(),{},[],void 0,l)}var h=e.elm,g=c.parentNode(h);if(u(t,d,h._leaveCb?null:g,c.nextSibling(h)),a(t.parent))for(var v=t.parent,A=m(t);v;){for(var w=0;w<r.destroy.length;++w)r.destroy[w](v);if(v.elm=t.elm,A){for(var b=0;b<r.create.length;++b)r.create[b](ir,v);var x=v.data.hook.insert;if(x.merged)for(var S=1;S<x.fns.length;S++)x.fns[S]()}else rr(v);v=v.parent}a(g)?C(0,[e],0,0):a(e.tag)&&y(e)}}return T(t,d,p),t.elm}a(e)&&y(e)}}({nodeOps:tr,modules:[Ar,Sr,ni,ai,gi,G?{create:$i,activate:$i,remove:function(e,t){!0!==e.data.show?Ni(e,t):t()}}:{}].concat(hr)});Q&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&Vi(e,"input")}));var Hi={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ct(n,"postpatch",(function(){Hi.componentUpdated(e,t,n)})):qi(e,t,n.context),e._vOptions=[].map.call(e.options,Yi)):("textarea"===n.tag||Zn(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Gi),e.addEventListener("compositionend",Xi),e.addEventListener("change",Xi),Q&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){qi(e,t,n.context);var r=e._vOptions,i=e._vOptions=[].map.call(e.options,Yi);if(i.some((function(e,t){return!P(e,r[t])})))(e.multiple?t.value.some((function(e){return Ui(e,i)})):t.value!==t.oldValue&&Ui(t.value,i))&&Vi(e,"change")}}};function qi(e,t,n){Wi(e,t,n),(J||Z)&&setTimeout((function(){Wi(e,t,n)}),0)}function Wi(e,t,n){var r=t.value,i=e.multiple;if(!i||Array.isArray(r)){for(var a,o,s=0,l=e.options.length;s<l;s++)if(o=e.options[s],i)a=I(r,Yi(o))>-1,o.selected!==a&&(o.selected=a);else if(P(Yi(o),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}}function Ui(e,t){return t.every((function(t){return!P(t,e)}))}function Yi(e){return"_value"in e?e._value:e.value}function Gi(e){e.target.composing=!0}function Xi(e){e.target.composing&&(e.target.composing=!1,Vi(e.target,"input"))}function Vi(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function Ki(e){return!e.componentInstance||e.data&&e.data.transition?e:Ki(e.componentInstance._vnode)}var Ji={model:Hi,show:{bind:function(e,t,n){var r=t.value,i=(n=Ki(n)).data&&n.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&i?(n.data.show=!0,Ii(n,(function(){e.style.display=a}))):e.style.display=r?a:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=Ki(n)).data&&n.data.transition?(n.data.show=!0,r?Ii(n,(function(){e.style.display=e.__vOriginalDisplay})):Ni(n,(function(){e.style.display="none"}))):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,i){i||(e.style.display=e.__vOriginalDisplay)}}},Qi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Zi(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?Zi(Yt(t.children)):e}function ea(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var i=n._parentListeners;for(var a in i)t[k(a)]=i[a];return t}function ta(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var na=function(e){return e.tag||Ut(e)},ra=function(e){return"show"===e.name},ia={name:"transition",props:Qi,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(na)).length){0;var r=this.mode;0;var i=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var a=Zi(i);if(!a)return i;if(this._leaving)return ta(e,i);var o="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?o+"comment":o+a.tag:s(a.key)?0===String(a.key).indexOf(o)?a.key:o+a.key:a.key;var l=(a.data||(a.data={})).transition=ea(this),c=this._vnode,p=Zi(c);if(a.data.directives&&a.data.directives.some(ra)&&(a.data.show=!0),p&&p.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(a,p)&&!Ut(p)&&(!p.componentInstance||!p.componentInstance._vnode.isComment)){var u=p.data.transition=B({},l);if("out-in"===r)return this._leaving=!0,ct(u,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),ta(e,i);if("in-out"===r){if(Ut(a))return c;var d,f=function(){d()};ct(l,"afterEnter",f),ct(l,"enterCancelled",f),ct(u,"delayLeave",(function(e){d=e}))}}return i}}},aa=B({tag:String,moveClass:String},Qi);function oa(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function sa(e){e.data.newPos=e.elm.getBoundingClientRect()}function la(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,i=t.top-n.top;if(r||i){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate("+r+"px,"+i+"px)",a.transitionDuration="0s"}}delete aa.mode;var ca={Transition:ia,TransitionGroup:{props:aa,beforeMount:function(){var e=this,t=this._update;this._update=function(n,r){var i=Qt(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),t.call(e,n,r)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],o=ea(this),s=0;s<i.length;s++){var l=i[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),n[l.key]=l,(l.data||(l.data={})).transition=o;else;}if(r){for(var c=[],p=[],u=0;u<r.length;u++){var d=r[u];d.data.transition=o,d.data.pos=d.elm.getBoundingClientRect(),n[d.key]?c.push(d):p.push(d)}this.kept=e(t,null,c),this.removed=p}return e(t,null,a)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(oa),e.forEach(sa),e.forEach(la),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,r=n.style;Di(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(ki,n._moveCb=function e(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(ki,e),n._moveCb=null,Bi(n,t))})}})))},methods:{hasMove:function(e,t){if(!bi)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){wi(n,e)})),Ai(n,t),n.style.display="none",this.$el.appendChild(n);var r=Li(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};Tn.config.mustUseProp=Pn,Tn.config.isReservedTag=Kn,Tn.config.isReservedAttr=Ln,Tn.config.getTagNamespace=Jn,Tn.config.isUnknownElement=function(e){if(!G)return!0;if(Kn(e))return!1;if(e=e.toLowerCase(),null!=Qn[e])return Qn[e];var t=document.createElement(e);return e.indexOf("-")>-1?Qn[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Qn[e]=/HTMLUnknownElement/.test(t.toString())},B(Tn.options.directives,Ji),B(Tn.options.components,ca),Tn.prototype.__patch__=G?Ri:M,Tn.prototype.$mount=function(e,t){return function(e,t,n){var r;return e.$el=t,e.$options.render||(e.$options.render=Ae),tn(e,"beforeMount"),r=function(){e._update(e._render(),n)},new hn(e,r,M,{before:function(){e._isMounted&&!e._isDestroyed&&tn(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,tn(e,"mounted")),e}(this,e=e&&G?er(e):void 0,t)},G&&setTimeout((function(){$.devtools&&oe&&oe.emit("init",Tn)}),0);var pa=/\{\{((?:.|\r?\n)+?)\}\}/g,ua=/[-.*+?^${}()|[\]\/\\]/g,da=b((function(e){var t=e[0].replace(ua,"\\$&"),n=e[1].replace(ua,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")}));var fa={staticKeys:["staticClass"],transformNode:function(e,t){t.warn;var n=jr(e,"class");n&&(e.staticClass=JSON.stringify(n));var r=Fr(e,"class",!1);r&&(e.classBinding=r)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}};var ha,ma={staticKeys:["staticStyle"],transformNode:function(e,t){t.warn;var n=jr(e,"style");n&&(e.staticStyle=JSON.stringify(oi(n)));var r=Fr(e,"style",!1);r&&(e.styleBinding=r)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}},ga=function(e){return(ha=ha||document.createElement("div")).innerHTML=e,ha.textContent},va=g("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),Aa=g("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),wa=g("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),ya=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Ca=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ba="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+R.source+"]*",xa="((?:"+ba+"\\:)?"+ba+")",ka=new RegExp("^<"+xa),Ta=/^\s*(\/?)>/,Sa=new RegExp("^<\\/"+xa+"[^>]*>"),Ea=/^<!DOCTYPE [^>]+>/i,_a=/^<!\--/,Da=/^<!\[/,Ba=g("script,style,textarea",!0),za={},Ma={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},La=/&(?:lt|gt|quot|amp|#39);/g,Oa=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,Pa=g("pre,textarea",!0),Ia=function(e,t){return e&&Pa(e)&&"\n"===t[0]};function Na(e,t){var n=t?Oa:La;return e.replace(n,(function(e){return Ma[e]}))}var Fa,ja,$a,Ra,Ha,qa,Wa,Ua,Ya=/^@|^v-on:/,Ga=/^v-|^@|^:/,Xa=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Va=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Ka=/^\(|\)$/g,Ja=/^\[.*\]$/,Qa=/:(.*)$/,Za=/^:|^\.|^v-bind:/,eo=/\.[^.\]]+(?=[^\]]*$)/g,to=/^v-slot(:|$)|^#/,no=/[\r\n]/,ro=/\s+/g,io=b(ga);function ao(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:fo(t),rawAttrsMap:{},parent:n,children:[]}}function oo(e,t){Fa=t.warn||Br,qa=t.isPreTag||L,Wa=t.mustUseProp||L,Ua=t.getTagNamespace||L;var n=t.isReservedTag||L;(function(e){return!!e.component||!n(e.tag)}),$a=zr(t.modules,"transformNode"),Ra=zr(t.modules,"preTransformNode"),Ha=zr(t.modules,"postTransformNode"),ja=t.delimiters;var r,i,a=[],o=!1!==t.preserveWhitespace,s=t.whitespace,l=!1,c=!1;function p(e){if(u(e),l||e.processed||(e=so(e,t)),a.length||e===r||r.if&&(e.elseif||e.else)&&co(r,{exp:e.elseif,block:e}),i&&!e.forbidden)if(e.elseif||e.else)o=e,(s=function(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];e.pop()}}(i.children))&&s.if&&co(s,{exp:o.elseif,block:o});else{if(e.slotScope){var n=e.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[n]=e}i.children.push(e),e.parent=i}var o,s;e.children=e.children.filter((function(e){return!e.slotScope})),u(e),e.pre&&(l=!1),qa(e.tag)&&(c=!1);for(var p=0;p<Ha.length;p++)Ha[p](e,t)}function u(e){if(!c)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}return function(e,t){for(var n,r,i=[],a=t.expectHTML,o=t.isUnaryTag||L,s=t.canBeLeftOpenTag||L,l=0;e;){if(n=e,r&&Ba(r)){var c=0,p=r.toLowerCase(),u=za[p]||(za[p]=new RegExp("([\\s\\S]*?)(</"+p+"[^>]*>)","i")),d=e.replace(u,(function(e,n,r){return c=r.length,Ba(p)||"noscript"===p||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Ia(p,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""}));l+=e.length-d.length,e=d,S(p,l-c,l)}else{var f=e.indexOf("<");if(0===f){if(_a.test(e)){var h=e.indexOf("--\x3e");if(h>=0){t.shouldKeepComment&&t.comment(e.substring(4,h),l,l+h+3),x(h+3);continue}}if(Da.test(e)){var m=e.indexOf("]>");if(m>=0){x(m+2);continue}}var g=e.match(Ea);if(g){x(g[0].length);continue}var v=e.match(Sa);if(v){var A=l;x(v[0].length),S(v[1],A,l);continue}var w=k();if(w){T(w),Ia(w.tagName,e)&&x(1);continue}}var y=void 0,C=void 0,b=void 0;if(f>=0){for(C=e.slice(f);!(Sa.test(C)||ka.test(C)||_a.test(C)||Da.test(C)||(b=C.indexOf("<",1))<0);)f+=b,C=e.slice(f);y=e.substring(0,f)}f<0&&(y=e),y&&x(y.length),t.chars&&y&&t.chars(y,l-y.length,l)}if(e===n){t.chars&&t.chars(e);break}}function x(t){l+=t,e=e.substring(t)}function k(){var t=e.match(ka);if(t){var n,r,i={tagName:t[1],attrs:[],start:l};for(x(t[0].length);!(n=e.match(Ta))&&(r=e.match(Ca)||e.match(ya));)r.start=l,x(r[0].length),r.end=l,i.attrs.push(r);if(n)return i.unarySlash=n[1],x(n[0].length),i.end=l,i}}function T(e){var n=e.tagName,l=e.unarySlash;a&&("p"===r&&wa(n)&&S(r),s(n)&&r===n&&S(n));for(var c=o(n)||!!l,p=e.attrs.length,u=new Array(p),d=0;d<p;d++){var f=e.attrs[d],h=f[3]||f[4]||f[5]||"",m="a"===n&&"href"===f[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;u[d]={name:f[1],value:Na(h,m)}}c||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:u,start:e.start,end:e.end}),r=n),t.start&&t.start(n,u,c,e.start,e.end)}function S(e,n,a){var o,s;if(null==n&&(n=l),null==a&&(a=l),e)for(s=e.toLowerCase(),o=i.length-1;o>=0&&i[o].lowerCasedTag!==s;o--);else o=0;if(o>=0){for(var c=i.length-1;c>=o;c--)t.end&&t.end(i[c].tag,n,a);i.length=o,r=o&&i[o-1].tag}else"br"===s?t.start&&t.start(e,[],!0,n,a):"p"===s&&(t.start&&t.start(e,[],!1,n,a),t.end&&t.end(e,n,a))}S()}(e,{warn:Fa,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,n,o,s,u){var d=i&&i.ns||Ua(e);J&&"svg"===d&&(n=function(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];ho.test(r.name)||(r.name=r.name.replace(mo,""),t.push(r))}return t}(n));var f,h=ao(e,n,i);d&&(h.ns=d),"style"!==(f=h).tag&&("script"!==f.tag||f.attrsMap.type&&"text/javascript"!==f.attrsMap.type)||ae()||(h.forbidden=!0);for(var m=0;m<Ra.length;m++)h=Ra[m](h,t)||h;l||(!function(e){null!=jr(e,"v-pre")&&(e.pre=!0)}(h),h.pre&&(l=!0)),qa(h.tag)&&(c=!0),l?function(e){var t=e.attrsList,n=t.length;if(n)for(var r=e.attrs=new Array(n),i=0;i<n;i++)r[i]={name:t[i].name,value:JSON.stringify(t[i].value)},null!=t[i].start&&(r[i].start=t[i].start,r[i].end=t[i].end);else e.pre||(e.plain=!0)}(h):h.processed||(lo(h),function(e){var t=jr(e,"v-if");if(t)e.if=t,co(e,{exp:t,block:e});else{null!=jr(e,"v-else")&&(e.else=!0);var n=jr(e,"v-else-if");n&&(e.elseif=n)}}(h),function(e){null!=jr(e,"v-once")&&(e.once=!0)}(h)),r||(r=h),o?p(h):(i=h,a.push(h))},end:function(e,t,n){var r=a[a.length-1];a.length-=1,i=a[a.length-1],p(r)},chars:function(e,t,n){if(i&&(!J||"textarea"!==i.tag||i.attrsMap.placeholder!==e)){var r,a,p,u=i.children;if(e=c||e.trim()?"script"===(r=i).tag||"style"===r.tag?e:io(e):u.length?s?"condense"===s&&no.test(e)?"":" ":o?" ":"":"")c||"condense"!==s||(e=e.replace(ro," ")),!l&&" "!==e&&(a=function(e,t){var n=t?da(t):pa;if(n.test(e)){for(var r,i,a,o=[],s=[],l=n.lastIndex=0;r=n.exec(e);){(i=r.index)>l&&(s.push(a=e.slice(l,i)),o.push(JSON.stringify(a)));var c=_r(r[1].trim());o.push("_s("+c+")"),s.push({"@binding":c}),l=i+r[0].length}return l<e.length&&(s.push(a=e.slice(l)),o.push(JSON.stringify(a))),{expression:o.join("+"),tokens:s}}}(e,ja))?p={type:2,expression:a.expression,tokens:a.tokens,text:e}:" "===e&&u.length&&" "===u[u.length-1].text||(p={type:3,text:e}),p&&u.push(p)}},comment:function(e,t,n){if(i){var r={type:3,text:e,isComment:!0};0,i.children.push(r)}}}),r}function so(e,t){var n;!function(e){var t=Fr(e,"key");if(t){e.key=t}}(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,function(e){var t=Fr(e,"ref");t&&(e.ref=t,e.refInFor=function(e){var t=e;for(;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){var t;"template"===e.tag?(t=jr(e,"scope"),e.slotScope=t||jr(e,"slot-scope")):(t=jr(e,"slot-scope"))&&(e.slotScope=t);var n=Fr(e,"slot");n&&(e.slotTarget='""'===n?'"default"':n,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||Lr(e,"slot",n,function(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}(e,"slot")));if("template"===e.tag){var r=$r(e,to);if(r){0;var i=po(r),a=i.name,o=i.dynamic;e.slotTarget=a,e.slotTargetDynamic=o,e.slotScope=r.value||"_empty_"}}else{var s=$r(e,to);if(s){0;var l=e.scopedSlots||(e.scopedSlots={}),c=po(s),p=c.name,u=c.dynamic,d=l[p]=ao("template",[],e);d.slotTarget=p,d.slotTargetDynamic=u,d.children=e.children.filter((function(e){if(!e.slotScope)return e.parent=d,!0})),d.slotScope=s.value||"_empty_",e.children=[],e.plain=!1}}}(e),"slot"===(n=e).tag&&(n.slotName=Fr(n,"name")),function(e){var t;(t=Fr(e,"is"))&&(e.component=t);null!=jr(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var r=0;r<$a.length;r++)e=$a[r](e,t)||e;return function(e){var t,n,r,i,a,o,s,l,c=e.attrsList;for(t=0,n=c.length;t<n;t++){if(r=i=c[t].name,a=c[t].value,Ga.test(r))if(e.hasBindings=!0,(o=uo(r.replace(Ga,"")))&&(r=r.replace(eo,"")),Za.test(r))r=r.replace(Za,""),a=_r(a),(l=Ja.test(r))&&(r=r.slice(1,-1)),o&&(o.prop&&!l&&"innerHtml"===(r=k(r))&&(r="innerHTML"),o.camel&&!l&&(r=k(r)),o.sync&&(s=qr(a,"$event"),l?Nr(e,'"update:"+('+r+")",s,null,!1,0,c[t],!0):(Nr(e,"update:"+k(r),s,null,!1,0,c[t]),E(r)!==k(r)&&Nr(e,"update:"+E(r),s,null,!1,0,c[t])))),o&&o.prop||!e.component&&Wa(e.tag,e.attrsMap.type,r)?Mr(e,r,a,c[t],l):Lr(e,r,a,c[t],l);else if(Ya.test(r))r=r.replace(Ya,""),(l=Ja.test(r))&&(r=r.slice(1,-1)),Nr(e,r,a,o,!1,0,c[t],l);else{var p=(r=r.replace(Ga,"")).match(Qa),u=p&&p[1];l=!1,u&&(r=r.slice(0,-(u.length+1)),Ja.test(u)&&(u=u.slice(1,-1),l=!0)),Pr(e,r,i,a,u,l,o,c[t])}else Lr(e,r,JSON.stringify(a),c[t]),!e.component&&"muted"===r&&Wa(e.tag,e.attrsMap.type,r)&&Mr(e,r,"true",c[t])}}(e),e}function lo(e){var t;if(t=jr(e,"v-for")){var n=function(e){var t=e.match(Xa);if(!t)return;var n={};n.for=t[2].trim();var r=t[1].trim().replace(Ka,""),i=r.match(Va);i?(n.alias=r.replace(Va,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=r;return n}(t);n&&B(e,n)}}function co(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function po(e){var t=e.name.replace(to,"");return t||"#"!==e.name[0]&&(t="default"),Ja.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function uo(e){var t=e.match(eo);if(t){var n={};return t.forEach((function(e){n[e.slice(1)]=!0})),n}}function fo(e){for(var t={},n=0,r=e.length;n<r;n++)t[e[n].name]=e[n].value;return t}var ho=/^xmlns:NS\d+/,mo=/^NS\d+:/;function go(e){return ao(e.tag,e.attrsList.slice(),e.parent)}var vo=[fa,ma,{preTransformNode:function(e,t){if("input"===e.tag){var n,r=e.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=Fr(e,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var i=jr(e,"v-if",!0),a=i?"&&("+i+")":"",o=null!=jr(e,"v-else",!0),s=jr(e,"v-else-if",!0),l=go(e);lo(l),Or(l,"type","checkbox"),so(l,t),l.processed=!0,l.if="("+n+")==='checkbox'"+a,co(l,{exp:l.if,block:l});var c=go(e);jr(c,"v-for",!0),Or(c,"type","radio"),so(c,t),co(l,{exp:"("+n+")==='radio'"+a,block:c});var p=go(e);return jr(p,"v-for",!0),Or(p,":type",n),so(p,t),co(l,{exp:i,block:p}),o?l.else=!0:s&&(l.elseif=s),l}}}}];var Ao,wo,yo={expectHTML:!0,modules:vo,directives:{model:function(e,t,n){n;var r=t.value,i=t.modifiers,a=e.tag,o=e.attrsMap.type;if(e.component)return Hr(e,r,i),!1;if("select"===a)!function(e,t,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";r=r+" "+qr(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),Nr(e,"change",r,null,!0)}(e,r,i);else if("input"===a&&"checkbox"===o)!function(e,t,n){var r=n&&n.number,i=Fr(e,"value")||"null",a=Fr(e,"true-value")||"true",o=Fr(e,"false-value")||"false";Mr(e,"checked","Array.isArray("+t+")?_i("+t+","+i+")>-1"+("true"===a?":("+t+")":":_q("+t+","+a+")")),Nr(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+a+"):("+o+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+qr(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+qr(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+qr(t,"$$c")+"}",null,!0)}(e,r,i);else if("input"===a&&"radio"===o)!function(e,t,n){var r=n&&n.number,i=Fr(e,"value")||"null";Mr(e,"checked","_q("+t+","+(i=r?"_n("+i+")":i)+")"),Nr(e,"change",qr(t,i),null,!0)}(e,r,i);else if("input"===a||"textarea"===a)!function(e,t,n){var r=e.attrsMap.type;0;var i=n||{},a=i.lazy,o=i.number,s=i.trim,l=!a&&"range"!==r,c=a?"change":"range"===r?"__r":"input",p="$event.target.value";s&&(p="$event.target.value.trim()");o&&(p="_n("+p+")");var u=qr(t,p);l&&(u="if($event.target.composing)return;"+u);Mr(e,"value","("+t+")"),Nr(e,c,u,null,!0),(s||o)&&Nr(e,"blur","$forceUpdate()")}(e,r,i);else{if(!$.isReservedTag(a))return Hr(e,r,i),!1}return!0},text:function(e,t){t.value&&Mr(e,"textContent","_s("+t.value+")",t)},html:function(e,t){t.value&&Mr(e,"innerHTML","_s("+t.value+")",t)}},isPreTag:function(e){return"pre"===e},isUnaryTag:va,mustUseProp:Pn,canBeLeftOpenTag:Aa,isReservedTag:Kn,getTagNamespace:Jn,staticKeys:function(e){return e.reduce((function(e,t){return e.concat(t.staticKeys||[])}),[]).join(",")}(vo)},Co=b((function(e){return g("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))}));function bo(e,t){e&&(Ao=Co(t.staticKeys||""),wo=t.isReservedTag||L,function e(t){if(t.static=function(e){if(2===e.type)return!1;if(3===e.type)return!0;return!(!e.pre&&(e.hasBindings||e.if||e.for||v(e.tag)||!wo(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(Ao)))}(t),1===t.type){if(!wo(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var n=0,r=t.children.length;n<r;n++){var i=t.children[n];e(i),i.static||(t.static=!1)}if(t.ifConditions)for(var a=1,o=t.ifConditions.length;a<o;a++){var s=t.ifConditions[a].block;e(s),s.static||(t.static=!1)}}}(e),function e(t,n){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=n),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var r=0,i=t.children.length;r<i;r++)e(t.children[r],n||!!t.for);if(t.ifConditions)for(var a=1,o=t.ifConditions.length;a<o;a++)e(t.ifConditions[a].block,n)}}(e,!1))}var xo=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/,ko=/\([^)]*?\);*$/,To=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,So={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Eo={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},_o=function(e){return"if("+e+")return null;"},Do={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:_o("$event.target !== $event.currentTarget"),ctrl:_o("!$event.ctrlKey"),shift:_o("!$event.shiftKey"),alt:_o("!$event.altKey"),meta:_o("!$event.metaKey"),left:_o("'button' in $event && $event.button !== 0"),middle:_o("'button' in $event && $event.button !== 1"),right:_o("'button' in $event && $event.button !== 2")};function Bo(e,t){var n=t?"nativeOn:":"on:",r="",i="";for(var a in e){var o=zo(e[a]);e[a]&&e[a].dynamic?i+=a+","+o+",":r+='"'+a+'":'+o+","}return r="{"+r.slice(0,-1)+"}",i?n+"_d("+r+",["+i.slice(0,-1)+"])":n+r}function zo(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map((function(e){return zo(e)})).join(",")+"]";var t=To.test(e.value),n=xo.test(e.value),r=To.test(e.value.replace(ko,""));if(e.modifiers){var i="",a="",o=[];for(var s in e.modifiers)if(Do[s])a+=Do[s],So[s]&&o.push(s);else if("exact"===s){var l=e.modifiers;a+=_o(["ctrl","shift","alt","meta"].filter((function(e){return!l[e]})).map((function(e){return"$event."+e+"Key"})).join("||"))}else o.push(s);return o.length&&(i+=function(e){return"if(!$event.type.indexOf('key')&&"+e.map(Mo).join("&&")+")return null;"}(o)),a&&(i+=a),"function($event){"+i+(t?"return "+e.value+"($event)":n?"return ("+e.value+")($event)":r?"return "+e.value:e.value)+"}"}return t||n?e.value:"function($event){"+(r?"return "+e.value:e.value)+"}"}function Mo(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=So[e],r=Eo[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var Lo={on:function(e,t){e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}},bind:function(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}},cloak:M},Oo=function(e){this.options=e,this.warn=e.warn||Br,this.transforms=zr(e.modules,"transformCode"),this.dataGenFns=zr(e.modules,"genData"),this.directives=B(B({},Lo),e.directives);var t=e.isReservedTag||L;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function Po(e,t){var n=new Oo(t);return{render:"with(this){return "+(e?Io(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function Io(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return No(e,t);if(e.once&&!e.onceProcessed)return Fo(e,t);if(e.for&&!e.forProcessed)return $o(e,t);if(e.if&&!e.ifProcessed)return jo(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',r=Wo(e,t),i="_t("+n+(r?","+r:""),a=e.attrs||e.dynamicAttrs?Go((e.attrs||[]).concat(e.dynamicAttrs||[]).map((function(e){return{name:k(e.name),value:e.value,dynamic:e.dynamic}}))):null,o=e.attrsMap["v-bind"];!a&&!o||r||(i+=",null");a&&(i+=","+a);o&&(i+=(a?"":",null")+","+o);return i+")"}(e,t);var n;if(e.component)n=function(e,t,n){var r=t.inlineTemplate?null:Wo(t,n,!0);return"_c("+e+","+Ro(t,n)+(r?","+r:"")+")"}(e.component,e,t);else{var r;(!e.plain||e.pre&&t.maybeComponent(e))&&(r=Ro(e,t));var i=e.inlineTemplate?null:Wo(e,t,!0);n="_c('"+e.tag+"'"+(r?","+r:"")+(i?","+i:"")+")"}for(var a=0;a<t.transforms.length;a++)n=t.transforms[a](e,n);return n}return Wo(e,t)||"void 0"}function No(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+Io(e,t)+"}"),t.pre=n,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function Fo(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return jo(e,t);if(e.staticInFor){for(var n="",r=e.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+Io(e,t)+","+t.onceId+++","+n+")":Io(e,t)}return No(e,t)}function jo(e,t,n,r){return e.ifProcessed=!0,function e(t,n,r,i){if(!t.length)return i||"_e()";var a=t.shift();return a.exp?"("+a.exp+")?"+o(a.block)+":"+e(t,n,r,i):""+o(a.block);function o(e){return r?r(e,n):e.once?Fo(e,n):Io(e,n)}}(e.ifConditions.slice(),t,n,r)}function $o(e,t,n,r){var i=e.for,a=e.alias,o=e.iterator1?","+e.iterator1:"",s=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,(r||"_l")+"(("+i+"),function("+a+o+s+"){return "+(n||Io)(e,t)+"})"}function Ro(e,t){var n="{",r=function(e,t){var n=e.directives;if(!n)return;var r,i,a,o,s="directives:[",l=!1;for(r=0,i=n.length;r<i;r++){a=n[r],o=!0;var c=t.directives[a.name];c&&(o=!!c(e,a,t.warn)),o&&(l=!0,s+='{name:"'+a.name+'",rawName:"'+a.rawName+'"'+(a.value?",value:("+a.value+"),expression:"+JSON.stringify(a.value):"")+(a.arg?",arg:"+(a.isDynamicArg?a.arg:'"'+a.arg+'"'):"")+(a.modifiers?",modifiers:"+JSON.stringify(a.modifiers):"")+"},")}if(l)return s.slice(0,-1)+"]"}(e,t);r&&(n+=r+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var i=0;i<t.dataGenFns.length;i++)n+=t.dataGenFns[i](e);if(e.attrs&&(n+="attrs:"+Go(e.attrs)+","),e.props&&(n+="domProps:"+Go(e.props)+","),e.events&&(n+=Bo(e.events,!1)+","),e.nativeEvents&&(n+=Bo(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=function(e,t,n){var r=e.for||Object.keys(t).some((function(e){var n=t[e];return n.slotTargetDynamic||n.if||n.for||Ho(n)})),i=!!e.if;if(!r)for(var a=e.parent;a;){if(a.slotScope&&"_empty_"!==a.slotScope||a.for){r=!0;break}a.if&&(i=!0),a=a.parent}var o=Object.keys(t).map((function(e){return qo(t[e],n)})).join(",");return"scopedSlots:_u(["+o+"]"+(r?",null,true":"")+(!r&&i?",null,false,"+function(e){var t=5381,n=e.length;for(;n;)t=33*t^e.charCodeAt(--n);return t>>>0}(o):"")+")"}(e,e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var a=function(e,t){var n=e.children[0];0;if(n&&1===n.type){var r=Po(n,t.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map((function(e){return"function(){"+e+"}"})).join(",")+"]}"}}(e,t);a&&(n+=a+",")}return n=n.replace(/,$/,"")+"}",e.dynamicAttrs&&(n="_b("+n+',"'+e.tag+'",'+Go(e.dynamicAttrs)+")"),e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function Ho(e){return 1===e.type&&("slot"===e.tag||e.children.some(Ho))}function qo(e,t){var n=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!n)return jo(e,t,qo,"null");if(e.for&&!e.forProcessed)return $o(e,t,qo);var r="_empty_"===e.slotScope?"":String(e.slotScope),i="function("+r+"){return "+("template"===e.tag?e.if&&n?"("+e.if+")?"+(Wo(e,t)||"undefined")+":undefined":Wo(e,t)||"undefined":Io(e,t))+"}",a=r?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+i+a+"}"}function Wo(e,t,n,r,i){var a=e.children;if(a.length){var o=a[0];if(1===a.length&&o.for&&"template"!==o.tag&&"slot"!==o.tag){var s=n?t.maybeComponent(o)?",1":",0":"";return""+(r||Io)(o,t)+s}var l=n?function(e,t){for(var n=0,r=0;r<e.length;r++){var i=e[r];if(1===i.type){if(Uo(i)||i.ifConditions&&i.ifConditions.some((function(e){return Uo(e.block)}))){n=2;break}(t(i)||i.ifConditions&&i.ifConditions.some((function(e){return t(e.block)})))&&(n=1)}}return n}(a,t.maybeComponent):0,c=i||Yo;return"["+a.map((function(e){return c(e,t)})).join(",")+"]"+(l?","+l:"")}}function Uo(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function Yo(e,t){return 1===e.type?Io(e,t):3===e.type&&e.isComment?function(e){return"_e("+JSON.stringify(e.text)+")"}(e):function(e){return"_v("+(2===e.type?e.expression:Xo(JSON.stringify(e.text)))+")"}(e)}function Go(e){for(var t="",n="",r=0;r<e.length;r++){var i=e[r],a=Xo(i.value);i.dynamic?n+=i.name+","+a+",":t+='"'+i.name+'":'+a+","}return t="{"+t.slice(0,-1)+"}",n?"_d("+t+",["+n.slice(0,-1)+"])":t}function Xo(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");function Vo(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),M}}function Ko(e){var t=Object.create(null);return function(n,r,i){(r=B({},r)).warn;delete r.warn;var a=r.delimiters?String(r.delimiters)+n:n;if(t[a])return t[a];var o=e(n,r);var s={},l=[];return s.render=Vo(o.render,l),s.staticRenderFns=o.staticRenderFns.map((function(e){return Vo(e,l)})),t[a]=s}}var Jo,Qo,Zo=(Jo=function(e,t){var n=oo(e.trim(),t);!1!==t.optimize&&bo(n,t);var r=Po(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}},function(e){function t(t,n){var r=Object.create(e),i=[],a=[];if(n)for(var o in n.modules&&(r.modules=(e.modules||[]).concat(n.modules)),n.directives&&(r.directives=B(Object.create(e.directives||null),n.directives)),n)"modules"!==o&&"directives"!==o&&(r[o]=n[o]);r.warn=function(e,t,n){(n?a:i).push(e)};var s=Jo(t.trim(),r);return s.errors=i,s.tips=a,s}return{compile:t,compileToFunctions:Ko(t)}})(yo),es=(Zo.compile,Zo.compileToFunctions);function ts(e){return(Qo=Qo||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',Qo.innerHTML.indexOf("&#10;")>0}var ns=!!G&&ts(!1),rs=!!G&&ts(!0),is=b((function(e){var t=er(e);return t&&t.innerHTML})),as=Tn.prototype.$mount;Tn.prototype.$mount=function(e,t){if((e=e&&er(e))===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&(r=is(r));else{if(!r.nodeType)return this;r=r.innerHTML}else e&&(r=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(r){0;var i=es(r,{outputSourceRange:!1,shouldDecodeNewlines:ns,shouldDecodeNewlinesForHref:rs,delimiters:n.delimiters,comments:n.comments},this),a=i.render,o=i.staticRenderFns;n.render=a,n.staticRenderFns=o}}return as.call(this,e,t)},Tn.compile=es,t.a=Tn}).call(this,n(6),n(17).setImmediate)},function(e,t,n){"use strict";var r=n(1),i=n.n(r),a=n(2),o=n.n(a)()(i.a);o.push([e.i,'\ndiv[data-v-a8e61a62]{\r\n  float: left;\n}\n.products[data-v-a8e61a62]{\r\n  width: 80%;\r\n  margin: 0 auto;\r\n  padding: 30px 10% 30px;\r\n  background: rgb(89, 89, 89);\n}\n.pro-col[data-v-a8e61a62]{\r\n  width: 25%;\r\n  margin-right: 32px;\r\n  overflow: hidden;\r\n  display: inline-block;\n}\n.pro-group-title[data-v-a8e61a62]{\r\n  font-size: 18px;\r\n    color: #fff;\r\n    padding: 15px 0;\r\n    margin-bottom: 24px;\r\n    font-weight: 400;\r\n    text-align: left;\r\n    position: relative;\r\n    line-height: 28px;\r\n    font-family: 微软雅黑;\n}\n.pro-group-title[data-v-a8e61a62]::after{\r\n  content: " ";\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 1px;\r\n    border-top: 1px solid #9b9ea4;\r\n    -webkit-transform-origin: 0 0;\r\n    transform-origin: 0 0;\r\n    -webkit-transform: scaleY(.5);\r\n    transform: scaleY(.5);\n}\n.pro-block[data-v-0ef3150e][data-v-a8e61a62] {\r\n    margin-bottom: 24px;\r\n    cursor: pointer;\n}\n.pro-thumb[data-v-0ef3150e][data-v-a8e61a62] {\r\n    width: 52px;\r\n    height: 52px;\r\n    margin-right: 20px;\r\n    -webkit-box-align: center;\r\n    -ms-flex-align: center;\r\n    align-items: center;\r\n    float: left;\n}\n.pro-title[data-v-0ef3150e][data-v-a8e61a62] {\r\n    color: #eaeaea;\r\n    font-size: 16px;\r\n    text-align: left;\r\n    font-weight: 400;\r\n    line-height: 22px;\r\n    margin-top: 8px;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\n}\n.pro-summary[data-v-0ef3150e][data-v-a8e61a62] {\r\n    font-size: 12px;\r\n    color: #caced4;\r\n    line-height: 20px;\r\n    text-align: left;\n}\n.kaiti[data-v-a8e61a62] {\r\n    font-family: KaiTi;\n}\r\n',"",{version:3,sources:["webpack://./src/component/products.vue"],names:[],mappings:";AAoDA;EACA,WAAA;AACA;AACA;EACA,UAAA;EACA,cAAA;EACA,sBAAA;EACA,2BAAA;AACA;AACA;EACA,UAAA;EACA,kBAAA;EACA,gBAAA;EACA,qBAAA;AACA;AACA;EACA,eAAA;IACA,WAAA;IACA,eAAA;IACA,mBAAA;IACA,gBAAA;IACA,gBAAA;IACA,kBAAA;IACA,iBAAA;IACA,iBAAA;AACA;AACA;EACA,YAAA;IACA,kBAAA;IACA,OAAA;IACA,SAAA;IACA,WAAA;IACA,WAAA;IACA,6BAAA;IACA,6BAAA;IACA,qBAAA;IACA,6BAAA;IACA,qBAAA;AACA;AACA;IACA,mBAAA;IACA,eAAA;AACA;AACA;IACA,WAAA;IACA,YAAA;IACA,kBAAA;IACA,yBAAA;IACA,sBAAA;IACA,mBAAA;IACA,WAAA;AACA;AACA;IACA,cAAA;IACA,eAAA;IACA,gBAAA;IACA,gBAAA;IACA,iBAAA;IACA,eAAA;IACA,mBAAA;IACA,uBAAA;IACA,gBAAA;AACA;AACA;IACA,eAAA;IACA,cAAA;IACA,iBAAA;IACA,gBAAA;AACA;AACA;IACA,kBAAA;AACA",sourcesContent:['<template>\r\n  <div class="products product">\r\n     <div data-v-0ef3150e="" class="pro-col">\r\n       <h4 data-v-0ef3150e="" class="pro-group-title">智能用品</h4>\r\n       <div data-v-0ef3150e="" class="flex-row pro-block">\r\n         <img data-v-0ef3150e="" src="/img/1545100156_bcd7cf4cfdeae8b8df43dea36a52b3c9.png" alt="" class="pro-thumb">\r\n         <div data-v-0ef3150e=""  @click="pro">\r\n           <h5 data-v-0ef3150e="" class="pro-title pro-h5">宠物饮水机</h5>\r\n           <p data-v-0ef3150e="" class="pro-summary kaiti">呵护爱宠 健康饮水</p>\r\n           </div>\r\n           </div><br>\r\n           <div data-v-0ef3150e="" class="flex-row pro-block">\r\n             <img data-v-0ef3150e="" src="/img/1569566741_5c3d477f9293108d105cc14faba2d9b2.png" alt="" class="pro-thumb">\r\n             <div data-v-0ef3150e="">\r\n               <h5 data-v-0ef3150e="" class="pro-title pro-h5">智能宠物零食机</h5>\r\n               <p data-v-0ef3150e="" class="pro-summary kaiti">智能“逗猫” 远程“遛狗”</p>\r\n               </div>\r\n               </div>\r\n        </div>\r\n        <div data-v-0ef3150e="" class="pro-col">\r\n            <h4 data-v-0ef3150e="" class="pro-group-title">清洁</h4>\r\n            \r\n        </div>\r\n            <div data-v-0ef3150e="" class="pro-col">\r\n       <h4 data-v-0ef3150e="" class="pro-group-title">配件</h4>\r\n       <div data-v-0ef3150e="" class="flex-row pro-block">\r\n         <img data-v-0ef3150e="" src="/img/1545100779_5bfb0d5fa046511a64dc7cad9cff8d34.png" alt="" class="pro-thumb">\r\n         <div data-v-0ef3150e="">\r\n           <h5 data-v-0ef3150e="" class="pro-title pro-h5">宠物饮水机滤芯</h5>\r\n           <p data-v-0ef3150e="" class="pro-summary kaiti">优质滤材 四重过滤</p>\r\n           </div>\r\n           </div><br>\r\n        </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name:"products",\r\n data(){\r\n   return{}\r\n } ,\r\n   methods:{\r\n    pro(){\r\n      location.href="product.html"\r\n    }\r\n  },\r\n mounted(){\r\n\r\n }\r\n}\r\n<\/script>\r\n<style scoped>\r\ndiv{\r\n  float: left;\r\n}\r\n.products{\r\n  width: 80%;\r\n  margin: 0 auto;\r\n  padding: 30px 10% 30px;\r\n  background: rgb(89, 89, 89);\r\n}\r\n.pro-col{\r\n  width: 25%;\r\n  margin-right: 32px;\r\n  overflow: hidden;\r\n  display: inline-block;\r\n}\r\n.pro-group-title{\r\n  font-size: 18px;\r\n    color: #fff;\r\n    padding: 15px 0;\r\n    margin-bottom: 24px;\r\n    font-weight: 400;\r\n    text-align: left;\r\n    position: relative;\r\n    line-height: 28px;\r\n    font-family: 微软雅黑;\r\n}\r\n.pro-group-title::after{\r\n  content: " ";\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 1px;\r\n    border-top: 1px solid #9b9ea4;\r\n    -webkit-transform-origin: 0 0;\r\n    transform-origin: 0 0;\r\n    -webkit-transform: scaleY(.5);\r\n    transform: scaleY(.5);\r\n}\r\n.pro-block[data-v-0ef3150e] {\r\n    margin-bottom: 24px;\r\n    cursor: pointer;\r\n}\r\n.pro-thumb[data-v-0ef3150e] {\r\n    width: 52px;\r\n    height: 52px;\r\n    margin-right: 20px;\r\n    -webkit-box-align: center;\r\n    -ms-flex-align: center;\r\n    align-items: center;\r\n    float: left;\r\n}\r\n.pro-title[data-v-0ef3150e] {\r\n    color: #eaeaea;\r\n    font-size: 16px;\r\n    text-align: left;\r\n    font-weight: 400;\r\n    line-height: 22px;\r\n    margin-top: 8px;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n}\r\n.pro-summary[data-v-0ef3150e] {\r\n    font-size: 12px;\r\n    color: #caced4;\r\n    line-height: 20px;\r\n    text-align: left;\r\n}\r\n.kaiti {\r\n    font-family: KaiTi;\r\n}\r\n</style>'],sourceRoot:""}]),t.a=o},function(e,t,n){"use strict";var r=n(1),i=n.n(r),a=n(2),o=n.n(a)()(i.a);o.push([e.i,"\n.header[data-v-5ba047eb]{\r\n  height: 72px;\r\n  width: 100%;\r\n  background: #000;\r\n  color: #fff;\n}\nul[data-v-5ba047eb],ol[data-v-5ba047eb],li[data-v-5ba047eb]{\r\n  list-style-type: none;\r\n  height: 72px;\r\n  line-height: 72px;\r\n  padding-left: 20px;\n}\na[data-v-5ba047eb]{\r\n  color: #fff;\r\n  text-decoration: none;\n}\n.header>.logo[data-v-5ba047eb]{\r\n  float: left;\r\n  width: 83px;\r\n  height: 35px;\r\n  margin-top: 15px;\r\n  margin-left: 10%;\r\n  margin-right: 15%;\n}\n.header>ul[data-v-5ba047eb]{\r\n  width: auto;\r\n  float: left;\r\n  margin-right: 10%;\n}\n.header>ul>li[data-v-5ba047eb]{\r\n  height: 72px;\r\n  line-height: 72px;\r\n  float: left;\r\n  width: 100px;\r\n  padding-left: 20px;\r\n  cursor: pointer;\r\n  font-family: 微软雅黑;\r\n  font-size: 16px;\r\n  color: #ccc;\n}\n.one[data-v-5ba047eb]{\r\n  border: 1px solid #000;\r\n  background: #000;\r\n  color: #fff;\r\n  height: auto;\r\n  width: 150px;\r\n  margin: 0;\r\n  padding: 0;\r\n  z-index: 9999 !important;\r\n  position: absolute;\r\n  margin-left: -20px;\n}\n.one>li>a[data-v-5ba047eb]{\r\n  color: #ccc;\r\n  font-size: 16px;\n}\n.one>li[data-v-5ba047eb]:hover{\r\n  background: #444;\n}\n.header>.shopping[data-v-5ba047eb]{\r\n  width: 20px;\r\n  height: 20px;\r\n  margin-top: 30px;\n}\n.product[data-v-5ba047eb]{\r\n  z-index: 999;\r\n  position: absolute;\r\n  left: 0;\n}\r\n","",{version:3,sources:["webpack://./src/component/headers.vue"],names:[],mappings:";AAqFA;EACA,YAAA;EACA,WAAA;EACA,gBAAA;EACA,WAAA;AACA;AACA;EACA,qBAAA;EACA,YAAA;EACA,iBAAA;EACA,kBAAA;AACA;AACA;EACA,WAAA;EACA,qBAAA;AAEA;AACA;EACA,WAAA;EACA,WAAA;EACA,YAAA;EACA,gBAAA;EACA,gBAAA;EACA,iBAAA;AACA;AACA;EACA,WAAA;EACA,WAAA;EACA,iBAAA;AACA;AACA;EACA,YAAA;EACA,iBAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;EACA,eAAA;EACA,iBAAA;EACA,eAAA;EACA,WAAA;AACA;AACA;EACA,sBAAA;EACA,gBAAA;EACA,WAAA;EACA,YAAA;EACA,YAAA;EACA,SAAA;EACA,UAAA;EACA,wBAAA;EACA,kBAAA;EACA,kBAAA;AAEA;AACA;EACA,WAAA;EACA,eAAA;AACA;AACA;EACA,gBAAA;AACA;AACA;EACA,WAAA;EACA,YAAA;EACA,gBAAA;AACA;AACA;EACA,YAAA;EACA,kBAAA;EACA,OAAA;AACA",sourcesContent:['<template>\r\n <div class="header">\r\n    <img src="/img/logo.png" class="logo">\r\n  <ul>\r\n    <li>首页</li>\r\n    <li @mouseenter="changeDown" @mouseleave="changeUp">产品\r\n      <products v-if="hide"></products>\r\n    </li>\r\n    <li @mouseenter="changeDownOne" @mouseleave="changeUpOne">媒体\r\n       <ul v-if="show" class="one">\r\n        <li ><a href="news.html">新闻</a></li>\r\n        <li><a href="#">视频</a></li>\r\n      </ul>\r\n    </li>\r\n    <li @mouseenter="changeDownTwo" @mouseleave="changeUpTwo">关于\r\n      <ul class="one" v-if="showDown">\r\n        <li><a href="about.html">品牌故事</a></li>\r\n        <li><a href="#">团队介绍</a></li>\r\n        <li>商务合作</li>\r\n        <li>工作机会</li>\r\n      </ul>\r\n    </li>\r\n    <li @mouseenter="changeDownThree" @mouseleave="changeUpThree">支持\r\n      <ul class="one" v-if="showUp">\r\n        <li>常见问题</li>\r\n        <li>售后服务</li>\r\n        <li>版权声明</li>\r\n        <li>隐私政策</li>\r\n      </ul>\r\n    </li>\r\n  </ul>\r\n  <img src="/img/shopping.png" class="shopping">\r\n  \r\n </div>\r\n</template>\r\n<script>\r\nimport vue from \'vue\'\r\nimport products from \'./products.vue\'\r\n\r\nexport default {\r\n  name:"headers",\r\n  data(){\r\n    return{\r\n      show:false,\r\n      showDown:false,\r\n      showUp:false,\r\n      hide:false\r\n    }\r\n  },\r\n  methods:{\r\n    changeDownOne:function(){\r\n        this.show=true\r\n      \r\n    },\r\n    changeUpOne:function(){\r\n      this.show=false\r\n     console.log(111);\r\n    },\r\n    changeDownTwo:function(){\r\n      this.showDown=true\r\n    },\r\n    changeUpTwo:function(){\r\n      this.showDown=false\r\n    },\r\n    changeDownThree:function(){\r\n      this.showUp=true\r\n    },\r\n    changeUpThree:function(){\r\n      this.showUp=false\r\n    },\r\n    changeDown:function(){\r\n      this.hide=true\r\n    },\r\n    changeUp:function(){\r\n      this.hide=false\r\n    }\r\n  },\r\n  mounted:{\r\n\r\n  },\r\n  components:{products}\r\n  \r\n}\r\n<\/script>\r\n<style scoped>\r\n.header{\r\n  height: 72px;\r\n  width: 100%;\r\n  background: #000;\r\n  color: #fff;\r\n}\r\nul,ol,li{\r\n  list-style-type: none;\r\n  height: 72px;\r\n  line-height: 72px;\r\n  padding-left: 20px;\r\n}\r\na{\r\n  color: #fff;\r\n  text-decoration: none;\r\n  \r\n}\r\n.header>.logo{\r\n  float: left;\r\n  width: 83px;\r\n  height: 35px;\r\n  margin-top: 15px;\r\n  margin-left: 10%;\r\n  margin-right: 15%;\r\n}\r\n.header>ul{\r\n  width: auto;\r\n  float: left;\r\n  margin-right: 10%;\r\n}\r\n.header>ul>li{\r\n  height: 72px;\r\n  line-height: 72px;\r\n  float: left;\r\n  width: 100px;\r\n  padding-left: 20px;\r\n  cursor: pointer;\r\n  font-family: 微软雅黑;\r\n  font-size: 16px;\r\n  color: #ccc;\r\n}\r\n.one{\r\n  border: 1px solid #000;\r\n  background: #000;\r\n  color: #fff;\r\n  height: auto;\r\n  width: 150px;\r\n  margin: 0;\r\n  padding: 0;\r\n  z-index: 9999 !important;\r\n  position: absolute;\r\n  margin-left: -20px;\r\n  \r\n}\r\n.one>li>a{\r\n  color: #ccc;\r\n  font-size: 16px;\r\n}\r\n.one>li:hover{\r\n  background: #444;\r\n}\r\n.header>.shopping{\r\n  width: 20px;\r\n  height: 20px;\r\n  margin-top: 30px;\r\n}\r\n.product{\r\n  z-index: 999;\r\n  position: absolute;\r\n  left: 0;\r\n}\r\n</style>'],sourceRoot:""}]),t.a=o},function(e,t,n){"use strict";var r=n(1),i=n.n(r),a=n(2),o=n.n(a)()(i.a);o.push([e.i,"\nul[data-v-56862d9d],ol[data-v-56862d9d],li[data-v-56862d9d]{\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\n}\na[data-v-56862d9d]{\r\n  text-decoration: none;\r\n  color: #caced4;\n}\na[data-v-56862d9d]:hover{\r\n  color: #fff;\n}\n.footer[data-v-56862d9d]{\r\n  width: 88%;\r\n  background: #404040;\r\n  color: #fff;\r\n  padding-left: 12%;\r\n  padding-top: 100px;\n}\ndiv[data-v-56862d9d]{\r\n  float: left;\n}\n.news[data-v-56862d9d]{\r\n  width: 300px;\r\n  overflow: hidden;\r\n  margin-right:120px ;\n}\n.news>h4[data-v-56862d9d]{\r\n  height: 44px;\r\n  line-height: 44px;\n}\n.news>ul>li[data-v-56862d9d]{\r\n  width: 300px;\r\n  height: 44px;\r\n  line-height: 44px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  margin-right: 120px;\r\n  margin-bottom: 2px;\r\n  border-bottom:1px dashed #656b73  ;\n}\n.pub[data-v-56862d9d]{\r\n  margin-right: 120px;\n}\n.pub>ul>h4[data-v-56862d9d]{\r\n  \r\n  height: 44px;\r\n  line-height: 44px;\r\n  font-size: 16px;\n}\n.pub>ul>li[data-v-56862d9d]{\r\n  line-height: 44px;\r\n  font-size: 14px;\n}\n.bottom[data-v-56862d9d]{\r\n  float: left;\r\n  width: 100%;\r\n  color: #caced4;\r\n  margin: 50px 0 ;\n}\n.bottom>p[data-v-56862d9d]{\r\n float: left;\r\n margin-right: 120px;\n}\n.footer-flow[data-v-56862d9d]{\r\n  position: relative;\n}\n.footer-flow>h1[data-v-56862d9d]{\r\n  font-size: 20px;\r\n  color: #fff;\r\n  line-height: 30px;\r\n  text-align: right;\n}\n.footer-flow>p[data-v-56862d9d]{\r\n  text-align: right;\n}\n.footer-code[data-v-56862d9d]{\r\n  text-align: center;\n}\n.footer-code>img[data-v-56862d9d]{\r\n  width: 60px;\r\n  height: 60px;\n}\r\n","",{version:3,sources:["webpack://./src/component/footers.vue"],names:[],mappings:";AA0DA;EACA,qBAAA;EACA,UAAA;EACA,SAAA;AACA;AACA;EACA,qBAAA;EACA,cAAA;AACA;AACA;EACA,WAAA;AACA;AACA;EACA,UAAA;EACA,mBAAA;EACA,WAAA;EACA,iBAAA;EACA,kBAAA;AACA;AACA;EACA,WAAA;AACA;AACA;EACA,YAAA;EACA,gBAAA;EACA,mBAAA;AAGA;AACA;EACA,YAAA;EACA,iBAAA;AACA;AACA;EACA,YAAA;EACA,YAAA;EACA,iBAAA;EACA,gBAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;EACA,mBAAA;EACA,kBAAA;EACA,kCAAA;AACA;AACA;EACA,mBAAA;AACA;AACA;;EAEA,YAAA;EACA,iBAAA;EACA,eAAA;AACA;AACA;EACA,iBAAA;EACA,eAAA;AACA;AACA;EACA,WAAA;EACA,WAAA;EACA,cAAA;EACA,eAAA;AACA;AACA;CACA,WAAA;CACA,mBAAA;AACA;AACA;EACA,kBAAA;AACA;AACA;EACA,eAAA;EACA,WAAA;EACA,iBAAA;EACA,iBAAA;AACA;AACA;EACA,iBAAA;AACA;AACA;EACA,kBAAA;AACA;AACA;EACA,WAAA;EACA,YAAA;AAEA",sourcesContent:['<template>\r\n  <div class="footer">\r\n    <div class="news">\r\n      <ul>\r\n        <h4>新闻</h4>\r\n        <li><a href="#">小米有品上架专为猫猫狗狗打造的“第一台饮水机”？！</a></li>\r\n        <li><a href="#">选择猫猫狗狗宠物饮水机，让你的爱宠喝出健康，喝出乐趣</a></li>\r\n        <li><a href="#">选择猫猫狗狗宠物饮水机，让你的爱宠喝出健康，喝出乐趣</a></li>\r\n        <li><a href="#">解放铲屎官，猫猫狗狗宠物饮水机体验</a></li>\r\n      </ul>\r\n    </div>\r\n    <div  class="pub">\r\n      <ul>\r\n        <h4>关于我们</h4>\r\n        <li v-for="(v,index) in about" :key="index"><a href="#">{{v}}</a></li>\r\n      </ul>\r\n    </div>\r\n    <div class="pub" >\r\n      <ul>\r\n        <h4>支持</h4>\r\n        <li v-for="(v,index) in suppose" :key="index"><a href="#">{{v}}</a></li>\r\n      </ul>\r\n    </div>\r\n    <div class="pub">\r\n      <ul>\r\n        <h4>关注我们</h4>\r\n        <li v-for="(v,index) in ours" :key="index"><a href="#">{{v}}</a></li>\r\n      </ul>\r\n    </div>\r\n    <div class="bottom">\r\n      <p>Copyright © 2018 Kitten&Puppy Co.ltd All rights reserved. 京ICP备18045044号-1</p>\r\n      <div  style="display: flex;">\r\n        <div class="text-right footer-flow" style="padding-right: 20px; margin-top: -2px;">\r\n          <h1  class="flow-font">400-999-2250</h1>\r\n          <p  class="flow-title">周一到周日9:00-22:00</p>\r\n          <p  class="flow-title">(仅收市话费)</p>\r\n          <p  class="flow-title">商务邮箱：business@mmgg.fun</p>\r\n          </div>\r\n          <div  class="footer-code">\r\n            <img  src="/img/public-account.37fd1f95.png" alt="" class="img-code">\r\n            <p  class="code-title">扫码关注官方微信</p>\r\n            </div>\r\n            </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data(){\r\n    return{\r\n      about:["品牌故事","团队介绍","商务合作","工作机会"],\r\n      suppose:["常见问题","售后服务","版权声明","隐私政策"],\r\n      ours:["官方微信","新浪微博","一日猫"]\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n<style scoped>\r\nul,ol,li{\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\na{\r\n  text-decoration: none;\r\n  color: #caced4;\r\n}\r\na:hover{\r\n  color: #fff;\r\n}\r\n.footer{\r\n  width: 88%;\r\n  background: #404040;\r\n  color: #fff;\r\n  padding-left: 12%;\r\n  padding-top: 100px;\r\n}\r\ndiv{\r\n  float: left;\r\n}\r\n.news{\r\n  width: 300px;\r\n  overflow: hidden;\r\n  margin-right:120px ;\r\n\r\n\r\n}\r\n.news>h4{\r\n  height: 44px;\r\n  line-height: 44px;\r\n}\r\n.news>ul>li{\r\n  width: 300px;\r\n  height: 44px;\r\n  line-height: 44px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  margin-right: 120px;\r\n  margin-bottom: 2px;\r\n  border-bottom:1px dashed #656b73  ;\r\n}\r\n.pub{\r\n  margin-right: 120px;\r\n}\r\n.pub>ul>h4{\r\n  \r\n  height: 44px;\r\n  line-height: 44px;\r\n  font-size: 16px;\r\n}\r\n.pub>ul>li{\r\n  line-height: 44px;\r\n  font-size: 14px;\r\n}\r\n.bottom{\r\n  float: left;\r\n  width: 100%;\r\n  color: #caced4;\r\n  margin: 50px 0 ;\r\n}\r\n.bottom>p{\r\n float: left;\r\n margin-right: 120px;\r\n}\r\n.footer-flow{\r\n  position: relative;\r\n}\r\n.footer-flow>h1{\r\n  font-size: 20px;\r\n  color: #fff;\r\n  line-height: 30px;\r\n  text-align: right;\r\n}\r\n.footer-flow>p{\r\n  text-align: right;\r\n}\r\n.footer-code{\r\n  text-align: center;\r\n}\r\n.footer-code>img{\r\n  width: 60px;\r\n  height: 60px;\r\n  \r\n}\r\n</style>'],sourceRoot:""}]),t.a=o},function(e,t,n){"use strict";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"header"},[n("img",{staticClass:"logo",attrs:{src:"/img/logo.png"}}),e._v(" "),n("ul",[n("li",[e._v("首页")]),e._v(" "),n("li",{on:{mouseenter:e.changeDown,mouseleave:e.changeUp}},[e._v("产品\n     "),e.hide?n("products"):e._e()],1),e._v(" "),n("li",{on:{mouseenter:e.changeDownOne,mouseleave:e.changeUpOne}},[e._v("媒体\n      "),e.show?n("ul",{staticClass:"one"},[e._m(0),e._v(" "),e._m(1)]):e._e()]),e._v(" "),n("li",{on:{mouseenter:e.changeDownTwo,mouseleave:e.changeUpTwo}},[e._v("关于\n     "),e.showDown?n("ul",{staticClass:"one"},[e._m(2),e._v(" "),e._m(3),e._v(" "),n("li",[e._v("商务合作")]),e._v(" "),n("li",[e._v("工作机会")])]):e._e()]),e._v(" "),n("li",{on:{mouseenter:e.changeDownThree,mouseleave:e.changeUpThree}},[e._v("支持\n     "),e.showUp?n("ul",{staticClass:"one"},[n("li",[e._v("常见问题")]),e._v(" "),n("li",[e._v("售后服务")]),e._v(" "),n("li",[e._v("版权声明")]),e._v(" "),n("li",[e._v("隐私政策")])]):e._e()])]),e._v(" "),n("img",{staticClass:"shopping",attrs:{src:"/img/shopping.png"}})])};r._withStripped=!0;var i={name:"headers",data:function(){return{show:!1,showDown:!1,showUp:!1,hide:!1}},methods:{changeDownOne:function(){this.show=!0},changeUpOne:function(){this.show=!1,console.log(111)},changeDownTwo:function(){this.showDown=!0},changeUpTwo:function(){this.showDown=!1},changeDownThree:function(){this.showUp=!0},changeUpThree:function(){this.showUp=!1},changeDown:function(){this.hide=!0},changeUp:function(){this.hide=!1}},mounted:{},components:{products:n(5).a}},a=n(0),o=n.n(a),s=n(9),l={insert:"head",singleton:!1},c=(o()(s.a,l),s.a.locals,n(3)),p=Object(c.a)(i,r,[function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("a",{attrs:{href:"news.html"}},[this._v("新闻")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("a",{attrs:{href:"#"}},[this._v("视频")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("a",{attrs:{href:"about.html"}},[this._v("品牌故事")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("a",{attrs:{href:"#"}},[this._v("团队介绍")])])}],!1,null,"5ba047eb",null);p.options.__file="src/component/headers.vue";t.a=p.exports},function(e,t,n){"use strict";var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"footer"},[e._m(0),e._v(" "),n("div",{staticClass:"pub"},[n("ul",[n("h4",[e._v("关于我们")]),e._v(" "),e._l(e.about,(function(t,r){return n("li",{key:r},[n("a",{attrs:{href:"#"}},[e._v(e._s(t))])])}))],2)]),e._v(" "),n("div",{staticClass:"pub"},[n("ul",[n("h4",[e._v("支持")]),e._v(" "),e._l(e.suppose,(function(t,r){return n("li",{key:r},[n("a",{attrs:{href:"#"}},[e._v(e._s(t))])])}))],2)]),e._v(" "),n("div",{staticClass:"pub"},[n("ul",[n("h4",[e._v("关注我们")]),e._v(" "),e._l(e.ours,(function(t,r){return n("li",{key:r},[n("a",{attrs:{href:"#"}},[e._v(e._s(t))])])}))],2)]),e._v(" "),e._m(1)])};r._withStripped=!0;var i={data:function(){return{about:["品牌故事","团队介绍","商务合作","工作机会"],suppose:["常见问题","售后服务","版权声明","隐私政策"],ours:["官方微信","新浪微博","一日猫"]}}},a=n(0),o=n.n(a),s=n(10),l={insert:"head",singleton:!1},c=(o()(s.a,l),s.a.locals,n(3)),p=Object(c.a)(i,r,[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"news"},[n("ul",[n("h4",[e._v("新闻")]),e._v(" "),n("li",[n("a",{attrs:{href:"#"}},[e._v("小米有品上架专为猫猫狗狗打造的“第一台饮水机”？！")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#"}},[e._v("选择猫猫狗狗宠物饮水机，让你的爱宠喝出健康，喝出乐趣")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#"}},[e._v("选择猫猫狗狗宠物饮水机，让你的爱宠喝出健康，喝出乐趣")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#"}},[e._v("解放铲屎官，猫猫狗狗宠物饮水机体验")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"bottom"},[n("p",[e._v("Copyright © 2018 Kitten&Puppy Co.ltd All rights reserved. 京ICP备18045044号-1")]),e._v(" "),n("div",{staticStyle:{display:"flex"}},[n("div",{staticClass:"text-right footer-flow",staticStyle:{"padding-right":"20px","margin-top":"-2px"}},[n("h1",{staticClass:"flow-font"},[e._v("400-999-2250")]),e._v(" "),n("p",{staticClass:"flow-title"},[e._v("周一到周日9:00-22:00")]),e._v(" "),n("p",{staticClass:"flow-title"},[e._v("(仅收市话费)")]),e._v(" "),n("p",{staticClass:"flow-title"},[e._v("商务邮箱：business@mmgg.fun")])]),e._v(" "),n("div",{staticClass:"footer-code"},[n("img",{staticClass:"img-code",attrs:{src:"/img/public-account.37fd1f95.png",alt:""}}),e._v(" "),n("p",{staticClass:"code-title"},[e._v("扫码关注官方微信")])])])])}],!1,null,"56862d9d",null);p.options.__file="src/component/footers.vue";t.a=p.exports},,function(e,t){var n,r,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var l,c=[],p=!1,u=-1;function d(){p&&l&&(p=!1,l.length?c=l.concat(c):u=-1,c.length&&f())}function f(){if(!p){var e=s(d);p=!0;for(var t=c.length;t;){for(l=c,c=[];++u<t;)l&&l[u].run();u=-1,t=c.length}l=null,p=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||p||s(f)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},,function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,i=Array.isArray,a=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),o=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:o,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var a=t[r],o=a.obj[a.prop],s=Object.keys(o),l=0;l<s.length;++l){var c=s[l],p=o[c];"object"==typeof p&&null!==p&&-1===n.indexOf(p)&&(t.push({obj:o,prop:c}),n.push(p))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(i(n)){for(var r=[],a=0;a<n.length;++a)void 0!==n[a]&&r.push(n[a]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n){if(0===e.length)return e;var r=e;if("symbol"==typeof e?r=Symbol.prototype.toString.call(e):"string"!=typeof e&&(r=String(e)),"iso-8859-1"===n)return escape(r).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var i="",o=0;o<r.length;++o){var s=r.charCodeAt(o);45===s||46===s||95===s||126===s||s>=48&&s<=57||s>=65&&s<=90||s>=97&&s<=122?i+=r.charAt(o):s<128?i+=a[s]:s<2048?i+=a[192|s>>6]+a[128|63&s]:s<55296||s>=57344?i+=a[224|s>>12]+a[128|s>>6&63]+a[128|63&s]:(o+=1,s=65536+((1023&s)<<10|1023&r.charCodeAt(o)),i+=a[240|s>>18]+a[128|s>>12&63]+a[128|s>>6&63]+a[128|63&s])}return i},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,n,a){if(!n)return t;if("object"!=typeof n){if(i(t))t.push(n);else{if(!t||"object"!=typeof t)return[t,n];(a&&(a.plainObjects||a.allowPrototypes)||!r.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(n);var s=t;return i(t)&&!i(n)&&(s=o(t,a)),i(t)&&i(n)?(n.forEach((function(n,i){if(r.call(t,i)){var o=t[i];o&&"object"==typeof o&&n&&"object"==typeof n?t[i]=e(o,n,a):t.push(n)}else t[i]=n})),t):Object.keys(n).reduce((function(t,i){var o=n[i];return r.call(t,i)?t[i]=e(t[i],o,a):t[i]=o,t}),s)}}},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function a(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new a(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new a(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(18),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(6))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,a,o,s,l=1,c={},p=!1,u=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){h(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((a=new MessageChannel).port1.onmessage=function(e){h(e.data)},r=function(e){a.port2.postMessage(e)}):u&&"onreadystatechange"in u.createElement("script")?(i=u.documentElement,r=function(e){var t=u.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(h,0,e)}:(o="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&h(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),r=function(t){e.postMessage(o+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return c[l]=i,r(l),l++},d.clearImmediate=f}function f(e){delete c[e]}function h(e){if(p)setTimeout(h,0,e);else{var t=c[e];if(t){p=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{f(e),p=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(6),n(14))},function(e,t,n){"use strict";var r=n(1),i=n.n(r),a=n(2),o=n.n(a)()(i.a);o.push([e.i,"/**\n * Swiper 3.4.2\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * \n * http://www.idangero.us/swiper/\n * \n * Copyright 2017, Vladimir Kharlampidi\n * The iDangero.us\n * http://www.idangero.us/\n * \n * Licensed under MIT\n * \n * Released on: March 10, 2017\n */\n.swiper-container{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;z-index:1}.swiper-container-no-flexbox .swiper-slide{float:left}.swiper-container-vertical>.swiper-wrapper{-webkit-box-orient:vertical;-moz-box-orient:vertical;-ms-flex-direction:column;-webkit-flex-direction:column;flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-transition-property:-webkit-transform;-moz-transition-property:-moz-transform;-o-transition-property:-o-transform;-ms-transition-property:-ms-transform;transition-property:transform;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}.swiper-container-android .swiper-slide,.swiper-wrapper{-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-o-transform:translate(0,0);-ms-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.swiper-container-multirow>.swiper-wrapper{-webkit-box-lines:multiple;-moz-box-lines:multiple;-ms-flex-wrap:wrap;-webkit-flex-wrap:wrap;flex-wrap:wrap}.swiper-container-free-mode>.swiper-wrapper{-webkit-transition-timing-function:ease-out;-moz-transition-timing-function:ease-out;-ms-transition-timing-function:ease-out;-o-transition-timing-function:ease-out;transition-timing-function:ease-out;margin:0 auto}.swiper-slide{-webkit-flex-shrink:0;-ms-flex:0 0 auto;flex-shrink:0;width:100%;height:100%;position:relative}.swiper-container-autoheight,.swiper-container-autoheight .swiper-slide{height:auto}.swiper-container-autoheight .swiper-wrapper{-webkit-box-align:start;-ms-flex-align:start;-webkit-align-items:flex-start;align-items:flex-start;-webkit-transition-property:-webkit-transform,height;-moz-transition-property:-moz-transform;-o-transition-property:-o-transform;-ms-transition-property:-ms-transform;transition-property:transform,height}.swiper-container .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-wp8-horizontal{-ms-touch-action:pan-y;touch-action:pan-y}.swiper-wp8-vertical{-ms-touch-action:pan-x;touch-action:pan-x}.swiper-button-next,.swiper-button-prev{position:absolute;top:50%;width:27px;height:44px;margin-top:-22px;z-index:10;cursor:pointer;-moz-background-size:27px 44px;-webkit-background-size:27px 44px;background-size:27px 44px;background-position:center;background-repeat:no-repeat}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-prev,.swiper-container-rtl .swiper-button-next{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23007aff'%2F%3E%3C%2Fsvg%3E\");left:10px;right:auto}.swiper-button-prev.swiper-button-black,.swiper-container-rtl .swiper-button-next.swiper-button-black{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23000000'%2F%3E%3C%2Fsvg%3E\")}.swiper-button-prev.swiper-button-white,.swiper-container-rtl .swiper-button-next.swiper-button-white{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23ffffff'%2F%3E%3C%2Fsvg%3E\")}.swiper-button-next,.swiper-container-rtl .swiper-button-prev{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23007aff'%2F%3E%3C%2Fsvg%3E\");right:10px;left:auto}.swiper-button-next.swiper-button-black,.swiper-container-rtl .swiper-button-prev.swiper-button-black{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23000000'%2F%3E%3C%2Fsvg%3E\")}.swiper-button-next.swiper-button-white,.swiper-container-rtl .swiper-button-prev.swiper-button-white{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23ffffff'%2F%3E%3C%2Fsvg%3E\")}.swiper-pagination{position:absolute;text-align:center;-webkit-transition:.3s;-moz-transition:.3s;-o-transition:.3s;transition:.3s;-webkit-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-container-horizontal>.swiper-pagination-bullets,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:10px;left:0;width:100%}.swiper-pagination-bullet{width:8px;height:8px;display:inline-block;border-radius:100%;background:#000;opacity:.2}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-moz-appearance:none;-ms-appearance:none;-webkit-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-white .swiper-pagination-bullet{background:#fff}.swiper-pagination-bullet-active{opacity:1;background:#007aff}.swiper-pagination-white .swiper-pagination-bullet-active{background:#fff}.swiper-pagination-black .swiper-pagination-bullet-active{background:#000}.swiper-container-vertical>.swiper-pagination-bullets{right:10px;top:50%;-webkit-transform:translate3d(0,-50%,0);-moz-transform:translate3d(0,-50%,0);-o-transform:translate(0,-50%);-ms-transform:translate3d(0,-50%,0);transform:translate3d(0,-50%,0)}.swiper-container-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:5px 0;display:block}.swiper-container-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 5px}.swiper-pagination-progress{background:rgba(0,0,0,.25);position:absolute}.swiper-pagination-progress .swiper-pagination-progressbar{background:#007aff;position:absolute;left:0;top:0;width:100%;height:100%;-webkit-transform:scale(0);-ms-transform:scale(0);-o-transform:scale(0);transform:scale(0);-webkit-transform-origin:left top;-moz-transform-origin:left top;-ms-transform-origin:left top;-o-transform-origin:left top;transform-origin:left top}.swiper-container-rtl .swiper-pagination-progress .swiper-pagination-progressbar{-webkit-transform-origin:right top;-moz-transform-origin:right top;-ms-transform-origin:right top;-o-transform-origin:right top;transform-origin:right top}.swiper-container-horizontal>.swiper-pagination-progress{width:100%;height:4px;left:0;top:0}.swiper-container-vertical>.swiper-pagination-progress{width:4px;height:100%;left:0;top:0}.swiper-pagination-progress.swiper-pagination-white{background:rgba(255,255,255,.5)}.swiper-pagination-progress.swiper-pagination-white .swiper-pagination-progressbar{background:#fff}.swiper-pagination-progress.swiper-pagination-black .swiper-pagination-progressbar{background:#000}.swiper-container-3d{-webkit-perspective:1200px;-moz-perspective:1200px;-o-perspective:1200px;perspective:1200px}.swiper-container-3d .swiper-cube-shadow,.swiper-container-3d .swiper-slide,.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top,.swiper-container-3d .swiper-wrapper{-webkit-transform-style:preserve-3d;-moz-transform-style:preserve-3d;-ms-transform-style:preserve-3d;transform-style:preserve-3d}.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-container-3d .swiper-slide-shadow-left{background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(right,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-moz-linear-gradient(right,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(right,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-right{background-image:-webkit-gradient(linear,right top,left top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(left,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-moz-linear-gradient(left,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(left,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-top{background-image:-webkit-gradient(linear,left top,left bottom,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(bottom,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-moz-linear-gradient(bottom,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(bottom,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-bottom{background-image:-webkit-gradient(linear,left bottom,left top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(top,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-moz-linear-gradient(top,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(top,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-coverflow .swiper-wrapper,.swiper-container-flip .swiper-wrapper{-ms-perspective:1200px}.swiper-container-cube,.swiper-container-flip{overflow:visible}.swiper-container-cube .swiper-slide,.swiper-container-flip .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;-moz-backface-visibility:hidden;-ms-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-container-cube .swiper-slide .swiper-slide,.swiper-container-flip .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-active .swiper-slide-active,.swiper-container-flip .swiper-slide-active,.swiper-container-flip .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube .swiper-slide-shadow-bottom,.swiper-container-cube .swiper-slide-shadow-left,.swiper-container-cube .swiper-slide-shadow-right,.swiper-container-cube .swiper-slide-shadow-top,.swiper-container-flip .swiper-slide-shadow-bottom,.swiper-container-flip .swiper-slide-shadow-left,.swiper-container-flip .swiper-slide-shadow-right,.swiper-container-flip .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;-moz-backface-visibility:hidden;-ms-backface-visibility:hidden;backface-visibility:hidden}.swiper-container-cube .swiper-slide{visibility:hidden;-webkit-transform-origin:0 0;-moz-transform-origin:0 0;-ms-transform-origin:0 0;transform-origin:0 0;width:100%;height:100%}.swiper-container-cube.swiper-container-rtl .swiper-slide{-webkit-transform-origin:100% 0;-moz-transform-origin:100% 0;-ms-transform-origin:100% 0;transform-origin:100% 0}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-next,.swiper-container-cube .swiper-slide-next+.swiper-slide,.swiper-container-cube .swiper-slide-prev{pointer-events:auto;visibility:visible}.swiper-container-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0;width:100%;height:100%;background:#000;opacity:.6;-webkit-filter:blur(50px);filter:blur(50px);z-index:0}.swiper-container-fade.swiper-container-free-mode .swiper-slide{-webkit-transition-timing-function:ease-out;-moz-transition-timing-function:ease-out;-ms-transition-timing-function:ease-out;-o-transition-timing-function:ease-out;transition-timing-function:ease-out}.swiper-container-fade .swiper-slide{pointer-events:none;-webkit-transition-property:opacity;-moz-transition-property:opacity;-o-transition-property:opacity;transition-property:opacity}.swiper-container-fade .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-fade .swiper-slide-active,.swiper-container-fade .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-zoom-container{width:100%;height:100%;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-box-pack:center;-moz-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-box-align:center;-moz-box-align:center;-ms-flex-align:center;-webkit-align-items:center;align-items:center;text-align:center}.swiper-zoom-container>canvas,.swiper-zoom-container>img,.swiper-zoom-container>svg{max-width:100%;max-height:100%;object-fit:contain}.swiper-scrollbar{border-radius:10px;position:relative;-ms-touch-action:none;background:rgba(0,0,0,.1)}.swiper-container-horizontal>.swiper-scrollbar{position:absolute;left:1%;bottom:3px;z-index:50;height:5px;width:98%}.swiper-container-vertical>.swiper-scrollbar{position:absolute;right:3px;top:1%;z-index:50;width:5px;height:98%}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:rgba(0,0,0,.5);border-radius:10px;left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-lazy-preloader{width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;-webkit-transform-origin:50%;-moz-transform-origin:50%;transform-origin:50%;-webkit-animation:swiper-preloader-spin 1s steps(12,end) infinite;-moz-animation:swiper-preloader-spin 1s steps(12,end) infinite;animation:swiper-preloader-spin 1s steps(12,end) infinite}.swiper-lazy-preloader:after{display:block;content:\"\";width:100%;height:100%;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20viewBox%3D'0%200%20120%20120'%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20xmlns%3Axlink%3D'http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink'%3E%3Cdefs%3E%3Cline%20id%3D'l'%20x1%3D'60'%20x2%3D'60'%20y1%3D'7'%20y2%3D'27'%20stroke%3D'%236c6c6c'%20stroke-width%3D'11'%20stroke-linecap%3D'round'%2F%3E%3C%2Fdefs%3E%3Cg%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(30%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(60%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(90%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(120%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(150%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.37'%20transform%3D'rotate(180%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.46'%20transform%3D'rotate(210%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.56'%20transform%3D'rotate(240%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.66'%20transform%3D'rotate(270%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.75'%20transform%3D'rotate(300%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.85'%20transform%3D'rotate(330%2060%2C60)'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E\");background-position:50%;-webkit-background-size:100%;background-size:100%;background-repeat:no-repeat}.swiper-lazy-preloader-white:after{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20viewBox%3D'0%200%20120%20120'%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20xmlns%3Axlink%3D'http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink'%3E%3Cdefs%3E%3Cline%20id%3D'l'%20x1%3D'60'%20x2%3D'60'%20y1%3D'7'%20y2%3D'27'%20stroke%3D'%23fff'%20stroke-width%3D'11'%20stroke-linecap%3D'round'%2F%3E%3C%2Fdefs%3E%3Cg%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(30%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(60%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(90%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(120%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(150%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.37'%20transform%3D'rotate(180%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.46'%20transform%3D'rotate(210%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.56'%20transform%3D'rotate(240%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.66'%20transform%3D'rotate(270%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.75'%20transform%3D'rotate(300%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.85'%20transform%3D'rotate(330%2060%2C60)'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E\")}@-webkit-keyframes swiper-preloader-spin{100%{-webkit-transform:rotate(360deg)}}@keyframes swiper-preloader-spin{100%{transform:rotate(360deg)}}","",{version:3,sources:["webpack://./node_modules/swiper/dist/css/swiper.min.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;EAaE;AACF,kBAAkB,gBAAgB,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,eAAe,CAAC,SAAS,CAAC,2CAA2C,UAAU,CAAC,2CAA2C,2BAA2B,CAAC,wBAAwB,CAAC,yBAAyB,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,gBAAgB,iBAAiB,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,YAAY,CAAC,6CAA6C,CAAC,uCAAuC,CAAC,mCAAmC,CAAC,qCAAqC,CAAC,6BAA6B,CAAC,8BAA8B,CAAC,2BAA2B,CAAC,sBAAsB,CAAC,wDAAwD,oCAAoC,CAAC,iCAAiC,CAAC,2BAA2B,CAAC,gCAAgC,CAAC,4BAA4B,CAAC,2CAA2C,0BAA0B,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,cAAc,CAAC,4CAA4C,2CAA2C,CAAC,wCAAwC,CAAC,uCAAuC,CAAC,sCAAsC,CAAC,mCAAmC,CAAC,aAAa,CAAC,cAAc,qBAAqB,CAAC,iBAAiB,CAAC,aAAa,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,wEAAwE,WAAW,CAAC,6CAA6C,uBAAuB,CAAC,oBAAoB,CAAC,8BAA8B,CAAC,sBAAsB,CAAC,oDAAoD,CAAC,uCAAuC,CAAC,mCAAmC,CAAC,qCAAqC,CAAC,oCAAoC,CAAC,uCAAuC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,SAAS,CAAC,aAAa,CAAC,uBAAuB,sBAAsB,CAAC,kBAAkB,CAAC,qBAAqB,sBAAsB,CAAC,kBAAkB,CAAC,wCAAwC,iBAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,UAAU,CAAC,cAAc,CAAC,8BAA8B,CAAC,iCAAiC,CAAC,yBAAyB,CAAC,0BAA0B,CAAC,2BAA2B,CAAC,sFAAsF,WAAW,CAAC,WAAW,CAAC,mBAAmB,CAAC,8DAA8D,mRAAmR,CAAC,SAAS,CAAC,UAAU,CAAC,sGAAsG,mRAAmR,CAAC,sGAAsG,mRAAmR,CAAC,8DAA8D,mRAAmR,CAAC,UAAU,CAAC,SAAS,CAAC,sGAAsG,mRAAmR,CAAC,sGAAsG,mRAAmR,CAAC,mBAAmB,iBAAiB,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,cAAc,CAAC,oCAAoC,CAAC,gCAAgC,CAAC,+BAA+B,CAAC,4BAA4B,CAAC,UAAU,CAAC,4CAA4C,SAAS,CAAC,8GAA8G,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,0BAA0B,SAAS,CAAC,UAAU,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,eAAe,CAAC,UAAU,CAAC,gCAAgC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,eAAe,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,uBAAuB,CAAC,eAAe,CAAC,uDAAuD,cAAc,CAAC,mDAAmD,eAAe,CAAC,iCAAiC,SAAS,CAAC,kBAAkB,CAAC,0DAA0D,eAAe,CAAC,0DAA0D,eAAe,CAAC,sDAAsD,UAAU,CAAC,OAAO,CAAC,uCAAuC,CAAC,oCAAoC,CAAC,8BAA8B,CAAC,mCAAmC,CAAC,+BAA+B,CAAC,gFAAgF,YAAY,CAAC,aAAa,CAAC,kFAAkF,YAAY,CAAC,4BAA4B,0BAA0B,CAAC,iBAAiB,CAAC,2DAA2D,kBAAkB,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,iCAAiC,CAAC,8BAA8B,CAAC,6BAA6B,CAAC,4BAA4B,CAAC,yBAAyB,CAAC,iFAAiF,kCAAkC,CAAC,+BAA+B,CAAC,8BAA8B,CAAC,6BAA6B,CAAC,0BAA0B,CAAC,yDAAyD,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,uDAAuD,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,oDAAoD,+BAA+B,CAAC,mFAAmF,eAAe,CAAC,mFAAmF,eAAe,CAAC,qBAAqB,0BAA0B,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,+SAA+S,mCAAmC,CAAC,gCAAgC,CAAC,+BAA+B,CAAC,2BAA2B,CAAC,8LAA8L,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,mBAAmB,CAAC,UAAU,CAAC,+CAA+C,mGAAmG,CAAC,4EAA4E,CAAC,yEAAyE,CAAC,uEAAuE,CAAC,sEAAsE,CAAC,gDAAgD,mGAAmG,CAAC,2EAA2E,CAAC,wEAAwE,CAAC,sEAAsE,CAAC,uEAAuE,CAAC,8CAA8C,qGAAqG,CAAC,6EAA6E,CAAC,0EAA0E,CAAC,wEAAwE,CAAC,qEAAqE,CAAC,iDAAiD,qGAAqG,CAAC,0EAA0E,CAAC,uEAAuE,CAAC,qEAAqE,CAAC,wEAAwE,CAAC,mFAAmF,sBAAsB,CAAC,8CAA8C,gBAAgB,CAAC,0EAA0E,mBAAmB,CAAC,kCAAkC,CAAC,+BAA+B,CAAC,8BAA8B,CAAC,0BAA0B,CAAC,SAAS,CAAC,sGAAsG,mBAAmB,CAAC,0NAA0N,mBAAmB,CAAC,4YAA4Y,SAAS,CAAC,kCAAkC,CAAC,+BAA+B,CAAC,8BAA8B,CAAC,0BAA0B,CAAC,qCAAqC,iBAAiB,CAAC,4BAA4B,CAAC,yBAAyB,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC,0DAA0D,+BAA+B,CAAC,4BAA4B,CAAC,2BAA2B,CAAC,uBAAuB,CAAC,wLAAwL,mBAAmB,CAAC,kBAAkB,CAAC,2CAA2C,iBAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,eAAe,CAAC,UAAU,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,SAAS,CAAC,gEAAgE,2CAA2C,CAAC,wCAAwC,CAAC,uCAAuC,CAAC,sCAAsC,CAAC,mCAAmC,CAAC,qCAAqC,mBAAmB,CAAC,mCAAmC,CAAC,gCAAgC,CAAC,8BAA8B,CAAC,2BAA2B,CAAC,mDAAmD,mBAAmB,CAAC,6GAA6G,mBAAmB,CAAC,uBAAuB,UAAU,CAAC,WAAW,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,YAAY,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,8BAA8B,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,oFAAoF,cAAc,CAAC,eAAe,CAAC,kBAAkB,CAAC,kBAAkB,kBAAkB,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,yBAAyB,CAAC,+CAA+C,iBAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,6CAA6C,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,uBAAuB,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,WAAW,CAAC,uBAAuB,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,CAAC,4BAA4B,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,iEAAiE,CAAC,8DAA8D,CAAC,yDAAyD,CAAC,6BAA6B,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,w7CAAw7C,CAAC,uBAAuB,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,2BAA2B,CAAC,mCAAmC,q7CAAq7C,CAAC,yCAAyC,KAAK,gCAAgC,CAAC,CAAC,iCAAiC,KAAK,wBAAwB,CAAC",sourcesContent:["/**\n * Swiper 3.4.2\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * \n * http://www.idangero.us/swiper/\n * \n * Copyright 2017, Vladimir Kharlampidi\n * The iDangero.us\n * http://www.idangero.us/\n * \n * Licensed under MIT\n * \n * Released on: March 10, 2017\n */\n.swiper-container{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;z-index:1}.swiper-container-no-flexbox .swiper-slide{float:left}.swiper-container-vertical>.swiper-wrapper{-webkit-box-orient:vertical;-moz-box-orient:vertical;-ms-flex-direction:column;-webkit-flex-direction:column;flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-transition-property:-webkit-transform;-moz-transition-property:-moz-transform;-o-transition-property:-o-transform;-ms-transition-property:-ms-transform;transition-property:transform;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}.swiper-container-android .swiper-slide,.swiper-wrapper{-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-o-transform:translate(0,0);-ms-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.swiper-container-multirow>.swiper-wrapper{-webkit-box-lines:multiple;-moz-box-lines:multiple;-ms-flex-wrap:wrap;-webkit-flex-wrap:wrap;flex-wrap:wrap}.swiper-container-free-mode>.swiper-wrapper{-webkit-transition-timing-function:ease-out;-moz-transition-timing-function:ease-out;-ms-transition-timing-function:ease-out;-o-transition-timing-function:ease-out;transition-timing-function:ease-out;margin:0 auto}.swiper-slide{-webkit-flex-shrink:0;-ms-flex:0 0 auto;flex-shrink:0;width:100%;height:100%;position:relative}.swiper-container-autoheight,.swiper-container-autoheight .swiper-slide{height:auto}.swiper-container-autoheight .swiper-wrapper{-webkit-box-align:start;-ms-flex-align:start;-webkit-align-items:flex-start;align-items:flex-start;-webkit-transition-property:-webkit-transform,height;-moz-transition-property:-moz-transform;-o-transition-property:-o-transform;-ms-transition-property:-ms-transform;transition-property:transform,height}.swiper-container .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-wp8-horizontal{-ms-touch-action:pan-y;touch-action:pan-y}.swiper-wp8-vertical{-ms-touch-action:pan-x;touch-action:pan-x}.swiper-button-next,.swiper-button-prev{position:absolute;top:50%;width:27px;height:44px;margin-top:-22px;z-index:10;cursor:pointer;-moz-background-size:27px 44px;-webkit-background-size:27px 44px;background-size:27px 44px;background-position:center;background-repeat:no-repeat}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-prev,.swiper-container-rtl .swiper-button-next{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23007aff'%2F%3E%3C%2Fsvg%3E\");left:10px;right:auto}.swiper-button-prev.swiper-button-black,.swiper-container-rtl .swiper-button-next.swiper-button-black{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23000000'%2F%3E%3C%2Fsvg%3E\")}.swiper-button-prev.swiper-button-white,.swiper-container-rtl .swiper-button-next.swiper-button-white{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M0%2C22L22%2C0l2.1%2C2.1L4.2%2C22l19.9%2C19.9L22%2C44L0%2C22L0%2C22L0%2C22z'%20fill%3D'%23ffffff'%2F%3E%3C%2Fsvg%3E\")}.swiper-button-next,.swiper-container-rtl .swiper-button-prev{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23007aff'%2F%3E%3C%2Fsvg%3E\");right:10px;left:auto}.swiper-button-next.swiper-button-black,.swiper-container-rtl .swiper-button-prev.swiper-button-black{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23000000'%2F%3E%3C%2Fsvg%3E\")}.swiper-button-next.swiper-button-white,.swiper-container-rtl .swiper-button-prev.swiper-button-white{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20viewBox%3D'0%200%2027%2044'%3E%3Cpath%20d%3D'M27%2C22L27%2C22L5%2C44l-2.1-2.1L22.8%2C22L2.9%2C2.1L5%2C0L27%2C22L27%2C22z'%20fill%3D'%23ffffff'%2F%3E%3C%2Fsvg%3E\")}.swiper-pagination{position:absolute;text-align:center;-webkit-transition:.3s;-moz-transition:.3s;-o-transition:.3s;transition:.3s;-webkit-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-container-horizontal>.swiper-pagination-bullets,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:10px;left:0;width:100%}.swiper-pagination-bullet{width:8px;height:8px;display:inline-block;border-radius:100%;background:#000;opacity:.2}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-moz-appearance:none;-ms-appearance:none;-webkit-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-white .swiper-pagination-bullet{background:#fff}.swiper-pagination-bullet-active{opacity:1;background:#007aff}.swiper-pagination-white .swiper-pagination-bullet-active{background:#fff}.swiper-pagination-black .swiper-pagination-bullet-active{background:#000}.swiper-container-vertical>.swiper-pagination-bullets{right:10px;top:50%;-webkit-transform:translate3d(0,-50%,0);-moz-transform:translate3d(0,-50%,0);-o-transform:translate(0,-50%);-ms-transform:translate3d(0,-50%,0);transform:translate3d(0,-50%,0)}.swiper-container-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:5px 0;display:block}.swiper-container-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 5px}.swiper-pagination-progress{background:rgba(0,0,0,.25);position:absolute}.swiper-pagination-progress .swiper-pagination-progressbar{background:#007aff;position:absolute;left:0;top:0;width:100%;height:100%;-webkit-transform:scale(0);-ms-transform:scale(0);-o-transform:scale(0);transform:scale(0);-webkit-transform-origin:left top;-moz-transform-origin:left top;-ms-transform-origin:left top;-o-transform-origin:left top;transform-origin:left top}.swiper-container-rtl .swiper-pagination-progress .swiper-pagination-progressbar{-webkit-transform-origin:right top;-moz-transform-origin:right top;-ms-transform-origin:right top;-o-transform-origin:right top;transform-origin:right top}.swiper-container-horizontal>.swiper-pagination-progress{width:100%;height:4px;left:0;top:0}.swiper-container-vertical>.swiper-pagination-progress{width:4px;height:100%;left:0;top:0}.swiper-pagination-progress.swiper-pagination-white{background:rgba(255,255,255,.5)}.swiper-pagination-progress.swiper-pagination-white .swiper-pagination-progressbar{background:#fff}.swiper-pagination-progress.swiper-pagination-black .swiper-pagination-progressbar{background:#000}.swiper-container-3d{-webkit-perspective:1200px;-moz-perspective:1200px;-o-perspective:1200px;perspective:1200px}.swiper-container-3d .swiper-cube-shadow,.swiper-container-3d .swiper-slide,.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top,.swiper-container-3d .swiper-wrapper{-webkit-transform-style:preserve-3d;-moz-transform-style:preserve-3d;-ms-transform-style:preserve-3d;transform-style:preserve-3d}.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-container-3d .swiper-slide-shadow-left{background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(right,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-moz-linear-gradient(right,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(right,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-right{background-image:-webkit-gradient(linear,right top,left top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(left,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-moz-linear-gradient(left,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(left,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-top{background-image:-webkit-gradient(linear,left top,left bottom,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(bottom,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-moz-linear-gradient(bottom,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(bottom,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-bottom{background-image:-webkit-gradient(linear,left bottom,left top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,0)));background-image:-webkit-linear-gradient(top,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-moz-linear-gradient(top,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:-o-linear-gradient(top,rgba(0,0,0,.5),rgba(0,0,0,0));background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-coverflow .swiper-wrapper,.swiper-container-flip .swiper-wrapper{-ms-perspective:1200px}.swiper-container-cube,.swiper-container-flip{overflow:visible}.swiper-container-cube .swiper-slide,.swiper-container-flip .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;-moz-backface-visibility:hidden;-ms-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-container-cube .swiper-slide .swiper-slide,.swiper-container-flip .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-active .swiper-slide-active,.swiper-container-flip .swiper-slide-active,.swiper-container-flip .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube .swiper-slide-shadow-bottom,.swiper-container-cube .swiper-slide-shadow-left,.swiper-container-cube .swiper-slide-shadow-right,.swiper-container-cube .swiper-slide-shadow-top,.swiper-container-flip .swiper-slide-shadow-bottom,.swiper-container-flip .swiper-slide-shadow-left,.swiper-container-flip .swiper-slide-shadow-right,.swiper-container-flip .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;-moz-backface-visibility:hidden;-ms-backface-visibility:hidden;backface-visibility:hidden}.swiper-container-cube .swiper-slide{visibility:hidden;-webkit-transform-origin:0 0;-moz-transform-origin:0 0;-ms-transform-origin:0 0;transform-origin:0 0;width:100%;height:100%}.swiper-container-cube.swiper-container-rtl .swiper-slide{-webkit-transform-origin:100% 0;-moz-transform-origin:100% 0;-ms-transform-origin:100% 0;transform-origin:100% 0}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-next,.swiper-container-cube .swiper-slide-next+.swiper-slide,.swiper-container-cube .swiper-slide-prev{pointer-events:auto;visibility:visible}.swiper-container-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0;width:100%;height:100%;background:#000;opacity:.6;-webkit-filter:blur(50px);filter:blur(50px);z-index:0}.swiper-container-fade.swiper-container-free-mode .swiper-slide{-webkit-transition-timing-function:ease-out;-moz-transition-timing-function:ease-out;-ms-transition-timing-function:ease-out;-o-transition-timing-function:ease-out;transition-timing-function:ease-out}.swiper-container-fade .swiper-slide{pointer-events:none;-webkit-transition-property:opacity;-moz-transition-property:opacity;-o-transition-property:opacity;transition-property:opacity}.swiper-container-fade .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-fade .swiper-slide-active,.swiper-container-fade .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-zoom-container{width:100%;height:100%;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-box-pack:center;-moz-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-box-align:center;-moz-box-align:center;-ms-flex-align:center;-webkit-align-items:center;align-items:center;text-align:center}.swiper-zoom-container>canvas,.swiper-zoom-container>img,.swiper-zoom-container>svg{max-width:100%;max-height:100%;object-fit:contain}.swiper-scrollbar{border-radius:10px;position:relative;-ms-touch-action:none;background:rgba(0,0,0,.1)}.swiper-container-horizontal>.swiper-scrollbar{position:absolute;left:1%;bottom:3px;z-index:50;height:5px;width:98%}.swiper-container-vertical>.swiper-scrollbar{position:absolute;right:3px;top:1%;z-index:50;width:5px;height:98%}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:rgba(0,0,0,.5);border-radius:10px;left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-lazy-preloader{width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;-webkit-transform-origin:50%;-moz-transform-origin:50%;transform-origin:50%;-webkit-animation:swiper-preloader-spin 1s steps(12,end) infinite;-moz-animation:swiper-preloader-spin 1s steps(12,end) infinite;animation:swiper-preloader-spin 1s steps(12,end) infinite}.swiper-lazy-preloader:after{display:block;content:\"\";width:100%;height:100%;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20viewBox%3D'0%200%20120%20120'%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20xmlns%3Axlink%3D'http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink'%3E%3Cdefs%3E%3Cline%20id%3D'l'%20x1%3D'60'%20x2%3D'60'%20y1%3D'7'%20y2%3D'27'%20stroke%3D'%236c6c6c'%20stroke-width%3D'11'%20stroke-linecap%3D'round'%2F%3E%3C%2Fdefs%3E%3Cg%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(30%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(60%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(90%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(120%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(150%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.37'%20transform%3D'rotate(180%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.46'%20transform%3D'rotate(210%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.56'%20transform%3D'rotate(240%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.66'%20transform%3D'rotate(270%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.75'%20transform%3D'rotate(300%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.85'%20transform%3D'rotate(330%2060%2C60)'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E\");background-position:50%;-webkit-background-size:100%;background-size:100%;background-repeat:no-repeat}.swiper-lazy-preloader-white:after{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg%20viewBox%3D'0%200%20120%20120'%20xmlns%3D'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg'%20xmlns%3Axlink%3D'http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink'%3E%3Cdefs%3E%3Cline%20id%3D'l'%20x1%3D'60'%20x2%3D'60'%20y1%3D'7'%20y2%3D'27'%20stroke%3D'%23fff'%20stroke-width%3D'11'%20stroke-linecap%3D'round'%2F%3E%3C%2Fdefs%3E%3Cg%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(30%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(60%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(90%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(120%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.27'%20transform%3D'rotate(150%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.37'%20transform%3D'rotate(180%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.46'%20transform%3D'rotate(210%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.56'%20transform%3D'rotate(240%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.66'%20transform%3D'rotate(270%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.75'%20transform%3D'rotate(300%2060%2C60)'%2F%3E%3Cuse%20xlink%3Ahref%3D'%23l'%20opacity%3D'.85'%20transform%3D'rotate(330%2060%2C60)'%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E\")}@-webkit-keyframes swiper-preloader-spin{100%{-webkit-transform:rotate(360deg)}}@keyframes swiper-preloader-spin{100%{transform:rotate(360deg)}}"],sourceRoot:""}]),t.a=o},function(e,t,n){"use strict";var r=n(1),i=n.n(r),a=n(2),o=n.n(a)()(i.a);o.push([e.i,"\n.swiper-container[data-v-b93892a8]{\r\n  height:690px;\r\n  width: 100%;\n}\n.swiper-container img[data-v-b93892a8]{\r\n  width: 100%;\n}\r\n\r\n","",{version:3,sources:["webpack://./src/component/banners.vue"],names:[],mappings:";AA8DA;EACA,YAAA;EACA,WAAA;AACA;AACA;EACA,WAAA;AACA",sourcesContent:['<template>\r\n <div class="swiper-container">\r\n      <div class="swiper-wrapper">\r\n        <div  v-for="v in banners" :key="v.id" class="swiper-slide modBanner" >\r\n          <img\r\n            :src="\'http://www.qhdlink-student.top/\'+v.path_banner"\r\n            class=""\r\n          />\r\n        </div>\r\n      </div>\r\n      \x3c!-- 如果需要分页器 --\x3e\r\n      \x3c!-- <div class="swiper-pagination"></div> --\x3e\r\n      \x3c!-- 如果需要导航按钮 --\x3e\r\n      <div class="swiper-button-prev"></div>\r\n      <div class="swiper-button-next"></div>\r\n    </div>\r\n</template>\r\n<script>\r\n  import Swiper from "swiper";\r\n  import axios from \'axios\'\r\n  import qs from \'qs\'\r\nimport "../../node_modules/swiper/dist/css/swiper.min.css";\r\n\r\n  export default {\r\n    data(){\r\n      return{\r\n        banners:null,\r\n      }\r\n    },\r\n  mounted(){\r\n     this.$nextTick(() => {\r\n      var mySwiper = new Swiper(".swiper-container", {\r\n        pagination: ".swiper-pagination",\r\n        nextButton: ".swiper-button-next",\r\n        prevButton: ".swiper-button-prev",\r\n        paginationClickable: true,\r\n        spaceBetween: 30,\r\n        centeredSlides: true,\r\n        // autoplay: 2500,\r\n        autoplayDisableOnInteraction: false,\r\n        effect: "slide",\r\n        loop: true,\r\n        observer: true, //修改swiper自己或子元素时，自动初始化swiper\r\n        observeParents: true, //修改swiper的父元素时，自动初始化swiper\r\n      });\r\n    });\r\n    axios({\r\n        url:"http://www.qhdlink-student.top/student/banner.php",\r\n        method:"POST",\r\n       data:{username:"lsn",userpwd:12345678,userclass:61,type:2},\r\n        transformRequest:[function(data){\r\n          return qs.stringify(data)\r\n        }],\r\n        headers:{"Content-Type":"application/x-www-form-urlencoded"}\r\n      }).then(value=>{\r\n        this.banners=value.data\r\n        console.log(this.banners);\r\n      })\r\n  }\r\n  }\r\n<\/script>\r\n<style scoped>\r\n.swiper-container{\r\n  height:690px;\r\n  width: 100%;\r\n}\r\n.swiper-container img{\r\n  width: 100%;\r\n}\r\n\r\n</style>'],sourceRoot:""}]),t.a=o},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(4);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var o=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),o.push(i(t)+"="+i(e))})))})),a=o.join("&")}if(a){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(4),i=n(42),a={"Content-Type":"application/x-www-form-urlencoded"};function o(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,l={adapter:((void 0!==t&&"[object process]"===Object.prototype.toString.call(t)||"undefined"!=typeof XMLHttpRequest)&&(s=n(25)),s),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(o(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(o(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(a)})),e.exports=l}).call(this,n(14))},function(e,t,n){"use strict";var r=n(4),i=n(43),a=n(22),o=n(45),s=n(46),l=n(26);e.exports=function(e){return new Promise((function(t,c){var p=e.data,u=e.headers;r.isFormData(p)&&delete u["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var f=e.auth.username||"",h=e.auth.password||"";u.Authorization="Basic "+btoa(f+":"+h)}if(d.open(e.method.toUpperCase(),a(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?o(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:n,config:e,request:d};i(t,c,r),d=null}},d.onabort=function(){d&&(c(l("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){c(l("Network Error",e,null,d)),d=null},d.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var m=n(47),g=(e.withCredentials||s(e.url))&&e.xsrfCookieName?m.read(e.xsrfCookieName):void 0;g&&(u[e.xsrfHeaderName]=g)}if("setRequestHeader"in d&&r.forEach(u,(function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete u[t]:d.setRequestHeader(t,e)})),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){d&&(d.abort(),c(e),d=null)})),void 0===p&&(p=null),d.send(p)}))}},function(e,t,n){"use strict";var r=n(44);e.exports=function(e,t,n,i,a){var o=new Error(e);return r(o,t,n,i,a)}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t){t=t||{};var n={};return r.forEach(["url","method","params","data"],(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(["headers","auth","proxy"],(function(i){r.isObject(t[i])?n[i]=r.deepMerge(e[i],t[i]):void 0!==t[i]?n[i]=t[i]:r.isObject(e[i])?n[i]=r.deepMerge(e[i]):void 0!==e[i]&&(n[i]=e[i])})),r.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";var r=String.prototype.replace,i=/%20/g,a=n(16),o={RFC1738:"RFC1738",RFC3986:"RFC3986"};e.exports=a.assign({default:o.RFC3986,formatters:{RFC1738:function(e){return r.call(e,i,"+")},RFC3986:function(e){return String(e)}}},o)},,function(e,t,n){(function(t){!function(){"use strict";var e,n,r,i=function(n,r){if(!(this instanceof i))return new i(n,r);var a={direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,autoplay:!1,autoplayDisableOnInteraction:!0,autoplayStopOnLast:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0},flip:{slideShadows:!0,limitRotation:!0},cube:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94},fade:{crossFade:!1},parallax:!1,zoom:!1,zoomMax:3,zoomMin:1,zoomToggle:!0,scrollbar:null,scrollbarHide:!0,scrollbarDraggable:!1,scrollbarSnapOnRelease:!1,keyboardControl:!1,mousewheelControl:!1,mousewheelReleaseOnEdges:!1,mousewheelInvert:!1,mousewheelForceToAxis:!1,mousewheelSensitivity:1,mousewheelEventsTarged:"container",hashnav:!1,hashnavWatchState:!1,history:!1,replaceState:!1,breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,onlyExternal:!1,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,pagination:null,paginationElement:"span",paginationClickable:!1,paginationHide:!1,paginationBulletRender:null,paginationProgressRender:null,paginationFractionRender:null,paginationCustomRender:null,paginationType:"bullets",resistance:!0,resistanceRatio:.85,nextButton:null,prevButton:null,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,lazyLoading:!1,lazyLoadingInPrevNext:!1,lazyLoadingInPrevNextAmount:1,lazyLoadingOnTransitionStart:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,control:void 0,controlInverse:!1,controlBy:"slide",normalizeSlideIndex:!0,allowSwipeToPrev:!0,allowSwipeToNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",buttonDisabledClass:"swiper-button-disabled",paginationCurrentClass:"swiper-pagination-current",paginationTotalClass:"swiper-pagination-total",paginationHiddenClass:"swiper-pagination-hidden",paginationProgressbarClass:"swiper-pagination-progressbar",paginationClickableClass:"swiper-pagination-clickable",paginationModifierClass:"swiper-pagination-",lazyLoadingClass:"swiper-lazy",lazyStatusLoadingClass:"swiper-lazy-loading",lazyStatusLoadedClass:"swiper-lazy-loaded",lazyPreloaderClass:"swiper-lazy-preloader",notificationClass:"swiper-notification",preloaderClass:"preloader",zoomContainerClass:"swiper-zoom-container",observer:!1,observeParents:!1,a11y:!1,prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",runCallbacksOnInit:!0},s=r&&r.virtualTranslate;r=r||{};var l={};for(var c in r)if("object"!=typeof r[c]||null===r[c]||(r[c].nodeType||r[c]===window||r[c]===document||void 0!==o&&r[c]instanceof o||void 0!==t&&r[c]instanceof t))l[c]=r[c];else for(var p in l[c]={},r[c])l[c][p]=r[c][p];for(var u in a)if(void 0===r[u])r[u]=a[u];else if("object"==typeof r[u])for(var d in a[u])void 0===r[u][d]&&(r[u][d]=a[u][d]);var f=this;if(f.params=r,f.originalParams=l,f.classNames=[],void 0!==e&&void 0!==o&&(e=o),(void 0!==e||(e=void 0===o?window.Dom7||window.Zepto||window.jQuery:o))&&(f.$=e,f.currentBreakpoint=void 0,f.getActiveBreakpoint=function(){if(!f.params.breakpoints)return!1;var e,t=!1,n=[];for(e in f.params.breakpoints)f.params.breakpoints.hasOwnProperty(e)&&n.push(e);n.sort((function(e,t){return parseInt(e,10)>parseInt(t,10)}));for(var r=0;r<n.length;r++)(e=n[r])>=window.innerWidth&&!t&&(t=e);return t||"max"},f.setBreakpoint=function(){var e=f.getActiveBreakpoint();if(e&&f.currentBreakpoint!==e){var t=e in f.params.breakpoints?f.params.breakpoints[e]:f.originalParams,n=f.params.loop&&t.slidesPerView!==f.params.slidesPerView;for(var r in t)f.params[r]=t[r];f.currentBreakpoint=e,n&&f.destroyLoop&&f.reLoop(!0)}},f.params.breakpoints&&f.setBreakpoint(),f.container=e(n),0!==f.container.length)){if(f.container.length>1){var h=[];return f.container.each((function(){h.push(new i(this,r))})),h}f.container[0].swiper=f,f.container.data("swiper",f),f.classNames.push(f.params.containerModifierClass+f.params.direction),f.params.freeMode&&f.classNames.push(f.params.containerModifierClass+"free-mode"),f.support.flexbox||(f.classNames.push(f.params.containerModifierClass+"no-flexbox"),f.params.slidesPerColumn=1),f.params.autoHeight&&f.classNames.push(f.params.containerModifierClass+"autoheight"),(f.params.parallax||f.params.watchSlidesVisibility)&&(f.params.watchSlidesProgress=!0),f.params.touchReleaseOnEdges&&(f.params.resistanceRatio=0),["cube","coverflow","flip"].indexOf(f.params.effect)>=0&&(f.support.transforms3d?(f.params.watchSlidesProgress=!0,f.classNames.push(f.params.containerModifierClass+"3d")):f.params.effect="slide"),"slide"!==f.params.effect&&f.classNames.push(f.params.containerModifierClass+f.params.effect),"cube"===f.params.effect&&(f.params.resistanceRatio=0,f.params.slidesPerView=1,f.params.slidesPerColumn=1,f.params.slidesPerGroup=1,f.params.centeredSlides=!1,f.params.spaceBetween=0,f.params.virtualTranslate=!0),"fade"!==f.params.effect&&"flip"!==f.params.effect||(f.params.slidesPerView=1,f.params.slidesPerColumn=1,f.params.slidesPerGroup=1,f.params.watchSlidesProgress=!0,f.params.spaceBetween=0,void 0===s&&(f.params.virtualTranslate=!0)),f.params.grabCursor&&f.support.touch&&(f.params.grabCursor=!1),f.wrapper=f.container.children("."+f.params.wrapperClass),f.params.pagination&&(f.paginationContainer=e(f.params.pagination),f.params.uniqueNavElements&&"string"==typeof f.params.pagination&&f.paginationContainer.length>1&&1===f.container.find(f.params.pagination).length&&(f.paginationContainer=f.container.find(f.params.pagination)),"bullets"===f.params.paginationType&&f.params.paginationClickable?f.paginationContainer.addClass(f.params.paginationModifierClass+"clickable"):f.params.paginationClickable=!1,f.paginationContainer.addClass(f.params.paginationModifierClass+f.params.paginationType)),(f.params.nextButton||f.params.prevButton)&&(f.params.nextButton&&(f.nextButton=e(f.params.nextButton),f.params.uniqueNavElements&&"string"==typeof f.params.nextButton&&f.nextButton.length>1&&1===f.container.find(f.params.nextButton).length&&(f.nextButton=f.container.find(f.params.nextButton))),f.params.prevButton&&(f.prevButton=e(f.params.prevButton),f.params.uniqueNavElements&&"string"==typeof f.params.prevButton&&f.prevButton.length>1&&1===f.container.find(f.params.prevButton).length&&(f.prevButton=f.container.find(f.params.prevButton)))),f.isHorizontal=function(){return"horizontal"===f.params.direction},f.rtl=f.isHorizontal()&&("rtl"===f.container[0].dir.toLowerCase()||"rtl"===f.container.css("direction")),f.rtl&&f.classNames.push(f.params.containerModifierClass+"rtl"),f.rtl&&(f.wrongRTL="-webkit-box"===f.wrapper.css("display")),f.params.slidesPerColumn>1&&f.classNames.push(f.params.containerModifierClass+"multirow"),f.device.android&&f.classNames.push(f.params.containerModifierClass+"android"),f.container.addClass(f.classNames.join(" ")),f.translate=0,f.progress=0,f.velocity=0,f.lockSwipeToNext=function(){f.params.allowSwipeToNext=!1,!1===f.params.allowSwipeToPrev&&f.params.grabCursor&&f.unsetGrabCursor()},f.lockSwipeToPrev=function(){f.params.allowSwipeToPrev=!1,!1===f.params.allowSwipeToNext&&f.params.grabCursor&&f.unsetGrabCursor()},f.lockSwipes=function(){f.params.allowSwipeToNext=f.params.allowSwipeToPrev=!1,f.params.grabCursor&&f.unsetGrabCursor()},f.unlockSwipeToNext=function(){f.params.allowSwipeToNext=!0,!0===f.params.allowSwipeToPrev&&f.params.grabCursor&&f.setGrabCursor()},f.unlockSwipeToPrev=function(){f.params.allowSwipeToPrev=!0,!0===f.params.allowSwipeToNext&&f.params.grabCursor&&f.setGrabCursor()},f.unlockSwipes=function(){f.params.allowSwipeToNext=f.params.allowSwipeToPrev=!0,f.params.grabCursor&&f.setGrabCursor()},f.setGrabCursor=function(e){f.container[0].style.cursor="move",f.container[0].style.cursor=e?"-webkit-grabbing":"-webkit-grab",f.container[0].style.cursor=e?"-moz-grabbin":"-moz-grab",f.container[0].style.cursor=e?"grabbing":"grab"},f.unsetGrabCursor=function(){f.container[0].style.cursor=""},f.params.grabCursor&&f.setGrabCursor(),f.imagesToLoad=[],f.imagesLoaded=0,f.loadImage=function(e,t,n,r,i,a){var o;function s(){a&&a()}e.complete&&i?s():t?((o=new window.Image).onload=s,o.onerror=s,r&&(o.sizes=r),n&&(o.srcset=n),t&&(o.src=t)):s()},f.preloadImages=function(){function e(){null!=f&&f&&(void 0!==f.imagesLoaded&&f.imagesLoaded++,f.imagesLoaded===f.imagesToLoad.length&&(f.params.updateOnImagesReady&&f.update(),f.emit("onImagesReady",f)))}f.imagesToLoad=f.container.find("img");for(var t=0;t<f.imagesToLoad.length;t++)f.loadImage(f.imagesToLoad[t],f.imagesToLoad[t].currentSrc||f.imagesToLoad[t].getAttribute("src"),f.imagesToLoad[t].srcset||f.imagesToLoad[t].getAttribute("srcset"),f.imagesToLoad[t].sizes||f.imagesToLoad[t].getAttribute("sizes"),!0,e)},f.autoplayTimeoutId=void 0,f.autoplaying=!1,f.autoplayPaused=!1,f.startAutoplay=function(){return void 0===f.autoplayTimeoutId&&(!!f.params.autoplay&&(!f.autoplaying&&(f.autoplaying=!0,f.emit("onAutoplayStart",f),void L())))},f.stopAutoplay=function(e){f.autoplayTimeoutId&&(f.autoplayTimeoutId&&clearTimeout(f.autoplayTimeoutId),f.autoplaying=!1,f.autoplayTimeoutId=void 0,f.emit("onAutoplayStop",f))},f.pauseAutoplay=function(e){f.autoplayPaused||(f.autoplayTimeoutId&&clearTimeout(f.autoplayTimeoutId),f.autoplayPaused=!0,0===e?(f.autoplayPaused=!1,L()):f.wrapper.transitionEnd((function(){f&&(f.autoplayPaused=!1,f.autoplaying?L():f.stopAutoplay())})))},f.minTranslate=function(){return-f.snapGrid[0]},f.maxTranslate=function(){return-f.snapGrid[f.snapGrid.length-1]},f.updateAutoHeight=function(){var e,t=[],n=0;if("auto"!==f.params.slidesPerView&&f.params.slidesPerView>1)for(e=0;e<Math.ceil(f.params.slidesPerView);e++){var r=f.activeIndex+e;if(r>f.slides.length)break;t.push(f.slides.eq(r)[0])}else t.push(f.slides.eq(f.activeIndex)[0]);for(e=0;e<t.length;e++)if(void 0!==t[e]){var i=t[e].offsetHeight;n=i>n?i:n}n&&f.wrapper.css("height",n+"px")},f.updateContainerSize=function(){var e,t;e=void 0!==f.params.width?f.params.width:f.container[0].clientWidth,t=void 0!==f.params.height?f.params.height:f.container[0].clientHeight,0===e&&f.isHorizontal()||0===t&&!f.isHorizontal()||(e=e-parseInt(f.container.css("padding-left"),10)-parseInt(f.container.css("padding-right"),10),t=t-parseInt(f.container.css("padding-top"),10)-parseInt(f.container.css("padding-bottom"),10),f.width=e,f.height=t,f.size=f.isHorizontal()?f.width:f.height)},f.updateSlidesSize=function(){f.slides=f.wrapper.children("."+f.params.slideClass),f.snapGrid=[],f.slidesGrid=[],f.slidesSizesGrid=[];var e,t=f.params.spaceBetween,n=-f.params.slidesOffsetBefore,r=0,i=0;if(void 0!==f.size){var a,o;"string"==typeof t&&t.indexOf("%")>=0&&(t=parseFloat(t.replace("%",""))/100*f.size),f.virtualSize=-t,f.rtl?f.slides.css({marginLeft:"",marginTop:""}):f.slides.css({marginRight:"",marginBottom:""}),f.params.slidesPerColumn>1&&(a=Math.floor(f.slides.length/f.params.slidesPerColumn)===f.slides.length/f.params.slidesPerColumn?f.slides.length:Math.ceil(f.slides.length/f.params.slidesPerColumn)*f.params.slidesPerColumn,"auto"!==f.params.slidesPerView&&"row"===f.params.slidesPerColumnFill&&(a=Math.max(a,f.params.slidesPerView*f.params.slidesPerColumn)));var s,l=f.params.slidesPerColumn,c=a/l,p=c-(f.params.slidesPerColumn*c-f.slides.length);for(e=0;e<f.slides.length;e++){o=0;var u,d,h,m=f.slides.eq(e);if(f.params.slidesPerColumn>1)"column"===f.params.slidesPerColumnFill?(h=e-(d=Math.floor(e/l))*l,(d>p||d===p&&h===l-1)&&++h>=l&&(h=0,d++),u=d+h*a/l,m.css({"-webkit-box-ordinal-group":u,"-moz-box-ordinal-group":u,"-ms-flex-order":u,"-webkit-order":u,order:u})):d=e-(h=Math.floor(e/c))*c,m.css("margin-"+(f.isHorizontal()?"top":"left"),0!==h&&f.params.spaceBetween&&f.params.spaceBetween+"px").attr("data-swiper-column",d).attr("data-swiper-row",h);"none"!==m.css("display")&&("auto"===f.params.slidesPerView?(o=f.isHorizontal()?m.outerWidth(!0):m.outerHeight(!0),f.params.roundLengths&&(o=M(o))):(o=(f.size-(f.params.slidesPerView-1)*t)/f.params.slidesPerView,f.params.roundLengths&&(o=M(o)),f.isHorizontal()?f.slides[e].style.width=o+"px":f.slides[e].style.height=o+"px"),f.slides[e].swiperSlideSize=o,f.slidesSizesGrid.push(o),f.params.centeredSlides?(n=n+o/2+r/2+t,0===r&&0!==e&&(n=n-f.size/2-t),0===e&&(n=n-f.size/2-t),Math.abs(n)<.001&&(n=0),i%f.params.slidesPerGroup==0&&f.snapGrid.push(n),f.slidesGrid.push(n)):(i%f.params.slidesPerGroup==0&&f.snapGrid.push(n),f.slidesGrid.push(n),n=n+o+t),f.virtualSize+=o+t,r=o,i++)}if(f.virtualSize=Math.max(f.virtualSize,f.size)+f.params.slidesOffsetAfter,f.rtl&&f.wrongRTL&&("slide"===f.params.effect||"coverflow"===f.params.effect)&&f.wrapper.css({width:f.virtualSize+f.params.spaceBetween+"px"}),f.support.flexbox&&!f.params.setWrapperSize||(f.isHorizontal()?f.wrapper.css({width:f.virtualSize+f.params.spaceBetween+"px"}):f.wrapper.css({height:f.virtualSize+f.params.spaceBetween+"px"})),f.params.slidesPerColumn>1&&(f.virtualSize=(o+f.params.spaceBetween)*a,f.virtualSize=Math.ceil(f.virtualSize/f.params.slidesPerColumn)-f.params.spaceBetween,f.isHorizontal()?f.wrapper.css({width:f.virtualSize+f.params.spaceBetween+"px"}):f.wrapper.css({height:f.virtualSize+f.params.spaceBetween+"px"}),f.params.centeredSlides)){for(s=[],e=0;e<f.snapGrid.length;e++)f.snapGrid[e]<f.virtualSize+f.snapGrid[0]&&s.push(f.snapGrid[e]);f.snapGrid=s}if(!f.params.centeredSlides){for(s=[],e=0;e<f.snapGrid.length;e++)f.snapGrid[e]<=f.virtualSize-f.size&&s.push(f.snapGrid[e]);f.snapGrid=s,Math.floor(f.virtualSize-f.size)-Math.floor(f.snapGrid[f.snapGrid.length-1])>1&&f.snapGrid.push(f.virtualSize-f.size)}0===f.snapGrid.length&&(f.snapGrid=[0]),0!==f.params.spaceBetween&&(f.isHorizontal()?f.rtl?f.slides.css({marginLeft:t+"px"}):f.slides.css({marginRight:t+"px"}):f.slides.css({marginBottom:t+"px"})),f.params.watchSlidesProgress&&f.updateSlidesOffset()}},f.updateSlidesOffset=function(){for(var e=0;e<f.slides.length;e++)f.slides[e].swiperSlideOffset=f.isHorizontal()?f.slides[e].offsetLeft:f.slides[e].offsetTop},f.currentSlidesPerView=function(){var e,t,n=1;if(f.params.centeredSlides){var r,i=f.slides[f.activeIndex].swiperSlideSize;for(e=f.activeIndex+1;e<f.slides.length;e++)f.slides[e]&&!r&&(n++,(i+=f.slides[e].swiperSlideSize)>f.size&&(r=!0));for(t=f.activeIndex-1;t>=0;t--)f.slides[t]&&!r&&(n++,(i+=f.slides[t].swiperSlideSize)>f.size&&(r=!0))}else for(e=f.activeIndex+1;e<f.slides.length;e++)f.slidesGrid[e]-f.slidesGrid[f.activeIndex]<f.size&&n++;return n},f.updateSlidesProgress=function(e){if(void 0===e&&(e=f.translate||0),0!==f.slides.length){void 0===f.slides[0].swiperSlideOffset&&f.updateSlidesOffset();var t=-e;f.rtl&&(t=e),f.slides.removeClass(f.params.slideVisibleClass);for(var n=0;n<f.slides.length;n++){var r=f.slides[n],i=(t+(f.params.centeredSlides?f.minTranslate():0)-r.swiperSlideOffset)/(r.swiperSlideSize+f.params.spaceBetween);if(f.params.watchSlidesVisibility){var a=-(t-r.swiperSlideOffset),o=a+f.slidesSizesGrid[n];(a>=0&&a<f.size||o>0&&o<=f.size||a<=0&&o>=f.size)&&f.slides.eq(n).addClass(f.params.slideVisibleClass)}r.progress=f.rtl?-i:i}}},f.updateProgress=function(e){void 0===e&&(e=f.translate||0);var t=f.maxTranslate()-f.minTranslate(),n=f.isBeginning,r=f.isEnd;0===t?(f.progress=0,f.isBeginning=f.isEnd=!0):(f.progress=(e-f.minTranslate())/t,f.isBeginning=f.progress<=0,f.isEnd=f.progress>=1),f.isBeginning&&!n&&f.emit("onReachBeginning",f),f.isEnd&&!r&&f.emit("onReachEnd",f),f.params.watchSlidesProgress&&f.updateSlidesProgress(e),f.emit("onProgress",f,f.progress)},f.updateActiveIndex=function(){var e,t,n,r=f.rtl?f.translate:-f.translate;for(t=0;t<f.slidesGrid.length;t++)void 0!==f.slidesGrid[t+1]?r>=f.slidesGrid[t]&&r<f.slidesGrid[t+1]-(f.slidesGrid[t+1]-f.slidesGrid[t])/2?e=t:r>=f.slidesGrid[t]&&r<f.slidesGrid[t+1]&&(e=t+1):r>=f.slidesGrid[t]&&(e=t);f.params.normalizeSlideIndex&&(e<0||void 0===e)&&(e=0),(n=Math.floor(e/f.params.slidesPerGroup))>=f.snapGrid.length&&(n=f.snapGrid.length-1),e!==f.activeIndex&&(f.snapIndex=n,f.previousIndex=f.activeIndex,f.activeIndex=e,f.updateClasses(),f.updateRealIndex())},f.updateRealIndex=function(){f.realIndex=parseInt(f.slides.eq(f.activeIndex).attr("data-swiper-slide-index")||f.activeIndex,10)},f.updateClasses=function(){f.slides.removeClass(f.params.slideActiveClass+" "+f.params.slideNextClass+" "+f.params.slidePrevClass+" "+f.params.slideDuplicateActiveClass+" "+f.params.slideDuplicateNextClass+" "+f.params.slideDuplicatePrevClass);var t=f.slides.eq(f.activeIndex);t.addClass(f.params.slideActiveClass),r.loop&&(t.hasClass(f.params.slideDuplicateClass)?f.wrapper.children("."+f.params.slideClass+":not(."+f.params.slideDuplicateClass+')[data-swiper-slide-index="'+f.realIndex+'"]').addClass(f.params.slideDuplicateActiveClass):f.wrapper.children("."+f.params.slideClass+"."+f.params.slideDuplicateClass+'[data-swiper-slide-index="'+f.realIndex+'"]').addClass(f.params.slideDuplicateActiveClass));var n=t.next("."+f.params.slideClass).addClass(f.params.slideNextClass);f.params.loop&&0===n.length&&(n=f.slides.eq(0)).addClass(f.params.slideNextClass);var i=t.prev("."+f.params.slideClass).addClass(f.params.slidePrevClass);if(f.params.loop&&0===i.length&&(i=f.slides.eq(-1)).addClass(f.params.slidePrevClass),r.loop&&(n.hasClass(f.params.slideDuplicateClass)?f.wrapper.children("."+f.params.slideClass+":not(."+f.params.slideDuplicateClass+')[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(f.params.slideDuplicateNextClass):f.wrapper.children("."+f.params.slideClass+"."+f.params.slideDuplicateClass+'[data-swiper-slide-index="'+n.attr("data-swiper-slide-index")+'"]').addClass(f.params.slideDuplicateNextClass),i.hasClass(f.params.slideDuplicateClass)?f.wrapper.children("."+f.params.slideClass+":not(."+f.params.slideDuplicateClass+')[data-swiper-slide-index="'+i.attr("data-swiper-slide-index")+'"]').addClass(f.params.slideDuplicatePrevClass):f.wrapper.children("."+f.params.slideClass+"."+f.params.slideDuplicateClass+'[data-swiper-slide-index="'+i.attr("data-swiper-slide-index")+'"]').addClass(f.params.slideDuplicatePrevClass)),f.paginationContainer&&f.paginationContainer.length>0){var a,o=f.params.loop?Math.ceil((f.slides.length-2*f.loopedSlides)/f.params.slidesPerGroup):f.snapGrid.length;if(f.params.loop?((a=Math.ceil((f.activeIndex-f.loopedSlides)/f.params.slidesPerGroup))>f.slides.length-1-2*f.loopedSlides&&(a-=f.slides.length-2*f.loopedSlides),a>o-1&&(a-=o),a<0&&"bullets"!==f.params.paginationType&&(a=o+a)):a=void 0!==f.snapIndex?f.snapIndex:f.activeIndex||0,"bullets"===f.params.paginationType&&f.bullets&&f.bullets.length>0&&(f.bullets.removeClass(f.params.bulletActiveClass),f.paginationContainer.length>1?f.bullets.each((function(){e(this).index()===a&&e(this).addClass(f.params.bulletActiveClass)})):f.bullets.eq(a).addClass(f.params.bulletActiveClass)),"fraction"===f.params.paginationType&&(f.paginationContainer.find("."+f.params.paginationCurrentClass).text(a+1),f.paginationContainer.find("."+f.params.paginationTotalClass).text(o)),"progress"===f.params.paginationType){var s=(a+1)/o,l=s,c=1;f.isHorizontal()||(c=s,l=1),f.paginationContainer.find("."+f.params.paginationProgressbarClass).transform("translate3d(0,0,0) scaleX("+l+") scaleY("+c+")").transition(f.params.speed)}"custom"===f.params.paginationType&&f.params.paginationCustomRender&&(f.paginationContainer.html(f.params.paginationCustomRender(f,a+1,o)),f.emit("onPaginationRendered",f,f.paginationContainer[0]))}f.params.loop||(f.params.prevButton&&f.prevButton&&f.prevButton.length>0&&(f.isBeginning?(f.prevButton.addClass(f.params.buttonDisabledClass),f.params.a11y&&f.a11y&&f.a11y.disable(f.prevButton)):(f.prevButton.removeClass(f.params.buttonDisabledClass),f.params.a11y&&f.a11y&&f.a11y.enable(f.prevButton))),f.params.nextButton&&f.nextButton&&f.nextButton.length>0&&(f.isEnd?(f.nextButton.addClass(f.params.buttonDisabledClass),f.params.a11y&&f.a11y&&f.a11y.disable(f.nextButton)):(f.nextButton.removeClass(f.params.buttonDisabledClass),f.params.a11y&&f.a11y&&f.a11y.enable(f.nextButton))))},f.updatePagination=function(){if(f.params.pagination&&f.paginationContainer&&f.paginationContainer.length>0){var e="";if("bullets"===f.params.paginationType){for(var t=f.params.loop?Math.ceil((f.slides.length-2*f.loopedSlides)/f.params.slidesPerGroup):f.snapGrid.length,n=0;n<t;n++)f.params.paginationBulletRender?e+=f.params.paginationBulletRender(f,n,f.params.bulletClass):e+="<"+f.params.paginationElement+' class="'+f.params.bulletClass+'"></'+f.params.paginationElement+">";f.paginationContainer.html(e),f.bullets=f.paginationContainer.find("."+f.params.bulletClass),f.params.paginationClickable&&f.params.a11y&&f.a11y&&f.a11y.initPagination()}"fraction"===f.params.paginationType&&(e=f.params.paginationFractionRender?f.params.paginationFractionRender(f,f.params.paginationCurrentClass,f.params.paginationTotalClass):'<span class="'+f.params.paginationCurrentClass+'"></span> / <span class="'+f.params.paginationTotalClass+'"></span>',f.paginationContainer.html(e)),"progress"===f.params.paginationType&&(e=f.params.paginationProgressRender?f.params.paginationProgressRender(f,f.params.paginationProgressbarClass):'<span class="'+f.params.paginationProgressbarClass+'"></span>',f.paginationContainer.html(e)),"custom"!==f.params.paginationType&&f.emit("onPaginationRendered",f,f.paginationContainer[0])}},f.update=function(e){var t;f&&(f.updateContainerSize(),f.updateSlidesSize(),f.updateProgress(),f.updatePagination(),f.updateClasses(),f.params.scrollbar&&f.scrollbar&&f.scrollbar.set(),e?(f.controller&&f.controller.spline&&(f.controller.spline=void 0),f.params.freeMode?(n(),f.params.autoHeight&&f.updateAutoHeight()):(("auto"===f.params.slidesPerView||f.params.slidesPerView>1)&&f.isEnd&&!f.params.centeredSlides?f.slideTo(f.slides.length-1,0,!1,!0):f.slideTo(f.activeIndex,0,!1,!0))||n()):f.params.autoHeight&&f.updateAutoHeight());function n(){f.rtl,f.translate;t=Math.min(Math.max(f.translate,f.maxTranslate()),f.minTranslate()),f.setWrapperTranslate(t),f.updateActiveIndex(),f.updateClasses()}},f.onResize=function(e){f.params.onBeforeResize&&f.params.onBeforeResize(f),f.params.breakpoints&&f.setBreakpoint();var t=f.params.allowSwipeToPrev,n=f.params.allowSwipeToNext;f.params.allowSwipeToPrev=f.params.allowSwipeToNext=!0,f.updateContainerSize(),f.updateSlidesSize(),("auto"===f.params.slidesPerView||f.params.freeMode||e)&&f.updatePagination(),f.params.scrollbar&&f.scrollbar&&f.scrollbar.set(),f.controller&&f.controller.spline&&(f.controller.spline=void 0);var r=!1;if(f.params.freeMode){var i=Math.min(Math.max(f.translate,f.maxTranslate()),f.minTranslate());f.setWrapperTranslate(i),f.updateActiveIndex(),f.updateClasses(),f.params.autoHeight&&f.updateAutoHeight()}else f.updateClasses(),r=("auto"===f.params.slidesPerView||f.params.slidesPerView>1)&&f.isEnd&&!f.params.centeredSlides?f.slideTo(f.slides.length-1,0,!1,!0):f.slideTo(f.activeIndex,0,!1,!0);f.params.lazyLoading&&!r&&f.lazy&&f.lazy.load(),f.params.allowSwipeToPrev=t,f.params.allowSwipeToNext=n,f.params.onAfterResize&&f.params.onAfterResize(f)},f.touchEventsDesktop={start:"mousedown",move:"mousemove",end:"mouseup"},window.navigator.pointerEnabled?f.touchEventsDesktop={start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled&&(f.touchEventsDesktop={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}),f.touchEvents={start:f.support.touch||!f.params.simulateTouch?"touchstart":f.touchEventsDesktop.start,move:f.support.touch||!f.params.simulateTouch?"touchmove":f.touchEventsDesktop.move,end:f.support.touch||!f.params.simulateTouch?"touchend":f.touchEventsDesktop.end},(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&("container"===f.params.touchEventsTarget?f.container:f.wrapper).addClass("swiper-wp8-"+f.params.direction),f.initEvents=function(e){var t=e?"off":"on",n=e?"removeEventListener":"addEventListener",i="container"===f.params.touchEventsTarget?f.container[0]:f.wrapper[0],a=f.support.touch?i:document,o=!!f.params.nested;if(f.browser.ie)i[n](f.touchEvents.start,f.onTouchStart,!1),a[n](f.touchEvents.move,f.onTouchMove,o),a[n](f.touchEvents.end,f.onTouchEnd,!1);else{if(f.support.touch){var s=!("touchstart"!==f.touchEvents.start||!f.support.passiveListener||!f.params.passiveListeners)&&{passive:!0,capture:!1};i[n](f.touchEvents.start,f.onTouchStart,s),i[n](f.touchEvents.move,f.onTouchMove,o),i[n](f.touchEvents.end,f.onTouchEnd,s)}(r.simulateTouch&&!f.device.ios&&!f.device.android||r.simulateTouch&&!f.support.touch&&f.device.ios)&&(i[n]("mousedown",f.onTouchStart,!1),document[n]("mousemove",f.onTouchMove,o),document[n]("mouseup",f.onTouchEnd,!1))}window[n]("resize",f.onResize),f.params.nextButton&&f.nextButton&&f.nextButton.length>0&&(f.nextButton[t]("click",f.onClickNext),f.params.a11y&&f.a11y&&f.nextButton[t]("keydown",f.a11y.onEnterKey)),f.params.prevButton&&f.prevButton&&f.prevButton.length>0&&(f.prevButton[t]("click",f.onClickPrev),f.params.a11y&&f.a11y&&f.prevButton[t]("keydown",f.a11y.onEnterKey)),f.params.pagination&&f.params.paginationClickable&&(f.paginationContainer[t]("click","."+f.params.bulletClass,f.onClickIndex),f.params.a11y&&f.a11y&&f.paginationContainer[t]("keydown","."+f.params.bulletClass,f.a11y.onEnterKey)),(f.params.preventClicks||f.params.preventClicksPropagation)&&i[n]("click",f.preventClicks,!0)},f.attachEvents=function(){f.initEvents()},f.detachEvents=function(){f.initEvents(!0)},f.allowClick=!0,f.preventClicks=function(e){f.allowClick||(f.params.preventClicks&&e.preventDefault(),f.params.preventClicksPropagation&&f.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))},f.onClickNext=function(e){e.preventDefault(),f.isEnd&&!f.params.loop||f.slideNext()},f.onClickPrev=function(e){e.preventDefault(),f.isBeginning&&!f.params.loop||f.slidePrev()},f.onClickIndex=function(t){t.preventDefault();var n=e(this).index()*f.params.slidesPerGroup;f.params.loop&&(n+=f.loopedSlides),f.slideTo(n)},f.updateClickedSlide=function(t){var n=O(t,"."+f.params.slideClass),r=!1;if(n)for(var i=0;i<f.slides.length;i++)f.slides[i]===n&&(r=!0);if(!n||!r)return f.clickedSlide=void 0,void(f.clickedIndex=void 0);if(f.clickedSlide=n,f.clickedIndex=e(n).index(),f.params.slideToClickedSlide&&void 0!==f.clickedIndex&&f.clickedIndex!==f.activeIndex){var a,o=f.clickedIndex,s="auto"===f.params.slidesPerView?f.currentSlidesPerView():f.params.slidesPerView;if(f.params.loop){if(f.animating)return;a=parseInt(e(f.clickedSlide).attr("data-swiper-slide-index"),10),f.params.centeredSlides?o<f.loopedSlides-s/2||o>f.slides.length-f.loopedSlides+s/2?(f.fixLoop(),o=f.wrapper.children("."+f.params.slideClass+'[data-swiper-slide-index="'+a+'"]:not(.'+f.params.slideDuplicateClass+")").eq(0).index(),setTimeout((function(){f.slideTo(o)}),0)):f.slideTo(o):o>f.slides.length-s?(f.fixLoop(),o=f.wrapper.children("."+f.params.slideClass+'[data-swiper-slide-index="'+a+'"]:not(.'+f.params.slideDuplicateClass+")").eq(0).index(),setTimeout((function(){f.slideTo(o)}),0)):f.slideTo(o)}else f.slideTo(o)}};var m,g,v,A,w,y,C,b,x,k,T,S,E="input, select, textarea, button, video",_=Date.now(),D=[];for(var B in f.animating=!1,f.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0},f.onTouchStart=function(t){if(t.originalEvent&&(t=t.originalEvent),(T="touchstart"===t.type)||!("which"in t)||3!==t.which)if(f.params.noSwiping&&O(t,"."+f.params.noSwipingClass))f.allowClick=!0;else if(!f.params.swipeHandler||O(t,f.params.swipeHandler)){var n=f.touches.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,r=f.touches.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY;if(!(f.device.ios&&f.params.iOSEdgeSwipeDetection&&n<=f.params.iOSEdgeSwipeThreshold)){if(m=!0,g=!1,v=!0,w=void 0,S=void 0,f.touches.startX=n,f.touches.startY=r,A=Date.now(),f.allowClick=!0,f.updateContainerSize(),f.swipeDirection=void 0,f.params.threshold>0&&(b=!1),"touchstart"!==t.type){var i=!0;e(t.target).is(E)&&(i=!1),document.activeElement&&e(document.activeElement).is(E)&&document.activeElement.blur(),i&&t.preventDefault()}f.emit("onTouchStart",f,t)}}},f.onTouchMove=function(t){if(t.originalEvent&&(t=t.originalEvent),!T||"mousemove"!==t.type){if(t.preventedByNestedSwiper)return f.touches.startX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,void(f.touches.startY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY);if(f.params.onlyExternal)return f.allowClick=!1,void(m&&(f.touches.startX=f.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,f.touches.startY=f.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,A=Date.now()));if(T&&f.params.touchReleaseOnEdges&&!f.params.loop)if(f.isHorizontal()){if(f.touches.currentX<f.touches.startX&&f.translate<=f.maxTranslate()||f.touches.currentX>f.touches.startX&&f.translate>=f.minTranslate())return}else if(f.touches.currentY<f.touches.startY&&f.translate<=f.maxTranslate()||f.touches.currentY>f.touches.startY&&f.translate>=f.minTranslate())return;if(T&&document.activeElement&&t.target===document.activeElement&&e(t.target).is(E))return g=!0,void(f.allowClick=!1);if(v&&f.emit("onTouchMove",f,t),!(t.targetTouches&&t.targetTouches.length>1)){var n;if(f.touches.currentX="touchmove"===t.type?t.targetTouches[0].pageX:t.pageX,f.touches.currentY="touchmove"===t.type?t.targetTouches[0].pageY:t.pageY,void 0===w)f.isHorizontal()&&f.touches.currentY===f.touches.startY||!f.isHorizontal()&&f.touches.currentX===f.touches.startX?w=!1:(n=180*Math.atan2(Math.abs(f.touches.currentY-f.touches.startY),Math.abs(f.touches.currentX-f.touches.startX))/Math.PI,w=f.isHorizontal()?n>f.params.touchAngle:90-n>f.params.touchAngle);if(w&&f.emit("onTouchMoveOpposite",f,t),void 0===S&&(f.touches.currentX===f.touches.startX&&f.touches.currentY===f.touches.startY||(S=!0)),m)if(w)m=!1;else if(S){f.allowClick=!1,f.emit("onSliderMove",f,t),t.preventDefault(),f.params.touchMoveStopPropagation&&!f.params.nested&&t.stopPropagation(),g||(r.loop&&f.fixLoop(),C=f.getWrapperTranslate(),f.setWrapperTransition(0),f.animating&&f.wrapper.trigger("webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd"),f.params.autoplay&&f.autoplaying&&(f.params.autoplayDisableOnInteraction?f.stopAutoplay():f.pauseAutoplay()),k=!1,!f.params.grabCursor||!0!==f.params.allowSwipeToNext&&!0!==f.params.allowSwipeToPrev||f.setGrabCursor(!0)),g=!0;var i=f.touches.diff=f.isHorizontal()?f.touches.currentX-f.touches.startX:f.touches.currentY-f.touches.startY;i*=f.params.touchRatio,f.rtl&&(i=-i),f.swipeDirection=i>0?"prev":"next",y=i+C;var a=!0;if(i>0&&y>f.minTranslate()?(a=!1,f.params.resistance&&(y=f.minTranslate()-1+Math.pow(-f.minTranslate()+C+i,f.params.resistanceRatio))):i<0&&y<f.maxTranslate()&&(a=!1,f.params.resistance&&(y=f.maxTranslate()+1-Math.pow(f.maxTranslate()-C-i,f.params.resistanceRatio))),a&&(t.preventedByNestedSwiper=!0),!f.params.allowSwipeToNext&&"next"===f.swipeDirection&&y<C&&(y=C),!f.params.allowSwipeToPrev&&"prev"===f.swipeDirection&&y>C&&(y=C),f.params.threshold>0){if(!(Math.abs(i)>f.params.threshold||b))return void(y=C);if(!b)return b=!0,f.touches.startX=f.touches.currentX,f.touches.startY=f.touches.currentY,y=C,void(f.touches.diff=f.isHorizontal()?f.touches.currentX-f.touches.startX:f.touches.currentY-f.touches.startY)}f.params.followFinger&&((f.params.freeMode||f.params.watchSlidesProgress)&&f.updateActiveIndex(),f.params.freeMode&&(0===D.length&&D.push({position:f.touches[f.isHorizontal()?"startX":"startY"],time:A}),D.push({position:f.touches[f.isHorizontal()?"currentX":"currentY"],time:(new window.Date).getTime()})),f.updateProgress(y),f.setWrapperTranslate(y))}}}},f.onTouchEnd=function(t){if(t.originalEvent&&(t=t.originalEvent),v&&f.emit("onTouchEnd",f,t),v=!1,m){f.params.grabCursor&&g&&m&&(!0===f.params.allowSwipeToNext||!0===f.params.allowSwipeToPrev)&&f.setGrabCursor(!1);var n,r=Date.now(),i=r-A;if(f.allowClick&&(f.updateClickedSlide(t),f.emit("onTap",f,t),i<300&&r-_>300&&(x&&clearTimeout(x),x=setTimeout((function(){f&&(f.params.paginationHide&&f.paginationContainer.length>0&&!e(t.target).hasClass(f.params.bulletClass)&&f.paginationContainer.toggleClass(f.params.paginationHiddenClass),f.emit("onClick",f,t))}),300)),i<300&&r-_<300&&(x&&clearTimeout(x),f.emit("onDoubleTap",f,t))),_=Date.now(),setTimeout((function(){f&&(f.allowClick=!0)}),0),m&&g&&f.swipeDirection&&0!==f.touches.diff&&y!==C)if(m=g=!1,n=f.params.followFinger?f.rtl?f.translate:-f.translate:-y,f.params.freeMode){if(n<-f.minTranslate())return void f.slideTo(f.activeIndex);if(n>-f.maxTranslate())return void(f.slides.length<f.snapGrid.length?f.slideTo(f.snapGrid.length-1):f.slideTo(f.slides.length-1));if(f.params.freeModeMomentum){if(D.length>1){var a=D.pop(),o=D.pop(),s=a.position-o.position,l=a.time-o.time;f.velocity=s/l,f.velocity=f.velocity/2,Math.abs(f.velocity)<f.params.freeModeMinimumVelocity&&(f.velocity=0),(l>150||(new window.Date).getTime()-a.time>300)&&(f.velocity=0)}else f.velocity=0;f.velocity=f.velocity*f.params.freeModeMomentumVelocityRatio,D.length=0;var c=1e3*f.params.freeModeMomentumRatio,p=f.velocity*c,u=f.translate+p;f.rtl&&(u=-u);var d,h=!1,w=20*Math.abs(f.velocity)*f.params.freeModeMomentumBounceRatio;if(u<f.maxTranslate())f.params.freeModeMomentumBounce?(u+f.maxTranslate()<-w&&(u=f.maxTranslate()-w),d=f.maxTranslate(),h=!0,k=!0):u=f.maxTranslate();else if(u>f.minTranslate())f.params.freeModeMomentumBounce?(u-f.minTranslate()>w&&(u=f.minTranslate()+w),d=f.minTranslate(),h=!0,k=!0):u=f.minTranslate();else if(f.params.freeModeSticky){var b,T=0;for(T=0;T<f.snapGrid.length;T+=1)if(f.snapGrid[T]>-u){b=T;break}u=Math.abs(f.snapGrid[b]-u)<Math.abs(f.snapGrid[b-1]-u)||"next"===f.swipeDirection?f.snapGrid[b]:f.snapGrid[b-1],f.rtl||(u=-u)}if(0!==f.velocity)c=f.rtl?Math.abs((-u-f.translate)/f.velocity):Math.abs((u-f.translate)/f.velocity);else if(f.params.freeModeSticky)return void f.slideReset();f.params.freeModeMomentumBounce&&h?(f.updateProgress(d),f.setWrapperTransition(c),f.setWrapperTranslate(u),f.onTransitionStart(),f.animating=!0,f.wrapper.transitionEnd((function(){f&&k&&(f.emit("onMomentumBounce",f),f.setWrapperTransition(f.params.speed),f.setWrapperTranslate(d),f.wrapper.transitionEnd((function(){f&&f.onTransitionEnd()})))}))):f.velocity?(f.updateProgress(u),f.setWrapperTransition(c),f.setWrapperTranslate(u),f.onTransitionStart(),f.animating||(f.animating=!0,f.wrapper.transitionEnd((function(){f&&f.onTransitionEnd()})))):f.updateProgress(u),f.updateActiveIndex()}(!f.params.freeModeMomentum||i>=f.params.longSwipesMs)&&(f.updateProgress(),f.updateActiveIndex())}else{var S,E=0,B=f.slidesSizesGrid[0];for(S=0;S<f.slidesGrid.length;S+=f.params.slidesPerGroup)void 0!==f.slidesGrid[S+f.params.slidesPerGroup]?n>=f.slidesGrid[S]&&n<f.slidesGrid[S+f.params.slidesPerGroup]&&(E=S,B=f.slidesGrid[S+f.params.slidesPerGroup]-f.slidesGrid[S]):n>=f.slidesGrid[S]&&(E=S,B=f.slidesGrid[f.slidesGrid.length-1]-f.slidesGrid[f.slidesGrid.length-2]);var z=(n-f.slidesGrid[E])/B;if(i>f.params.longSwipesMs){if(!f.params.longSwipes)return void f.slideTo(f.activeIndex);"next"===f.swipeDirection&&(z>=f.params.longSwipesRatio?f.slideTo(E+f.params.slidesPerGroup):f.slideTo(E)),"prev"===f.swipeDirection&&(z>1-f.params.longSwipesRatio?f.slideTo(E+f.params.slidesPerGroup):f.slideTo(E))}else{if(!f.params.shortSwipes)return void f.slideTo(f.activeIndex);"next"===f.swipeDirection&&f.slideTo(E+f.params.slidesPerGroup),"prev"===f.swipeDirection&&f.slideTo(E)}}else m=g=!1}},f._slideTo=function(e,t){return f.slideTo(e,t,!0,!0)},f.slideTo=function(e,t,n,r){void 0===n&&(n=!0),void 0===e&&(e=0),e<0&&(e=0),f.snapIndex=Math.floor(e/f.params.slidesPerGroup),f.snapIndex>=f.snapGrid.length&&(f.snapIndex=f.snapGrid.length-1);var i=-f.snapGrid[f.snapIndex];if(f.params.autoplay&&f.autoplaying&&(r||!f.params.autoplayDisableOnInteraction?f.pauseAutoplay(t):f.stopAutoplay()),f.updateProgress(i),f.params.normalizeSlideIndex)for(var a=0;a<f.slidesGrid.length;a++)-Math.floor(100*i)>=Math.floor(100*f.slidesGrid[a])&&(e=a);return!(!f.params.allowSwipeToNext&&i<f.translate&&i<f.minTranslate())&&(!(!f.params.allowSwipeToPrev&&i>f.translate&&i>f.maxTranslate()&&(f.activeIndex||0)!==e)&&(void 0===t&&(t=f.params.speed),f.previousIndex=f.activeIndex||0,f.activeIndex=e,f.updateRealIndex(),f.rtl&&-i===f.translate||!f.rtl&&i===f.translate?(f.params.autoHeight&&f.updateAutoHeight(),f.updateClasses(),"slide"!==f.params.effect&&f.setWrapperTranslate(i),!1):(f.updateClasses(),f.onTransitionStart(n),0===t||f.browser.lteIE9?(f.setWrapperTranslate(i),f.setWrapperTransition(0),f.onTransitionEnd(n)):(f.setWrapperTranslate(i),f.setWrapperTransition(t),f.animating||(f.animating=!0,f.wrapper.transitionEnd((function(){f&&f.onTransitionEnd(n)})))),!0)))},f.onTransitionStart=function(e){void 0===e&&(e=!0),f.params.autoHeight&&f.updateAutoHeight(),f.lazy&&f.lazy.onTransitionStart(),e&&(f.emit("onTransitionStart",f),f.activeIndex!==f.previousIndex&&(f.emit("onSlideChangeStart",f),f.activeIndex>f.previousIndex?f.emit("onSlideNextStart",f):f.emit("onSlidePrevStart",f)))},f.onTransitionEnd=function(e){f.animating=!1,f.setWrapperTransition(0),void 0===e&&(e=!0),f.lazy&&f.lazy.onTransitionEnd(),e&&(f.emit("onTransitionEnd",f),f.activeIndex!==f.previousIndex&&(f.emit("onSlideChangeEnd",f),f.activeIndex>f.previousIndex?f.emit("onSlideNextEnd",f):f.emit("onSlidePrevEnd",f))),f.params.history&&f.history&&f.history.setHistory(f.params.history,f.activeIndex),f.params.hashnav&&f.hashnav&&f.hashnav.setHash()},f.slideNext=function(e,t,n){if(f.params.loop){if(f.animating)return!1;f.fixLoop();f.container[0].clientLeft;return f.slideTo(f.activeIndex+f.params.slidesPerGroup,t,e,n)}return f.slideTo(f.activeIndex+f.params.slidesPerGroup,t,e,n)},f._slideNext=function(e){return f.slideNext(!0,e,!0)},f.slidePrev=function(e,t,n){if(f.params.loop){if(f.animating)return!1;f.fixLoop();f.container[0].clientLeft;return f.slideTo(f.activeIndex-1,t,e,n)}return f.slideTo(f.activeIndex-1,t,e,n)},f._slidePrev=function(e){return f.slidePrev(!0,e,!0)},f.slideReset=function(e,t,n){return f.slideTo(f.activeIndex,t,e)},f.disableTouchControl=function(){return f.params.onlyExternal=!0,!0},f.enableTouchControl=function(){return f.params.onlyExternal=!1,!0},f.setWrapperTransition=function(e,t){f.wrapper.transition(e),"slide"!==f.params.effect&&f.effects[f.params.effect]&&f.effects[f.params.effect].setTransition(e),f.params.parallax&&f.parallax&&f.parallax.setTransition(e),f.params.scrollbar&&f.scrollbar&&f.scrollbar.setTransition(e),f.params.control&&f.controller&&f.controller.setTransition(e,t),f.emit("onSetTransition",f,e)},f.setWrapperTranslate=function(e,t,n){var r=0,i=0;f.isHorizontal()?r=f.rtl?-e:e:i=e,f.params.roundLengths&&(r=M(r),i=M(i)),f.params.virtualTranslate||(f.support.transforms3d?f.wrapper.transform("translate3d("+r+"px, "+i+"px, 0px)"):f.wrapper.transform("translate("+r+"px, "+i+"px)")),f.translate=f.isHorizontal()?r:i;var a=f.maxTranslate()-f.minTranslate();(0===a?0:(e-f.minTranslate())/a)!==f.progress&&f.updateProgress(e),t&&f.updateActiveIndex(),"slide"!==f.params.effect&&f.effects[f.params.effect]&&f.effects[f.params.effect].setTranslate(f.translate),f.params.parallax&&f.parallax&&f.parallax.setTranslate(f.translate),f.params.scrollbar&&f.scrollbar&&f.scrollbar.setTranslate(f.translate),f.params.control&&f.controller&&f.controller.setTranslate(f.translate,n),f.emit("onSetTranslate",f,f.translate)},f.getTranslate=function(e,t){var n,r,i,a;return void 0===t&&(t="x"),f.params.virtualTranslate?f.rtl?-f.translate:f.translate:(i=window.getComputedStyle(e,null),window.WebKitCSSMatrix?((r=i.transform||i.webkitTransform).split(",").length>6&&(r=r.split(", ").map((function(e){return e.replace(",",".")})).join(", ")),a=new window.WebKitCSSMatrix("none"===r?"":r)):n=(a=i.MozTransform||i.OTransform||i.MsTransform||i.msTransform||i.transform||i.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(r=window.WebKitCSSMatrix?a.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(r=window.WebKitCSSMatrix?a.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),f.rtl&&r&&(r=-r),r||0)},f.getWrapperTranslate=function(e){return void 0===e&&(e=f.isHorizontal()?"x":"y"),f.getTranslate(f.wrapper[0],e)},f.observers=[],f.initObservers=function(){if(f.params.observeParents)for(var e=f.container.parents(),t=0;t<e.length;t++)P(e[t]);P(f.container[0],{childList:!1}),P(f.wrapper[0],{attributes:!1})},f.disconnectObservers=function(){for(var e=0;e<f.observers.length;e++)f.observers[e].disconnect();f.observers=[]},f.createLoop=function(){f.wrapper.children("."+f.params.slideClass+"."+f.params.slideDuplicateClass).remove();var t=f.wrapper.children("."+f.params.slideClass);"auto"!==f.params.slidesPerView||f.params.loopedSlides||(f.params.loopedSlides=t.length),f.loopedSlides=parseInt(f.params.loopedSlides||f.params.slidesPerView,10),f.loopedSlides=f.loopedSlides+f.params.loopAdditionalSlides,f.loopedSlides>t.length&&(f.loopedSlides=t.length);var n,r=[],i=[];for(t.each((function(n,a){var o=e(this);n<f.loopedSlides&&i.push(a),n<t.length&&n>=t.length-f.loopedSlides&&r.push(a),o.attr("data-swiper-slide-index",n)})),n=0;n<i.length;n++)f.wrapper.append(e(i[n].cloneNode(!0)).addClass(f.params.slideDuplicateClass));for(n=r.length-1;n>=0;n--)f.wrapper.prepend(e(r[n].cloneNode(!0)).addClass(f.params.slideDuplicateClass))},f.destroyLoop=function(){f.wrapper.children("."+f.params.slideClass+"."+f.params.slideDuplicateClass).remove(),f.slides.removeAttr("data-swiper-slide-index")},f.reLoop=function(e){var t=f.activeIndex-f.loopedSlides;f.destroyLoop(),f.createLoop(),f.updateSlidesSize(),e&&f.slideTo(t+f.loopedSlides,0,!1)},f.fixLoop=function(){var e;f.activeIndex<f.loopedSlides?(e=f.slides.length-3*f.loopedSlides+f.activeIndex,e+=f.loopedSlides,f.slideTo(e,0,!1,!0)):("auto"===f.params.slidesPerView&&f.activeIndex>=2*f.loopedSlides||f.activeIndex>f.slides.length-2*f.params.slidesPerView)&&(e=-f.slides.length+f.activeIndex+f.loopedSlides,e+=f.loopedSlides,f.slideTo(e,0,!1,!0))},f.appendSlide=function(e){if(f.params.loop&&f.destroyLoop(),"object"==typeof e&&e.length)for(var t=0;t<e.length;t++)e[t]&&f.wrapper.append(e[t]);else f.wrapper.append(e);f.params.loop&&f.createLoop(),f.params.observer&&f.support.observer||f.update(!0)},f.prependSlide=function(e){f.params.loop&&f.destroyLoop();var t=f.activeIndex+1;if("object"==typeof e&&e.length){for(var n=0;n<e.length;n++)e[n]&&f.wrapper.prepend(e[n]);t=f.activeIndex+e.length}else f.wrapper.prepend(e);f.params.loop&&f.createLoop(),f.params.observer&&f.support.observer||f.update(!0),f.slideTo(t,0,!1)},f.removeSlide=function(e){f.params.loop&&(f.destroyLoop(),f.slides=f.wrapper.children("."+f.params.slideClass));var t,n=f.activeIndex;if("object"==typeof e&&e.length){for(var r=0;r<e.length;r++)t=e[r],f.slides[t]&&f.slides.eq(t).remove(),t<n&&n--;n=Math.max(n,0)}else t=e,f.slides[t]&&f.slides.eq(t).remove(),t<n&&n--,n=Math.max(n,0);f.params.loop&&f.createLoop(),f.params.observer&&f.support.observer||f.update(!0),f.params.loop?f.slideTo(n+f.loopedSlides,0,!1):f.slideTo(n,0,!1)},f.removeAllSlides=function(){for(var e=[],t=0;t<f.slides.length;t++)e.push(t);f.removeSlide(e)},f.effects={fade:{setTranslate:function(){for(var e=0;e<f.slides.length;e++){var t=f.slides.eq(e),n=-t[0].swiperSlideOffset;f.params.virtualTranslate||(n-=f.translate);var r=0;f.isHorizontal()||(r=n,n=0);var i=f.params.fade.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:i}).transform("translate3d("+n+"px, "+r+"px, 0px)")}},setTransition:function(e){if(f.slides.transition(e),f.params.virtualTranslate&&0!==e){var t=!1;f.slides.transitionEnd((function(){if(!t&&f){t=!0,f.animating=!1;for(var e=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],n=0;n<e.length;n++)f.wrapper.trigger(e[n])}}))}}},flip:{setTranslate:function(){for(var t=0;t<f.slides.length;t++){var n=f.slides.eq(t),r=n[0].progress;f.params.flip.limitRotation&&(r=Math.max(Math.min(n[0].progress,1),-1));var i=-180*r,a=0,o=-n[0].swiperSlideOffset,s=0;if(f.isHorizontal()?f.rtl&&(i=-i):(s=o,o=0,a=-i,i=0),n[0].style.zIndex=-Math.abs(Math.round(r))+f.slides.length,f.params.flip.slideShadows){var l=f.isHorizontal()?n.find(".swiper-slide-shadow-left"):n.find(".swiper-slide-shadow-top"),c=f.isHorizontal()?n.find(".swiper-slide-shadow-right"):n.find(".swiper-slide-shadow-bottom");0===l.length&&(l=e('<div class="swiper-slide-shadow-'+(f.isHorizontal()?"left":"top")+'"></div>'),n.append(l)),0===c.length&&(c=e('<div class="swiper-slide-shadow-'+(f.isHorizontal()?"right":"bottom")+'"></div>'),n.append(c)),l.length&&(l[0].style.opacity=Math.max(-r,0)),c.length&&(c[0].style.opacity=Math.max(r,0))}n.transform("translate3d("+o+"px, "+s+"px, 0px) rotateX("+a+"deg) rotateY("+i+"deg)")}},setTransition:function(t){if(f.slides.transition(t).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(t),f.params.virtualTranslate&&0!==t){var n=!1;f.slides.eq(f.activeIndex).transitionEnd((function(){if(!n&&f&&e(this).hasClass(f.params.slideActiveClass)){n=!0,f.animating=!1;for(var t=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],r=0;r<t.length;r++)f.wrapper.trigger(t[r])}}))}}},cube:{setTranslate:function(){var t,n=0;f.params.cube.shadow&&(f.isHorizontal()?(0===(t=f.wrapper.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),f.wrapper.append(t)),t.css({height:f.width+"px"})):0===(t=f.container.find(".swiper-cube-shadow")).length&&(t=e('<div class="swiper-cube-shadow"></div>'),f.container.append(t)));for(var r=0;r<f.slides.length;r++){var i=f.slides.eq(r),a=90*r,o=Math.floor(a/360);f.rtl&&(a=-a,o=Math.floor(-a/360));var s=Math.max(Math.min(i[0].progress,1),-1),l=0,c=0,p=0;r%4==0?(l=4*-o*f.size,p=0):(r-1)%4==0?(l=0,p=4*-o*f.size):(r-2)%4==0?(l=f.size+4*o*f.size,p=f.size):(r-3)%4==0&&(l=-f.size,p=3*f.size+4*f.size*o),f.rtl&&(l=-l),f.isHorizontal()||(c=l,l=0);var u="rotateX("+(f.isHorizontal()?0:-a)+"deg) rotateY("+(f.isHorizontal()?a:0)+"deg) translate3d("+l+"px, "+c+"px, "+p+"px)";if(s<=1&&s>-1&&(n=90*r+90*s,f.rtl&&(n=90*-r-90*s)),i.transform(u),f.params.cube.slideShadows){var d=f.isHorizontal()?i.find(".swiper-slide-shadow-left"):i.find(".swiper-slide-shadow-top"),h=f.isHorizontal()?i.find(".swiper-slide-shadow-right"):i.find(".swiper-slide-shadow-bottom");0===d.length&&(d=e('<div class="swiper-slide-shadow-'+(f.isHorizontal()?"left":"top")+'"></div>'),i.append(d)),0===h.length&&(h=e('<div class="swiper-slide-shadow-'+(f.isHorizontal()?"right":"bottom")+'"></div>'),i.append(h)),d.length&&(d[0].style.opacity=Math.max(-s,0)),h.length&&(h[0].style.opacity=Math.max(s,0))}}if(f.wrapper.css({"-webkit-transform-origin":"50% 50% -"+f.size/2+"px","-moz-transform-origin":"50% 50% -"+f.size/2+"px","-ms-transform-origin":"50% 50% -"+f.size/2+"px","transform-origin":"50% 50% -"+f.size/2+"px"}),f.params.cube.shadow)if(f.isHorizontal())t.transform("translate3d(0px, "+(f.width/2+f.params.cube.shadowOffset)+"px, "+-f.width/2+"px) rotateX(90deg) rotateZ(0deg) scale("+f.params.cube.shadowScale+")");else{var m=Math.abs(n)-90*Math.floor(Math.abs(n)/90),g=1.5-(Math.sin(2*m*Math.PI/360)/2+Math.cos(2*m*Math.PI/360)/2),v=f.params.cube.shadowScale,A=f.params.cube.shadowScale/g,w=f.params.cube.shadowOffset;t.transform("scale3d("+v+", 1, "+A+") translate3d(0px, "+(f.height/2+w)+"px, "+-f.height/2/A+"px) rotateX(-90deg)")}var y=f.isSafari||f.isUiWebView?-f.size/2:0;f.wrapper.transform("translate3d(0px,0,"+y+"px) rotateX("+(f.isHorizontal()?0:n)+"deg) rotateY("+(f.isHorizontal()?-n:0)+"deg)")},setTransition:function(e){f.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),f.params.cube.shadow&&!f.isHorizontal()&&f.container.find(".swiper-cube-shadow").transition(e)}},coverflow:{setTranslate:function(){for(var t=f.translate,n=f.isHorizontal()?-t+f.width/2:-t+f.height/2,r=f.isHorizontal()?f.params.coverflow.rotate:-f.params.coverflow.rotate,i=f.params.coverflow.depth,a=0,o=f.slides.length;a<o;a++){var s=f.slides.eq(a),l=f.slidesSizesGrid[a],c=(n-s[0].swiperSlideOffset-l/2)/l*f.params.coverflow.modifier,p=f.isHorizontal()?r*c:0,u=f.isHorizontal()?0:r*c,d=-i*Math.abs(c),h=f.isHorizontal()?0:f.params.coverflow.stretch*c,m=f.isHorizontal()?f.params.coverflow.stretch*c:0;Math.abs(m)<.001&&(m=0),Math.abs(h)<.001&&(h=0),Math.abs(d)<.001&&(d=0),Math.abs(p)<.001&&(p=0),Math.abs(u)<.001&&(u=0);var g="translate3d("+m+"px,"+h+"px,"+d+"px)  rotateX("+u+"deg) rotateY("+p+"deg)";if(s.transform(g),s[0].style.zIndex=1-Math.abs(Math.round(c)),f.params.coverflow.slideShadows){var v=f.isHorizontal()?s.find(".swiper-slide-shadow-left"):s.find(".swiper-slide-shadow-top"),A=f.isHorizontal()?s.find(".swiper-slide-shadow-right"):s.find(".swiper-slide-shadow-bottom");0===v.length&&(v=e('<div class="swiper-slide-shadow-'+(f.isHorizontal()?"left":"top")+'"></div>'),s.append(v)),0===A.length&&(A=e('<div class="swiper-slide-shadow-'+(f.isHorizontal()?"right":"bottom")+'"></div>'),s.append(A)),v.length&&(v[0].style.opacity=c>0?c:0),A.length&&(A[0].style.opacity=-c>0?-c:0)}}f.browser.ie&&(f.wrapper[0].style.perspectiveOrigin=n+"px 50%")},setTransition:function(e){f.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}}},f.lazy={initialImageLoaded:!1,loadImageInSlide:function(t,n){if(void 0!==t&&(void 0===n&&(n=!0),0!==f.slides.length)){var r=f.slides.eq(t),i=r.find("."+f.params.lazyLoadingClass+":not(."+f.params.lazyStatusLoadedClass+"):not(."+f.params.lazyStatusLoadingClass+")");!r.hasClass(f.params.lazyLoadingClass)||r.hasClass(f.params.lazyStatusLoadedClass)||r.hasClass(f.params.lazyStatusLoadingClass)||(i=i.add(r[0])),0!==i.length&&i.each((function(){var t=e(this);t.addClass(f.params.lazyStatusLoadingClass);var i=t.attr("data-background"),a=t.attr("data-src"),o=t.attr("data-srcset"),s=t.attr("data-sizes");f.loadImage(t[0],a||i,o,s,!1,(function(){if(null!=f&&f){if(i?(t.css("background-image",'url("'+i+'")'),t.removeAttr("data-background")):(o&&(t.attr("srcset",o),t.removeAttr("data-srcset")),s&&(t.attr("sizes",s),t.removeAttr("data-sizes")),a&&(t.attr("src",a),t.removeAttr("data-src"))),t.addClass(f.params.lazyStatusLoadedClass).removeClass(f.params.lazyStatusLoadingClass),r.find("."+f.params.lazyPreloaderClass+", ."+f.params.preloaderClass).remove(),f.params.loop&&n){var e=r.attr("data-swiper-slide-index");if(r.hasClass(f.params.slideDuplicateClass)){var l=f.wrapper.children('[data-swiper-slide-index="'+e+'"]:not(.'+f.params.slideDuplicateClass+")");f.lazy.loadImageInSlide(l.index(),!1)}else{var c=f.wrapper.children("."+f.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');f.lazy.loadImageInSlide(c.index(),!1)}}f.emit("onLazyImageReady",f,r[0],t[0])}})),f.emit("onLazyImageLoad",f,r[0],t[0])}))}},load:function(){var t,n=f.params.slidesPerView;if("auto"===n&&(n=0),f.lazy.initialImageLoaded||(f.lazy.initialImageLoaded=!0),f.params.watchSlidesVisibility)f.wrapper.children("."+f.params.slideVisibleClass).each((function(){f.lazy.loadImageInSlide(e(this).index())}));else if(n>1)for(t=f.activeIndex;t<f.activeIndex+n;t++)f.slides[t]&&f.lazy.loadImageInSlide(t);else f.lazy.loadImageInSlide(f.activeIndex);if(f.params.lazyLoadingInPrevNext)if(n>1||f.params.lazyLoadingInPrevNextAmount&&f.params.lazyLoadingInPrevNextAmount>1){var r=f.params.lazyLoadingInPrevNextAmount,i=n,a=Math.min(f.activeIndex+i+Math.max(r,i),f.slides.length),o=Math.max(f.activeIndex-Math.max(i,r),0);for(t=f.activeIndex+n;t<a;t++)f.slides[t]&&f.lazy.loadImageInSlide(t);for(t=o;t<f.activeIndex;t++)f.slides[t]&&f.lazy.loadImageInSlide(t)}else{var s=f.wrapper.children("."+f.params.slideNextClass);s.length>0&&f.lazy.loadImageInSlide(s.index());var l=f.wrapper.children("."+f.params.slidePrevClass);l.length>0&&f.lazy.loadImageInSlide(l.index())}},onTransitionStart:function(){f.params.lazyLoading&&(f.params.lazyLoadingOnTransitionStart||!f.params.lazyLoadingOnTransitionStart&&!f.lazy.initialImageLoaded)&&f.lazy.load()},onTransitionEnd:function(){f.params.lazyLoading&&!f.params.lazyLoadingOnTransitionStart&&f.lazy.load()}},f.scrollbar={isTouched:!1,setDragPosition:function(e){var t=f.scrollbar,n=(f.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-t.track.offset()[f.isHorizontal()?"left":"top"]-t.dragSize/2,r=-f.minTranslate()*t.moveDivider,i=-f.maxTranslate()*t.moveDivider;n<r?n=r:n>i&&(n=i),n=-n/t.moveDivider,f.updateProgress(n),f.setWrapperTranslate(n,!0)},dragStart:function(e){var t=f.scrollbar;t.isTouched=!0,e.preventDefault(),e.stopPropagation(),t.setDragPosition(e),clearTimeout(t.dragTimeout),t.track.transition(0),f.params.scrollbarHide&&t.track.css("opacity",1),f.wrapper.transition(100),t.drag.transition(100),f.emit("onScrollbarDragStart",f)},dragMove:function(e){var t=f.scrollbar;t.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),f.wrapper.transition(0),t.track.transition(0),t.drag.transition(0),f.emit("onScrollbarDragMove",f))},dragEnd:function(e){var t=f.scrollbar;t.isTouched&&(t.isTouched=!1,f.params.scrollbarHide&&(clearTimeout(t.dragTimeout),t.dragTimeout=setTimeout((function(){t.track.css("opacity",0),t.track.transition(400)}),1e3)),f.emit("onScrollbarDragEnd",f),f.params.scrollbarSnapOnRelease&&f.slideReset())},draggableEvents:!1!==f.params.simulateTouch||f.support.touch?f.touchEvents:f.touchEventsDesktop,enableDraggable:function(){var t=f.scrollbar,n=f.support.touch?t.track:document;e(t.track).on(t.draggableEvents.start,t.dragStart),e(n).on(t.draggableEvents.move,t.dragMove),e(n).on(t.draggableEvents.end,t.dragEnd)},disableDraggable:function(){var t=f.scrollbar,n=f.support.touch?t.track:document;e(t.track).off(t.draggableEvents.start,t.dragStart),e(n).off(t.draggableEvents.move,t.dragMove),e(n).off(t.draggableEvents.end,t.dragEnd)},set:function(){if(f.params.scrollbar){var t=f.scrollbar;t.track=e(f.params.scrollbar),f.params.uniqueNavElements&&"string"==typeof f.params.scrollbar&&t.track.length>1&&1===f.container.find(f.params.scrollbar).length&&(t.track=f.container.find(f.params.scrollbar)),t.drag=t.track.find(".swiper-scrollbar-drag"),0===t.drag.length&&(t.drag=e('<div class="swiper-scrollbar-drag"></div>'),t.track.append(t.drag)),t.drag[0].style.width="",t.drag[0].style.height="",t.trackSize=f.isHorizontal()?t.track[0].offsetWidth:t.track[0].offsetHeight,t.divider=f.size/f.virtualSize,t.moveDivider=t.divider*(t.trackSize/f.size),t.dragSize=t.trackSize*t.divider,f.isHorizontal()?t.drag[0].style.width=t.dragSize+"px":t.drag[0].style.height=t.dragSize+"px",t.divider>=1?t.track[0].style.display="none":t.track[0].style.display="",f.params.scrollbarHide&&(t.track[0].style.opacity=0)}},setTranslate:function(){if(f.params.scrollbar){var e,t=f.scrollbar,n=(f.translate,t.dragSize);e=(t.trackSize-t.dragSize)*f.progress,f.rtl&&f.isHorizontal()?(e=-e)>0?(n=t.dragSize-e,e=0):-e+t.dragSize>t.trackSize&&(n=t.trackSize+e):e<0?(n=t.dragSize+e,e=0):e+t.dragSize>t.trackSize&&(n=t.trackSize-e),f.isHorizontal()?(f.support.transforms3d?t.drag.transform("translate3d("+e+"px, 0, 0)"):t.drag.transform("translateX("+e+"px)"),t.drag[0].style.width=n+"px"):(f.support.transforms3d?t.drag.transform("translate3d(0px, "+e+"px, 0)"):t.drag.transform("translateY("+e+"px)"),t.drag[0].style.height=n+"px"),f.params.scrollbarHide&&(clearTimeout(t.timeout),t.track[0].style.opacity=1,t.timeout=setTimeout((function(){t.track[0].style.opacity=0,t.track.transition(400)}),1e3))}},setTransition:function(e){f.params.scrollbar&&f.scrollbar.drag.transition(e)}},f.controller={LinearSpline:function(e,t){var n,r,i,a,o,s=function(e,t){for(r=-1,n=e.length;n-r>1;)e[i=n+r>>1]<=t?r=i:n=i;return n};this.x=e,this.y=t,this.lastIndex=e.length-1;this.x.length;this.interpolate=function(e){return e?(o=s(this.x,e),a=o-1,(e-this.x[a])*(this.y[o]-this.y[a])/(this.x[o]-this.x[a])+this.y[a]):0}},getInterpolateFunction:function(e){f.controller.spline||(f.controller.spline=f.params.loop?new f.controller.LinearSpline(f.slidesGrid,e.slidesGrid):new f.controller.LinearSpline(f.snapGrid,e.snapGrid))},setTranslate:function(e,t){var n,r,a=f.params.control;function o(t){e=t.rtl&&"horizontal"===t.params.direction?-f.translate:f.translate,"slide"===f.params.controlBy&&(f.controller.getInterpolateFunction(t),r=-f.controller.spline.interpolate(-e)),r&&"container"!==f.params.controlBy||(n=(t.maxTranslate()-t.minTranslate())/(f.maxTranslate()-f.minTranslate()),r=(e-f.minTranslate())*n+t.minTranslate()),f.params.controlInverse&&(r=t.maxTranslate()-r),t.updateProgress(r),t.setWrapperTranslate(r,!1,f),t.updateActiveIndex()}if(Array.isArray(a))for(var s=0;s<a.length;s++)a[s]!==t&&a[s]instanceof i&&o(a[s]);else a instanceof i&&t!==a&&o(a)},setTransition:function(e,t){var n,r=f.params.control;function a(t){t.setWrapperTransition(e,f),0!==e&&(t.onTransitionStart(),t.wrapper.transitionEnd((function(){r&&(t.params.loop&&"slide"===f.params.controlBy&&t.fixLoop(),t.onTransitionEnd())})))}if(Array.isArray(r))for(n=0;n<r.length;n++)r[n]!==t&&r[n]instanceof i&&a(r[n]);else r instanceof i&&t!==r&&a(r)}},f.hashnav={onHashCange:function(e,t){var n=document.location.hash.replace("#","");n!==f.slides.eq(f.activeIndex).attr("data-hash")&&f.slideTo(f.wrapper.children("."+f.params.slideClass+'[data-hash="'+n+'"]').index())},attachEvents:function(t){var n=t?"off":"on";e(window)[n]("hashchange",f.hashnav.onHashCange)},setHash:function(){if(f.hashnav.initialized&&f.params.hashnav)if(f.params.replaceState&&window.history&&window.history.replaceState)window.history.replaceState(null,null,"#"+f.slides.eq(f.activeIndex).attr("data-hash")||!1);else{var e=f.slides.eq(f.activeIndex),t=e.attr("data-hash")||e.attr("data-history");document.location.hash=t||""}},init:function(){if(f.params.hashnav&&!f.params.history){f.hashnav.initialized=!0;var e=document.location.hash.replace("#","");if(e)for(var t=0,n=f.slides.length;t<n;t++){var r=f.slides.eq(t);if((r.attr("data-hash")||r.attr("data-history"))===e&&!r.hasClass(f.params.slideDuplicateClass)){var i=r.index();f.slideTo(i,0,f.params.runCallbacksOnInit,!0)}}f.params.hashnavWatchState&&f.hashnav.attachEvents()}},destroy:function(){f.params.hashnavWatchState&&f.hashnav.attachEvents(!0)}},f.history={init:function(){if(f.params.history){if(!window.history||!window.history.pushState)return f.params.history=!1,void(f.params.hashnav=!0);f.history.initialized=!0,this.paths=this.getPathValues(),(this.paths.key||this.paths.value)&&(this.scrollToSlide(0,this.paths.value,f.params.runCallbacksOnInit),f.params.replaceState||window.addEventListener("popstate",this.setHistoryPopState))}},setHistoryPopState:function(){f.history.paths=f.history.getPathValues(),f.history.scrollToSlide(f.params.speed,f.history.paths.value,!1)},getPathValues:function(){var e=window.location.pathname.slice(1).split("/"),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(f.history.initialized&&f.params.history){var n=f.slides.eq(t),r=this.slugify(n.attr("data-history"));window.location.pathname.includes(e)||(r=e+"/"+r),f.params.replaceState?window.history.replaceState(null,null,r):window.history.pushState(null,null,r)}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,n){if(t)for(var r=0,i=f.slides.length;r<i;r++){var a=f.slides.eq(r);if(this.slugify(a.attr("data-history"))===t&&!a.hasClass(f.params.slideDuplicateClass)){var o=a.index();f.slideTo(o,e,n)}}else f.slideTo(0,e,n)}},f.disableKeyboardControl=function(){f.params.keyboardControl=!1,e(document).off("keydown",I)},f.enableKeyboardControl=function(){f.params.keyboardControl=!0,e(document).on("keydown",I)},f.mousewheel={event:!1,lastScrollTime:(new window.Date).getTime()},f.params.mousewheelControl&&(f.mousewheel.event=navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e="onwheel"in document;if(!e){var t=document.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")&&(e=document.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel"),f.disableMousewheelControl=function(){if(!f.mousewheel.event)return!1;var t=f.container;return"container"!==f.params.mousewheelEventsTarged&&(t=e(f.params.mousewheelEventsTarged)),t.off(f.mousewheel.event,N),f.params.mousewheelControl=!1,!0},f.enableMousewheelControl=function(){if(!f.mousewheel.event)return!1;var t=f.container;return"container"!==f.params.mousewheelEventsTarged&&(t=e(f.params.mousewheelEventsTarged)),t.on(f.mousewheel.event,N),f.params.mousewheelControl=!0,!0},f.parallax={setTranslate:function(){f.container.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each((function(){F(this,f.progress)})),f.slides.each((function(){var t=e(this);t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each((function(){F(this,Math.min(Math.max(t[0].progress,-1),1))}))}))},setTransition:function(t){void 0===t&&(t=f.params.speed),f.container.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each((function(){var n=e(this),r=parseInt(n.attr("data-swiper-parallax-duration"),10)||t;0===t&&(r=0),n.transition(r)}))}},f.zoom={scale:1,currentScale:1,isScaling:!1,gesture:{slide:void 0,slideWidth:void 0,slideHeight:void 0,image:void 0,imageWrap:void 0,zoomMax:f.params.zoomMax},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0},getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,r=e.targetTouches[1].pageX,i=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(r-t,2)+Math.pow(i-n,2))},onGestureStart:function(t){var n=f.zoom;if(!f.support.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;n.gesture.scaleStart=n.getDistanceBetweenTouches(t)}n.gesture.slide&&n.gesture.slide.length||(n.gesture.slide=e(this),0===n.gesture.slide.length&&(n.gesture.slide=f.slides.eq(f.activeIndex)),n.gesture.image=n.gesture.slide.find("img, svg, canvas"),n.gesture.imageWrap=n.gesture.image.parent("."+f.params.zoomContainerClass),n.gesture.zoomMax=n.gesture.imageWrap.attr("data-swiper-zoom")||f.params.zoomMax,0!==n.gesture.imageWrap.length)?(n.gesture.image.transition(0),n.isScaling=!0):n.gesture.image=void 0},onGestureChange:function(e){var t=f.zoom;if(!f.support.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;t.gesture.scaleMove=t.getDistanceBetweenTouches(e)}t.gesture.image&&0!==t.gesture.image.length&&(f.support.gestures?t.scale=e.scale*t.currentScale:t.scale=t.gesture.scaleMove/t.gesture.scaleStart*t.currentScale,t.scale>t.gesture.zoomMax&&(t.scale=t.gesture.zoomMax-1+Math.pow(t.scale-t.gesture.zoomMax+1,.5)),t.scale<f.params.zoomMin&&(t.scale=f.params.zoomMin+1-Math.pow(f.params.zoomMin-t.scale+1,.5)),t.gesture.image.transform("translate3d(0,0,0) scale("+t.scale+")"))},onGestureEnd:function(e){var t=f.zoom;!f.support.gestures&&("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2)||t.gesture.image&&0!==t.gesture.image.length&&(t.scale=Math.max(Math.min(t.scale,t.gesture.zoomMax),f.params.zoomMin),t.gesture.image.transition(f.params.speed).transform("translate3d(0,0,0) scale("+t.scale+")"),t.currentScale=t.scale,t.isScaling=!1,1===t.scale&&(t.gesture.slide=void 0))},onTouchStart:function(e,t){var n=e.zoom;n.gesture.image&&0!==n.gesture.image.length&&(n.image.isTouched||("android"===e.device.os&&t.preventDefault(),n.image.isTouched=!0,n.image.touchesStart.x="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,n.image.touchesStart.y="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY))},onTouchMove:function(e){var t=f.zoom;if(t.gesture.image&&0!==t.gesture.image.length&&(f.allowClick=!1,t.image.isTouched&&t.gesture.slide)){t.image.isMoved||(t.image.width=t.gesture.image[0].offsetWidth,t.image.height=t.gesture.image[0].offsetHeight,t.image.startX=f.getTranslate(t.gesture.imageWrap[0],"x")||0,t.image.startY=f.getTranslate(t.gesture.imageWrap[0],"y")||0,t.gesture.slideWidth=t.gesture.slide[0].offsetWidth,t.gesture.slideHeight=t.gesture.slide[0].offsetHeight,t.gesture.imageWrap.transition(0),f.rtl&&(t.image.startX=-t.image.startX),f.rtl&&(t.image.startY=-t.image.startY));var n=t.image.width*t.scale,r=t.image.height*t.scale;if(!(n<t.gesture.slideWidth&&r<t.gesture.slideHeight)){if(t.image.minX=Math.min(t.gesture.slideWidth/2-n/2,0),t.image.maxX=-t.image.minX,t.image.minY=Math.min(t.gesture.slideHeight/2-r/2,0),t.image.maxY=-t.image.minY,t.image.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,t.image.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!t.image.isMoved&&!t.isScaling){if(f.isHorizontal()&&Math.floor(t.image.minX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x<t.image.touchesStart.x||Math.floor(t.image.maxX)===Math.floor(t.image.startX)&&t.image.touchesCurrent.x>t.image.touchesStart.x)return void(t.image.isTouched=!1);if(!f.isHorizontal()&&Math.floor(t.image.minY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y<t.image.touchesStart.y||Math.floor(t.image.maxY)===Math.floor(t.image.startY)&&t.image.touchesCurrent.y>t.image.touchesStart.y)return void(t.image.isTouched=!1)}e.preventDefault(),e.stopPropagation(),t.image.isMoved=!0,t.image.currentX=t.image.touchesCurrent.x-t.image.touchesStart.x+t.image.startX,t.image.currentY=t.image.touchesCurrent.y-t.image.touchesStart.y+t.image.startY,t.image.currentX<t.image.minX&&(t.image.currentX=t.image.minX+1-Math.pow(t.image.minX-t.image.currentX+1,.8)),t.image.currentX>t.image.maxX&&(t.image.currentX=t.image.maxX-1+Math.pow(t.image.currentX-t.image.maxX+1,.8)),t.image.currentY<t.image.minY&&(t.image.currentY=t.image.minY+1-Math.pow(t.image.minY-t.image.currentY+1,.8)),t.image.currentY>t.image.maxY&&(t.image.currentY=t.image.maxY-1+Math.pow(t.image.currentY-t.image.maxY+1,.8)),t.velocity.prevPositionX||(t.velocity.prevPositionX=t.image.touchesCurrent.x),t.velocity.prevPositionY||(t.velocity.prevPositionY=t.image.touchesCurrent.y),t.velocity.prevTime||(t.velocity.prevTime=Date.now()),t.velocity.x=(t.image.touchesCurrent.x-t.velocity.prevPositionX)/(Date.now()-t.velocity.prevTime)/2,t.velocity.y=(t.image.touchesCurrent.y-t.velocity.prevPositionY)/(Date.now()-t.velocity.prevTime)/2,Math.abs(t.image.touchesCurrent.x-t.velocity.prevPositionX)<2&&(t.velocity.x=0),Math.abs(t.image.touchesCurrent.y-t.velocity.prevPositionY)<2&&(t.velocity.y=0),t.velocity.prevPositionX=t.image.touchesCurrent.x,t.velocity.prevPositionY=t.image.touchesCurrent.y,t.velocity.prevTime=Date.now(),t.gesture.imageWrap.transform("translate3d("+t.image.currentX+"px, "+t.image.currentY+"px,0)")}}},onTouchEnd:function(e,t){var n=e.zoom;if(n.gesture.image&&0!==n.gesture.image.length){if(!n.image.isTouched||!n.image.isMoved)return n.image.isTouched=!1,void(n.image.isMoved=!1);n.image.isTouched=!1,n.image.isMoved=!1;var r=300,i=300,a=n.velocity.x*r,o=n.image.currentX+a,s=n.velocity.y*i,l=n.image.currentY+s;0!==n.velocity.x&&(r=Math.abs((o-n.image.currentX)/n.velocity.x)),0!==n.velocity.y&&(i=Math.abs((l-n.image.currentY)/n.velocity.y));var c=Math.max(r,i);n.image.currentX=o,n.image.currentY=l;var p=n.image.width*n.scale,u=n.image.height*n.scale;n.image.minX=Math.min(n.gesture.slideWidth/2-p/2,0),n.image.maxX=-n.image.minX,n.image.minY=Math.min(n.gesture.slideHeight/2-u/2,0),n.image.maxY=-n.image.minY,n.image.currentX=Math.max(Math.min(n.image.currentX,n.image.maxX),n.image.minX),n.image.currentY=Math.max(Math.min(n.image.currentY,n.image.maxY),n.image.minY),n.gesture.imageWrap.transition(c).transform("translate3d("+n.image.currentX+"px, "+n.image.currentY+"px,0)")}},onTransitionEnd:function(e){var t=e.zoom;t.gesture.slide&&e.previousIndex!==e.activeIndex&&(t.gesture.image.transform("translate3d(0,0,0) scale(1)"),t.gesture.imageWrap.transform("translate3d(0,0,0)"),t.gesture.slide=t.gesture.image=t.gesture.imageWrap=void 0,t.scale=t.currentScale=1)},toggleZoom:function(t,n){var r,i,a,o,s,l,c,p,u,d,f,h,m,g,v,A,w=t.zoom;(w.gesture.slide||(w.gesture.slide=t.clickedSlide?e(t.clickedSlide):t.slides.eq(t.activeIndex),w.gesture.image=w.gesture.slide.find("img, svg, canvas"),w.gesture.imageWrap=w.gesture.image.parent("."+t.params.zoomContainerClass)),w.gesture.image&&0!==w.gesture.image.length)&&(void 0===w.image.touchesStart.x&&n?(r="touchend"===n.type?n.changedTouches[0].pageX:n.pageX,i="touchend"===n.type?n.changedTouches[0].pageY:n.pageY):(r=w.image.touchesStart.x,i=w.image.touchesStart.y),w.scale&&1!==w.scale?(w.scale=w.currentScale=1,w.gesture.imageWrap.transition(300).transform("translate3d(0,0,0)"),w.gesture.image.transition(300).transform("translate3d(0,0,0) scale(1)"),w.gesture.slide=void 0):(w.scale=w.currentScale=w.gesture.imageWrap.attr("data-swiper-zoom")||t.params.zoomMax,n?(v=w.gesture.slide[0].offsetWidth,A=w.gesture.slide[0].offsetHeight,a=w.gesture.slide.offset().left+v/2-r,o=w.gesture.slide.offset().top+A/2-i,c=w.gesture.image[0].offsetWidth,p=w.gesture.image[0].offsetHeight,u=c*w.scale,d=p*w.scale,m=-(f=Math.min(v/2-u/2,0)),g=-(h=Math.min(A/2-d/2,0)),(s=a*w.scale)<f&&(s=f),s>m&&(s=m),(l=o*w.scale)<h&&(l=h),l>g&&(l=g)):(s=0,l=0),w.gesture.imageWrap.transition(300).transform("translate3d("+s+"px, "+l+"px,0)"),w.gesture.image.transition(300).transform("translate3d(0,0,0) scale("+w.scale+")")))},attachEvents:function(t){var n=t?"off":"on";if(f.params.zoom){f.slides;var r=!("touchstart"!==f.touchEvents.start||!f.support.passiveListener||!f.params.passiveListeners)&&{passive:!0,capture:!1};f.support.gestures?(f.slides[n]("gesturestart",f.zoom.onGestureStart,r),f.slides[n]("gesturechange",f.zoom.onGestureChange,r),f.slides[n]("gestureend",f.zoom.onGestureEnd,r)):"touchstart"===f.touchEvents.start&&(f.slides[n](f.touchEvents.start,f.zoom.onGestureStart,r),f.slides[n](f.touchEvents.move,f.zoom.onGestureChange,r),f.slides[n](f.touchEvents.end,f.zoom.onGestureEnd,r)),f[n]("touchStart",f.zoom.onTouchStart),f.slides.each((function(t,r){e(r).find("."+f.params.zoomContainerClass).length>0&&e(r)[n](f.touchEvents.move,f.zoom.onTouchMove)})),f[n]("touchEnd",f.zoom.onTouchEnd),f[n]("transitionEnd",f.zoom.onTransitionEnd),f.params.zoomToggle&&f.on("doubleTap",f.zoom.toggleZoom)}},init:function(){f.zoom.attachEvents()},destroy:function(){f.zoom.attachEvents(!0)}},f._plugins=[],f.plugins){var z=f.plugins[B](f,f.params[B]);z&&f._plugins.push(z)}return f.callPlugins=function(e){for(var t=0;t<f._plugins.length;t++)e in f._plugins[t]&&f._plugins[t][e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},f.emitterEventListeners={},f.emit=function(e){var t;if(f.params[e]&&f.params[e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]),f.emitterEventListeners[e])for(t=0;t<f.emitterEventListeners[e].length;t++)f.emitterEventListeners[e][t](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);f.callPlugins&&f.callPlugins(e,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},f.on=function(e,t){return e=j(e),f.emitterEventListeners[e]||(f.emitterEventListeners[e]=[]),f.emitterEventListeners[e].push(t),f},f.off=function(e,t){var n;if(e=j(e),void 0===t)return f.emitterEventListeners[e]=[],f;if(f.emitterEventListeners[e]&&0!==f.emitterEventListeners[e].length){for(n=0;n<f.emitterEventListeners[e].length;n++)f.emitterEventListeners[e][n]===t&&f.emitterEventListeners[e].splice(n,1);return f}},f.once=function(e,t){e=j(e);var n=function(){t(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]),f.off(e,n)};return f.on(e,n),f},f.a11y={makeFocusable:function(e){return e.attr("tabIndex","0"),e},addRole:function(e,t){return e.attr("role",t),e},addLabel:function(e,t){return e.attr("aria-label",t),e},disable:function(e){return e.attr("aria-disabled",!0),e},enable:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(t){13===t.keyCode&&(e(t.target).is(f.params.nextButton)?(f.onClickNext(t),f.isEnd?f.a11y.notify(f.params.lastSlideMessage):f.a11y.notify(f.params.nextSlideMessage)):e(t.target).is(f.params.prevButton)&&(f.onClickPrev(t),f.isBeginning?f.a11y.notify(f.params.firstSlideMessage):f.a11y.notify(f.params.prevSlideMessage)),e(t.target).is("."+f.params.bulletClass)&&e(t.target)[0].click())},liveRegion:e('<span class="'+f.params.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>'),notify:function(e){var t=f.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},init:function(){f.params.nextButton&&f.nextButton&&f.nextButton.length>0&&(f.a11y.makeFocusable(f.nextButton),f.a11y.addRole(f.nextButton,"button"),f.a11y.addLabel(f.nextButton,f.params.nextSlideMessage)),f.params.prevButton&&f.prevButton&&f.prevButton.length>0&&(f.a11y.makeFocusable(f.prevButton),f.a11y.addRole(f.prevButton,"button"),f.a11y.addLabel(f.prevButton,f.params.prevSlideMessage)),e(f.container).append(f.a11y.liveRegion)},initPagination:function(){f.params.pagination&&f.params.paginationClickable&&f.bullets&&f.bullets.length&&f.bullets.each((function(){var t=e(this);f.a11y.makeFocusable(t),f.a11y.addRole(t,"button"),f.a11y.addLabel(t,f.params.paginationBulletMessage.replace(/{{index}}/,t.index()+1))}))},destroy:function(){f.a11y.liveRegion&&f.a11y.liveRegion.length>0&&f.a11y.liveRegion.remove()}},f.init=function(){f.params.loop&&f.createLoop(),f.updateContainerSize(),f.updateSlidesSize(),f.updatePagination(),f.params.scrollbar&&f.scrollbar&&(f.scrollbar.set(),f.params.scrollbarDraggable&&f.scrollbar.enableDraggable()),"slide"!==f.params.effect&&f.effects[f.params.effect]&&(f.params.loop||f.updateProgress(),f.effects[f.params.effect].setTranslate()),f.params.loop?f.slideTo(f.params.initialSlide+f.loopedSlides,0,f.params.runCallbacksOnInit):(f.slideTo(f.params.initialSlide,0,f.params.runCallbacksOnInit),0===f.params.initialSlide&&(f.parallax&&f.params.parallax&&f.parallax.setTranslate(),f.lazy&&f.params.lazyLoading&&(f.lazy.load(),f.lazy.initialImageLoaded=!0))),f.attachEvents(),f.params.observer&&f.support.observer&&f.initObservers(),f.params.preloadImages&&!f.params.lazyLoading&&f.preloadImages(),f.params.zoom&&f.zoom&&f.zoom.init(),f.params.autoplay&&f.startAutoplay(),f.params.keyboardControl&&f.enableKeyboardControl&&f.enableKeyboardControl(),f.params.mousewheelControl&&f.enableMousewheelControl&&f.enableMousewheelControl(),f.params.hashnavReplaceState&&(f.params.replaceState=f.params.hashnavReplaceState),f.params.history&&f.history&&f.history.init(),f.params.hashnav&&f.hashnav&&f.hashnav.init(),f.params.a11y&&f.a11y&&f.a11y.init(),f.emit("onInit",f)},f.cleanupStyles=function(){f.container.removeClass(f.classNames.join(" ")).removeAttr("style"),f.wrapper.removeAttr("style"),f.slides&&f.slides.length&&f.slides.removeClass([f.params.slideVisibleClass,f.params.slideActiveClass,f.params.slideNextClass,f.params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-column").removeAttr("data-swiper-row"),f.paginationContainer&&f.paginationContainer.length&&f.paginationContainer.removeClass(f.params.paginationHiddenClass),f.bullets&&f.bullets.length&&f.bullets.removeClass(f.params.bulletActiveClass),f.params.prevButton&&e(f.params.prevButton).removeClass(f.params.buttonDisabledClass),f.params.nextButton&&e(f.params.nextButton).removeClass(f.params.buttonDisabledClass),f.params.scrollbar&&f.scrollbar&&(f.scrollbar.track&&f.scrollbar.track.length&&f.scrollbar.track.removeAttr("style"),f.scrollbar.drag&&f.scrollbar.drag.length&&f.scrollbar.drag.removeAttr("style"))},f.destroy=function(e,t){f.detachEvents(),f.stopAutoplay(),f.params.scrollbar&&f.scrollbar&&f.params.scrollbarDraggable&&f.scrollbar.disableDraggable(),f.params.loop&&f.destroyLoop(),t&&f.cleanupStyles(),f.disconnectObservers(),f.params.zoom&&f.zoom&&f.zoom.destroy(),f.params.keyboardControl&&f.disableKeyboardControl&&f.disableKeyboardControl(),f.params.mousewheelControl&&f.disableMousewheelControl&&f.disableMousewheelControl(),f.params.a11y&&f.a11y&&f.a11y.destroy(),f.params.history&&!f.params.replaceState&&window.removeEventListener("popstate",f.history.setHistoryPopState),f.params.hashnav&&f.hashnav&&f.hashnav.destroy(),f.emit("onDestroy"),!1!==e&&(f=null)},f.init(),f}function M(e){return Math.floor(e)}function L(){var e=f.params.autoplay,t=f.slides.eq(f.activeIndex);t.attr("data-swiper-autoplay")&&(e=t.attr("data-swiper-autoplay")||f.params.autoplay),f.autoplayTimeoutId=setTimeout((function(){f.params.loop?(f.fixLoop(),f._slideNext(),f.emit("onAutoplay",f)):f.isEnd?r.autoplayStopOnLast?f.stopAutoplay():(f._slideTo(0),f.emit("onAutoplay",f)):(f._slideNext(),f.emit("onAutoplay",f))}),e)}function O(t,n){var r=e(t.target);if(!r.is(n))if("string"==typeof n)r=r.parents(n);else if(n.nodeType){var i;return r.parents().each((function(e,t){t===n&&(i=n)})),i?n:void 0}if(0!==r.length)return r[0]}function P(e,t){t=t||{};var n=new(window.MutationObserver||window.WebkitMutationObserver)((function(e){e.forEach((function(e){f.onResize(!0),f.emit("onObserverUpdate",f,e)}))}));n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),f.observers.push(n)}function I(e){e.originalEvent&&(e=e.originalEvent);var t=e.keyCode||e.charCode;if(!f.params.allowSwipeToNext&&(f.isHorizontal()&&39===t||!f.isHorizontal()&&40===t))return!1;if(!f.params.allowSwipeToPrev&&(f.isHorizontal()&&37===t||!f.isHorizontal()&&38===t))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||document.activeElement&&document.activeElement.nodeName&&("input"===document.activeElement.nodeName.toLowerCase()||"textarea"===document.activeElement.nodeName.toLowerCase()))){if(37===t||39===t||38===t||40===t){var n=!1;if(f.container.parents("."+f.params.slideClass).length>0&&0===f.container.parents("."+f.params.slideActiveClass).length)return;var r={left:window.pageXOffset,top:window.pageYOffset},i=window.innerWidth,a=window.innerHeight,o=f.container.offset();f.rtl&&(o.left=o.left-f.container[0].scrollLeft);for(var s=[[o.left,o.top],[o.left+f.width,o.top],[o.left,o.top+f.height],[o.left+f.width,o.top+f.height]],l=0;l<s.length;l++){var c=s[l];c[0]>=r.left&&c[0]<=r.left+i&&c[1]>=r.top&&c[1]<=r.top+a&&(n=!0)}if(!n)return}f.isHorizontal()?(37!==t&&39!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),(39===t&&!f.rtl||37===t&&f.rtl)&&f.slideNext(),(37===t&&!f.rtl||39===t&&f.rtl)&&f.slidePrev()):(38!==t&&40!==t||(e.preventDefault?e.preventDefault():e.returnValue=!1),40===t&&f.slideNext(),38===t&&f.slidePrev()),f.emit("onKeyPress",f,t)}}function N(e){e.originalEvent&&(e=e.originalEvent);var t,n,r,i,a,o=0,s=f.rtl?-1:1,l=(n=0,r=0,i=0,a=0,"detail"in(t=e)&&(r=t.detail),"wheelDelta"in t&&(r=-t.wheelDelta/120),"wheelDeltaY"in t&&(r=-t.wheelDeltaY/120),"wheelDeltaX"in t&&(n=-t.wheelDeltaX/120),"axis"in t&&t.axis===t.HORIZONTAL_AXIS&&(n=r,r=0),i=10*n,a=10*r,"deltaY"in t&&(a=t.deltaY),"deltaX"in t&&(i=t.deltaX),(i||a)&&t.deltaMode&&(1===t.deltaMode?(i*=40,a*=40):(i*=800,a*=800)),i&&!n&&(n=i<1?-1:1),a&&!r&&(r=a<1?-1:1),{spinX:n,spinY:r,pixelX:i,pixelY:a});if(f.params.mousewheelForceToAxis)if(f.isHorizontal()){if(!(Math.abs(l.pixelX)>Math.abs(l.pixelY)))return;o=l.pixelX*s}else{if(!(Math.abs(l.pixelY)>Math.abs(l.pixelX)))return;o=l.pixelY}else o=Math.abs(l.pixelX)>Math.abs(l.pixelY)?-l.pixelX*s:-l.pixelY;if(0!==o){if(f.params.mousewheelInvert&&(o=-o),f.params.freeMode){var c=f.getWrapperTranslate()+o*f.params.mousewheelSensitivity,p=f.isBeginning,u=f.isEnd;if(c>=f.minTranslate()&&(c=f.minTranslate()),c<=f.maxTranslate()&&(c=f.maxTranslate()),f.setWrapperTransition(0),f.setWrapperTranslate(c),f.updateProgress(),f.updateActiveIndex(),(!p&&f.isBeginning||!u&&f.isEnd)&&f.updateClasses(),f.params.freeModeSticky?(clearTimeout(f.mousewheel.timeout),f.mousewheel.timeout=setTimeout((function(){f.slideReset()}),300)):f.params.lazyLoading&&f.lazy&&f.lazy.load(),f.emit("onScroll",f,e),f.params.autoplay&&f.params.autoplayDisableOnInteraction&&f.stopAutoplay(),0===c||c===f.maxTranslate())return}else{if((new window.Date).getTime()-f.mousewheel.lastScrollTime>60)if(o<0)if(f.isEnd&&!f.params.loop||f.animating){if(f.params.mousewheelReleaseOnEdges)return!0}else f.slideNext(),f.emit("onScroll",f,e);else if(f.isBeginning&&!f.params.loop||f.animating){if(f.params.mousewheelReleaseOnEdges)return!0}else f.slidePrev(),f.emit("onScroll",f,e);f.mousewheel.lastScrollTime=(new window.Date).getTime()}return e.preventDefault?e.preventDefault():e.returnValue=!1,!1}}function F(t,n){var r,i,a;t=e(t);var o=f.rtl?-1:1;r=t.attr("data-swiper-parallax")||"0",i=t.attr("data-swiper-parallax-x"),a=t.attr("data-swiper-parallax-y"),i||a?(i=i||"0",a=a||"0"):f.isHorizontal()?(i=r,a="0"):(a=r,i="0"),i=i.indexOf("%")>=0?parseInt(i,10)*n*o+"%":i*n*o+"px",a=a.indexOf("%")>=0?parseInt(a,10)*n+"%":a*n+"px",t.transform("translate3d("+i+", "+a+",0px)")}function j(e){return 0!==e.indexOf("on")&&(e=e[0]!==e[0].toUpperCase()?"on"+e[0].toUpperCase()+e.substring(1):"on"+e),e}};i.prototype={isSafari:(r=window.navigator.userAgent.toLowerCase(),r.indexOf("safari")>=0&&r.indexOf("chrome")<0&&r.indexOf("android")<0),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent),isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1,lteIE9:(n=document.createElement("div"),n.innerHTML="\x3c!--[if lte IE 9]><i></i><![endif]--\x3e",1===n.getElementsByTagName("i").length)},device:function(){var e=window.navigator.userAgent,t=e.match(/(Android);?[\s\/]+([\d.]+)?/),n=e.match(/(iPad).*OS\s([\d_]+)/),r=e.match(/(iPod)(.*OS\s([\d_]+))?/),i=!n&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);return{ios:n||i||r,android:t}}(),support:{touch:window.Modernizr&&!0===Modernizr.touch||!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch),transforms3d:window.Modernizr&&!0===Modernizr.csstransforms3d||function(){var e=document.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=document.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),n=0;n<t.length;n++)if(t[n]in e)return!0}(),observer:"MutationObserver"in window||"WebkitMutationObserver"in window,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in window},plugins:{}};for(var a,o=function(){var e=function(e){var t=0;for(t=0;t<e.length;t++)this[t]=e[t];return this.length=e.length,this},t=function(t,n){var r=[],i=0;if(t&&!n&&t instanceof e)return t;if(t)if("string"==typeof t){var a,o,s=t.trim();if(s.indexOf("<")>=0&&s.indexOf(">")>=0){var l="div";for(0===s.indexOf("<li")&&(l="ul"),0===s.indexOf("<tr")&&(l="tbody"),0!==s.indexOf("<td")&&0!==s.indexOf("<th")||(l="tr"),0===s.indexOf("<tbody")&&(l="table"),0===s.indexOf("<option")&&(l="select"),(o=document.createElement(l)).innerHTML=t,i=0;i<o.childNodes.length;i++)r.push(o.childNodes[i])}else for(a=n||"#"!==t[0]||t.match(/[ .<>:~]/)?(n||document).querySelectorAll(t):[document.getElementById(t.split("#")[1])],i=0;i<a.length;i++)a[i]&&r.push(a[i])}else if(t.nodeType||t===window||t===document)r.push(t);else if(t.length>0&&t[0].nodeType)for(i=0;i<t.length;i++)r.push(t[i]);return new e(r)};return e.prototype={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),n=0;n<t.length;n++)for(var r=0;r<this.length;r++)this[r].classList.add(t[n]);return this},removeClass:function(e){for(var t=e.split(" "),n=0;n<t.length;n++)for(var r=0;r<this.length;r++)this[r].classList.remove(t[n]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),n=0;n<t.length;n++)for(var r=0;r<this.length;r++)this[r].classList.toggle(t[n]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n++)if(2===arguments.length)this[n].setAttribute(e,t);else for(var r in e)this[n][r]=e[r],this[n].setAttribute(r,e[r]);return this},removeAttr:function(e){for(var t=0;t<this.length;t++)this[t].removeAttribute(e);return this},data:function(e,t){if(void 0!==t){for(var n=0;n<this.length;n++){var r=this[n];r.dom7ElementDataStorage||(r.dom7ElementDataStorage={}),r.dom7ElementDataStorage[e]=t}return this}if(this[0]){var i=this[0].getAttribute("data-"+e);return i||(this[0].dom7ElementDataStorage&&e in this[0].dom7ElementDataStorage?this[0].dom7ElementDataStorage[e]:void 0)}},transform:function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this},on:function(e,n,r,i){function a(e){var i=e.target;if(t(i).is(n))r.call(i,e);else for(var a=t(i).parents(),o=0;o<a.length;o++)t(a[o]).is(n)&&r.call(a[o],e)}var o,s,l=e.split(" ");for(o=0;o<this.length;o++)if("function"==typeof n||!1===n)for("function"==typeof n&&(r=arguments[1],i=arguments[2]||!1),s=0;s<l.length;s++)this[o].addEventListener(l[s],r,i);else for(s=0;s<l.length;s++)this[o].dom7LiveListeners||(this[o].dom7LiveListeners=[]),this[o].dom7LiveListeners.push({listener:r,liveListener:a}),this[o].addEventListener(l[s],a,i);return this},off:function(e,t,n,r){for(var i=e.split(" "),a=0;a<i.length;a++)for(var o=0;o<this.length;o++)if("function"==typeof t||!1===t)"function"==typeof t&&(n=arguments[1],r=arguments[2]||!1),this[o].removeEventListener(i[a],n,r);else if(this[o].dom7LiveListeners)for(var s=0;s<this[o].dom7LiveListeners.length;s++)this[o].dom7LiveListeners[s].listener===n&&this[o].removeEventListener(i[a],this[o].dom7LiveListeners[s].liveListener,r);return this},once:function(e,t,n,r){var i=this;function a(o){n(o),i.off(e,t,a,r)}"function"==typeof t&&(t=!1,n=arguments[1],r=arguments[2]),i.on(e,t,a,r)},trigger:function(e,t){for(var n=0;n<this.length;n++){var r;try{r=new window.CustomEvent(e,{detail:t,bubbles:!0,cancelable:!0})}catch(n){(r=document.createEvent("Event")).initEvent(e,!0,!0),r.detail=t}this[n].dispatchEvent(r)}return this},transitionEnd:function(e){var t,n=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],r=this;function i(a){if(a.target===this)for(e.call(this,a),t=0;t<n.length;t++)r.off(n[t],i)}if(e)for(t=0;t<n.length;t++)r.on(n[t],i);return this},width:function(){return this[0]===window?window.innerWidth:this.length>0?parseFloat(this.css("width")):null},outerWidth:function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null},height:function(){return this[0]===window?window.innerHeight:this.length>0?parseFloat(this.css("height")):null},outerHeight:function(e){return this.length>0?e?this[0].offsetHeight+parseFloat(this.css("margin-top"))+parseFloat(this.css("margin-bottom")):this[0].offsetHeight:null},offset:function(){if(this.length>0){var e=this[0],t=e.getBoundingClientRect(),n=document.body,r=e.clientTop||n.clientTop||0,i=e.clientLeft||n.clientLeft||0,a=window.pageYOffset||e.scrollTop,o=window.pageXOffset||e.scrollLeft;return{top:t.top+a-r,left:t.left+o-i}}return null},css:function(e,t){var n;if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n++)for(var r in e)this[n].style[r]=e[r];return this}if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n++)this[n].style[e]=t;return this}return this},each:function(e){for(var t=0;t<this.length;t++)e.call(this[t],t,this[t]);return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t++)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t++)this[t].textContent=e;return this},is:function(n){if(!this[0])return!1;var r,i;if("string"==typeof n){var a=this[0];if(a===document)return n===document;if(a===window)return n===window;if(a.matches)return a.matches(n);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(n);if(a.mozMatchesSelector)return a.mozMatchesSelector(n);if(a.msMatchesSelector)return a.msMatchesSelector(n);for(r=t(n),i=0;i<r.length;i++)if(r[i]===this[0])return!0;return!1}if(n===document)return this[0]===document;if(n===window)return this[0]===window;if(n.nodeType||n instanceof e){for(r=n.nodeType?[n]:n,i=0;i<r.length;i++)if(r[i]===this[0])return!0;return!1}return!1},index:function(){if(this[0]){for(var e=this[0],t=0;null!==(e=e.previousSibling);)1===e.nodeType&&t++;return t}},eq:function(t){if(void 0===t)return this;var n,r=this.length;return new e(t>r-1?[]:t<0?(n=r+t)<0?[]:[this[n]]:[this[t]])},append:function(t){var n,r;for(n=0;n<this.length;n++)if("string"==typeof t){var i=document.createElement("div");for(i.innerHTML=t;i.firstChild;)this[n].appendChild(i.firstChild)}else if(t instanceof e)for(r=0;r<t.length;r++)this[n].appendChild(t[r]);else this[n].appendChild(t);return this},prepend:function(t){var n,r;for(n=0;n<this.length;n++)if("string"==typeof t){var i=document.createElement("div");for(i.innerHTML=t,r=i.childNodes.length-1;r>=0;r--)this[n].insertBefore(i.childNodes[r],this[n].childNodes[0])}else if(t instanceof e)for(r=0;r<t.length;r++)this[n].insertBefore(t[r],this[n].childNodes[0]);else this[n].insertBefore(t,this[n].childNodes[0]);return this},insertBefore:function(e){for(var n=t(e),r=0;r<this.length;r++)if(1===n.length)n[0].parentNode.insertBefore(this[r],n[0]);else if(n.length>1)for(var i=0;i<n.length;i++)n[i].parentNode.insertBefore(this[r].cloneNode(!0),n[i])},insertAfter:function(e){for(var n=t(e),r=0;r<this.length;r++)if(1===n.length)n[0].parentNode.insertBefore(this[r],n[0].nextSibling);else if(n.length>1)for(var i=0;i<n.length;i++)n[i].parentNode.insertBefore(this[r].cloneNode(!0),n[i].nextSibling)},next:function(n){return this.length>0?n?this[0].nextElementSibling&&t(this[0].nextElementSibling).is(n)?new e([this[0].nextElementSibling]):new e([]):this[0].nextElementSibling?new e([this[0].nextElementSibling]):new e([]):new e([])},nextAll:function(n){var r=[],i=this[0];if(!i)return new e([]);for(;i.nextElementSibling;){var a=i.nextElementSibling;n?t(a).is(n)&&r.push(a):r.push(a),i=a}return new e(r)},prev:function(n){return this.length>0?n?this[0].previousElementSibling&&t(this[0].previousElementSibling).is(n)?new e([this[0].previousElementSibling]):new e([]):this[0].previousElementSibling?new e([this[0].previousElementSibling]):new e([]):new e([])},prevAll:function(n){var r=[],i=this[0];if(!i)return new e([]);for(;i.previousElementSibling;){var a=i.previousElementSibling;n?t(a).is(n)&&r.push(a):r.push(a),i=a}return new e(r)},parent:function(e){for(var n=[],r=0;r<this.length;r++)e?t(this[r].parentNode).is(e)&&n.push(this[r].parentNode):n.push(this[r].parentNode);return t(t.unique(n))},parents:function(e){for(var n=[],r=0;r<this.length;r++)for(var i=this[r].parentNode;i;)e?t(i).is(e)&&n.push(i):n.push(i),i=i.parentNode;return t(t.unique(n))},find:function(t){for(var n=[],r=0;r<this.length;r++)for(var i=this[r].querySelectorAll(t),a=0;a<i.length;a++)n.push(i[a]);return new e(n)},children:function(n){for(var r=[],i=0;i<this.length;i++)for(var a=this[i].childNodes,o=0;o<a.length;o++)n?1===a[o].nodeType&&t(a[o]).is(n)&&r.push(a[o]):1===a[o].nodeType&&r.push(a[o]);return new e(t.unique(r))},remove:function(){for(var e=0;e<this.length;e++)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){var e,n,r=this;for(e=0;e<arguments.length;e++){var i=t(arguments[e]);for(n=0;n<i.length;n++)r[r.length]=i[n],r.length++}return r}},t.fn=e.prototype,t.unique=function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t},t}(),s=["jQuery","Zepto","Dom7"],l=0;l<s.length;l++)window[s[l]]&&c(window[s[l]]);function c(e){e.fn.swiper=function(t){var n;return e(this).each((function(){var e=new i(this,t);n||(n=e)})),n}}(a=void 0===o?window.Dom7||window.Zepto||window.jQuery:o)&&("transitionEnd"in a.fn||(a.fn.transitionEnd=function(e){var t,n=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],r=this;function i(a){if(a.target===this)for(e.call(this,a),t=0;t<n.length;t++)r.off(n[t],i)}if(e)for(t=0;t<n.length;t++)r.on(n[t],i);return this}),"transform"in a.fn||(a.fn.transform=function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this}),"transition"in a.fn||(a.fn.transition=function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this}),"outerWidth"in a.fn||(a.fn.outerWidth=function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null})),window.Swiper=i}(),e.exports=window.Swiper}).call(this,n(35))},function(e,t,n){e.exports=n(36)},function(e,t,n){"use strict";var r=n(52),i=n(53),a=n(29);e.exports={formats:a,parse:i,stringify:r}},function(e,t,n){"use strict";var r=function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"swiper-container"},[t("div",{staticClass:"swiper-wrapper"},this._l(this.banners,(function(e){return t("div",{key:e.id,staticClass:"swiper-slide modBanner"},[t("img",{attrs:{src:"http://www.qhdlink-student.top/"+e.path_banner}})])})),0),this._v(" "),t("div",{staticClass:"swiper-button-prev"}),this._v(" "),t("div",{staticClass:"swiper-button-next"})])};r._withStripped=!0;var i=n(31),a=n.n(i),o=n(32),s=n.n(o),l=n(33),c=n.n(l),p=n(0),u=n.n(p),d=n(19),f={insert:"head",singleton:!1},h=(u()(d.a,f),d.a.locals,{data:function(){return{banners:null}},mounted:function(){var e=this;this.$nextTick((function(){new a.a(".swiper-container",{pagination:".swiper-pagination",nextButton:".swiper-button-next",prevButton:".swiper-button-prev",paginationClickable:!0,spaceBetween:30,centeredSlides:!0,autoplayDisableOnInteraction:!1,effect:"slide",loop:!0,observer:!0,observeParents:!0})})),s()({url:"http://www.qhdlink-student.top/student/banner.php",method:"POST",data:{username:"lsn",userpwd:12345678,userclass:61,type:2},transformRequest:[function(e){return c.a.stringify(e)}],headers:{"Content-Type":"application/x-www-form-urlencoded"}}).then((function(t){e.banners=t.data,console.log(e.banners)}))}}),m=n(20),g={insert:"head",singleton:!1},v=(u()(m.a,g),m.a.locals,n(3)),A=Object(v.a)(h,r,[],!1,null,"b93892a8",null);A.options.__file="src/component/banners.vue";t.a=A.exports},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var a=[],o=Object.getPrototypeOf,s=a.slice,l=a.flat?function(e){return a.flat.call(e)}:function(e){return a.concat.apply([],e)},c=a.push,p=a.indexOf,u={},d=u.toString,f=u.hasOwnProperty,h=f.toString,m=h.call(Object),g={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},A=function(e){return null!=e&&e===e.window},w=n.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function C(e,t,n){var r,i,a=(n=n||w).createElement("script");if(a.text=e,t)for(r in y)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&a.setAttribute(r,i);n.head.appendChild(a).parentNode.removeChild(a)}function b(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?u[d.call(e)]||"object":typeof e}var x=function(e,t){return new x.fn.init(e,t)};function k(e){var t=!!e&&"length"in e&&e.length,n=b(e);return!v(e)&&!A(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}x.fn=x.prototype={jquery:"3.5.1",constructor:x,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(x.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(x.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:a.sort,splice:a.splice},x.extend=x.fn.extend=function(){var e,t,n,r,i,a,o=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof o&&(c=o,o=arguments[s]||{},s++),"object"==typeof o||v(o)||(o={}),s===l&&(o=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&o!==r&&(c&&r&&(x.isPlainObject(r)||(i=Array.isArray(r)))?(n=o[t],a=i&&!Array.isArray(n)?[]:i||x.isPlainObject(n)?n:{},i=!1,o[t]=x.extend(c,a,r)):void 0!==r&&(o[t]=r));return o},x.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=o(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&h.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){C(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(k(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(k(Object(e))?x.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:p.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,a=e.length,o=!n;i<a;i++)!t(e[i],i)!==o&&r.push(e[i]);return r},map:function(e,t,n){var r,i,a=0,o=[];if(k(e))for(r=e.length;a<r;a++)null!=(i=t(e[a],a,n))&&o.push(i);else for(a in e)null!=(i=t(e[a],a,n))&&o.push(i);return l(o)},guid:1,support:g}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=a[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){u["[object "+t+"]"]=t.toLowerCase()}));var T=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,r,i,a,o,s,l,c,p,u,d,f,h,m,g,v,A,w,y="sizzle"+1*new Date,C=e.document,b=0,x=0,k=le(),T=le(),S=le(),E=le(),_=function(e,t){return e===t&&(u=!0),0},D={}.hasOwnProperty,B=[],z=B.pop,M=B.push,L=B.push,O=B.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",j="\\["+N+"*("+F+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+N+"*\\]",$=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+j+")*)|.*)\\)|)",R=new RegExp(N+"+","g"),H=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),q=new RegExp("^"+N+"*,"+N+"*"),W=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),U=new RegExp(N+"|>"),Y=new RegExp($),G=new RegExp("^"+F+"$"),X={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+j),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},V=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=function(){d()},oe=ye((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{L.apply(B=O.call(C.childNodes),C.childNodes),B[C.childNodes.length].nodeType}catch(e){L={apply:B.length?function(e,t){M.apply(e,O.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,i){var a,s,c,p,u,h,v,A=t&&t.ownerDocument,C=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==C&&9!==C&&11!==C)return r;if(!i&&(d(t),t=t||f,m)){if(11!==C&&(u=Z.exec(e)))if(a=u[1]){if(9===C){if(!(c=t.getElementById(a)))return r;if(c.id===a)return r.push(c),r}else if(A&&(c=A.getElementById(a))&&w(t,c)&&c.id===a)return r.push(c),r}else{if(u[2])return L.apply(r,t.getElementsByTagName(e)),r;if((a=u[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(r,t.getElementsByClassName(a)),r}if(n.qsa&&!E[e+" "]&&(!g||!g.test(e))&&(1!==C||"object"!==t.nodeName.toLowerCase())){if(v=e,A=t,1===C&&(U.test(e)||W.test(e))){for((A=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((p=t.getAttribute("id"))?p=p.replace(re,ie):t.setAttribute("id",p=y)),s=(h=o(e)).length;s--;)h[s]=(p?"#"+p:":scope")+" "+we(h[s]);v=h.join(",")}try{return L.apply(r,A.querySelectorAll(v)),r}catch(t){E(e,!0)}finally{p===y&&t.removeAttribute("id")}}}return l(e.replace(H,"$1"),t,r,i)}function le(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ce(e){return e[y]=!0,e}function pe(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ce((function(t){return t=+t,ce((function(n,r){for(var i,a=e([],n.length,t),o=a.length;o--;)n[i=a[o]]&&(n[i]=!(r[i]=n[i]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},a=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!V.test(t||n&&n.nodeName||"HTML")},d=se.setDocument=function(e){var t,i,o=e?e.ownerDocument||e:C;return o!=f&&9===o.nodeType&&o.documentElement?(h=(f=o).documentElement,m=!a(f),C!=f&&(i=f.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ae,!1):i.attachEvent&&i.attachEvent("onunload",ae)),n.scope=pe((function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=pe((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=pe((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(f.getElementsByClassName),n.getById=pe((function(e){return h.appendChild(e).id=y,!f.getElementsByName||!f.getElementsByName(y).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,i,a=t.getElementById(e);if(a){if((n=a.getAttributeNode("id"))&&n.value===e)return[a];for(i=t.getElementsByName(e),r=0;a=i[r++];)if((n=a.getAttributeNode("id"))&&n.value===e)return[a]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,a=t.getElementsByTagName(e);if("*"===e){for(;n=a[i++];)1===n.nodeType&&r.push(n);return r}return a},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=Q.test(f.querySelectorAll))&&(pe((function(e){var t;h.appendChild(e).innerHTML="<a id='"+y+"'></a><select id='"+y+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+N+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+N+"*(?:value|"+I+")"),e.querySelectorAll("[id~="+y+"-]").length||g.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+N+"*name"+N+"*="+N+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+y+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),pe((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+N+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=Q.test(A=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&pe((function(e){n.disconnectedMatch=A.call(e,"*"),A.call(e,"[s!='']:x"),v.push("!=",$)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(h.compareDocumentPosition),w=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},_=t?function(e,t){if(e===t)return u=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==f||e.ownerDocument==C&&w(C,e)?-1:t==f||t.ownerDocument==C&&w(C,t)?1:p?P(p,e)-P(p,t):0:4&r?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,r=0,i=e.parentNode,a=t.parentNode,o=[e],s=[t];if(!i||!a)return e==f?-1:t==f?1:i?-1:a?1:p?P(p,e)-P(p,t):0;if(i===a)return de(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;o[r]===s[r];)r++;return r?de(o[r],s[r]):o[r]==C?-1:s[r]==C?1:0},f):f},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(d(e),n.matchesSelector&&m&&!E[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=A.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){E(t,!0)}return se(t,f,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=f&&d(e),w(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=f&&d(e);var i=r.attrHandle[t.toLowerCase()],a=i&&D.call(r.attrHandle,t.toLowerCase())?i(e,t,!m):void 0;return void 0!==a?a:n.attributes||!m?e.getAttribute(t):(a=e.getAttributeNode(t))&&a.specified?a.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],i=0,a=0;if(u=!n.detectDuplicates,p=!n.sortStable&&e.slice(0),e.sort(_),u){for(;t=e[a++];)t===e[a]&&(i=r.push(a));for(;i--;)e.splice(r[i],1)}return p=null,e},i=se.getText=function(e){var t,n="",r=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ce,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Y.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|"+N+")"+e+"("+N+"|$)"))&&k(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=se.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(R," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var a="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var c,p,u,d,f,h,m=a!==o?"nextSibling":"previousSibling",g=t.parentNode,v=s&&t.nodeName.toLowerCase(),A=!l&&!s,w=!1;if(g){if(a){for(;m;){for(d=t;d=d[m];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[o?g.firstChild:g.lastChild],o&&A){for(w=(f=(c=(p=(u=(d=g)[y]||(d[y]={}))[d.uniqueID]||(u[d.uniqueID]={}))[e]||[])[0]===b&&c[1])&&c[2],d=f&&g.childNodes[f];d=++f&&d&&d[m]||(w=f=0)||h.pop();)if(1===d.nodeType&&++w&&d===t){p[e]=[b,f,w];break}}else if(A&&(w=f=(c=(p=(u=(d=t)[y]||(d[y]={}))[d.uniqueID]||(u[d.uniqueID]={}))[e]||[])[0]===b&&c[1]),!1===w)for(;(d=++f&&d&&d[m]||(w=f=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++w||(A&&((p=(u=d[y]||(d[y]={}))[d.uniqueID]||(u[d.uniqueID]={}))[e]=[b,w]),d!==t)););return(w-=i)===r||w%r==0&&w/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[y]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var r,a=i(e,t),o=a.length;o--;)e[r=P(e,a[o])]=!(n[r]=a[o])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ce((function(e){var t=[],n=[],r=s(e.replace(H,"$1"));return r[y]?ce((function(e,t,n,i){for(var a,o=r(e,null,i,[]),s=e.length;s--;)(a=o[s])&&(e[s]=!(t[s]=a))})):function(e,i,a){return t[0]=e,r(t,null,a,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ce((function(e){return G.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:ge((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function Ae(){}function we(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(e,t,n){var r=t.dir,i=t.next,a=i||r,o=n&&"parentNode"===a,s=x++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||o)return e(t,n,i);return!1}:function(t,n,l){var c,p,u,d=[b,s];if(l){for(;t=t[r];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||o)if(p=(u=t[y]||(t[y]={}))[t.uniqueID]||(u[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=p[a])&&c[0]===b&&c[1]===s)return d[2]=c[2];if(p[a]=d,d[2]=e(t,n,l))return!0}return!1}}function Ce(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function be(e,t,n,r,i){for(var a,o=[],s=0,l=e.length,c=null!=t;s<l;s++)(a=e[s])&&(n&&!n(a,r,i)||(o.push(a),c&&t.push(s)));return o}function xe(e,t,n,r,i,a){return r&&!r[y]&&(r=xe(r)),i&&!i[y]&&(i=xe(i,a)),ce((function(a,o,s,l){var c,p,u,d=[],f=[],h=o.length,m=a||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),g=!e||!a&&t?m:be(m,d,e,s,l),v=n?i||(a?e:h||r)?[]:o:g;if(n&&n(g,v,s,l),r)for(c=be(v,f),r(c,[],s,l),p=c.length;p--;)(u=c[p])&&(v[f[p]]=!(g[f[p]]=u));if(a){if(i||e){if(i){for(c=[],p=v.length;p--;)(u=v[p])&&c.push(g[p]=u);i(null,v=[],c,l)}for(p=v.length;p--;)(u=v[p])&&(c=i?P(a,u):d[p])>-1&&(a[c]=!(o[c]=u))}}else v=be(v===o?v.splice(h,v.length):v),i?i(null,o,v,l):L.apply(o,v)}))}function ke(e){for(var t,n,i,a=e.length,o=r.relative[e[0].type],s=o||r.relative[" "],l=o?1:0,p=ye((function(e){return e===t}),s,!0),u=ye((function(e){return P(t,e)>-1}),s,!0),d=[function(e,n,r){var i=!o&&(r||n!==c)||((t=n).nodeType?p(e,n,r):u(e,n,r));return t=null,i}];l<a;l++)if(n=r.relative[e[l].type])d=[ye(Ce(d),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[y]){for(i=++l;i<a&&!r.relative[e[i].type];i++);return xe(l>1&&Ce(d),l>1&&we(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(H,"$1"),n,l<i&&ke(e.slice(l,i)),i<a&&ke(e=e.slice(i)),i<a&&we(e))}d.push(n)}return Ce(d)}return Ae.prototype=r.filters=r.pseudos,r.setFilters=new Ae,o=se.tokenize=function(e,t){var n,i,a,o,s,l,c,p=T[e+" "];if(p)return t?0:p.slice(0);for(s=e,l=[],c=r.preFilter;s;){for(o in n&&!(i=q.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(a=[])),n=!1,(i=W.exec(s))&&(n=i.shift(),a.push({value:n,type:i[0].replace(H," ")}),s=s.slice(n.length)),r.filter)!(i=X[o].exec(s))||c[o]&&!(i=c[o](i))||(n=i.shift(),a.push({value:n,type:o,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):T(e,l).slice(0)},s=se.compile=function(e,t){var n,i=[],a=[],s=S[e+" "];if(!s){for(t||(t=o(e)),n=t.length;n--;)(s=ke(t[n]))[y]?i.push(s):a.push(s);(s=S(e,function(e,t){var n=t.length>0,i=e.length>0,a=function(a,o,s,l,p){var u,h,g,v=0,A="0",w=a&&[],y=[],C=c,x=a||i&&r.find.TAG("*",p),k=b+=null==C?1:Math.random()||.1,T=x.length;for(p&&(c=o==f||o||p);A!==T&&null!=(u=x[A]);A++){if(i&&u){for(h=0,o||u.ownerDocument==f||(d(u),s=!m);g=e[h++];)if(g(u,o||f,s)){l.push(u);break}p&&(b=k)}n&&((u=!g&&u)&&v--,a&&w.push(u))}if(v+=A,n&&A!==v){for(h=0;g=t[h++];)g(w,y,o,s);if(a){if(v>0)for(;A--;)w[A]||y[A]||(y[A]=z.call(l));y=be(y)}L.apply(l,y),p&&!a&&y.length>0&&v+t.length>1&&se.uniqueSort(l)}return p&&(b=k,c=C),w};return n?ce(a):a}(a,i))).selector=e}return s},l=se.select=function(e,t,n,i){var a,l,c,p,u,d="function"==typeof e&&e,f=!i&&o(e=d.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&m&&r.relative[l[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(a=X.needsContext.test(e)?0:l.length;a--&&(c=l[a],!r.relative[p=c.type]);)if((u=r.find[p])&&(i=u(c.matches[0].replace(te,ne),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(a,1),!(e=i.length&&we(l)))return L.apply(n,i),n;break}}return(d||s(e,f))(i,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=y.split("").sort(_).join("")===y,n.detectDuplicates=!!u,d(),n.sortDetached=pe((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),pe((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ue("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&pe((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ue("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),pe((function(e){return null==e.getAttribute("disabled")}))||ue(I,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(n);x.find=T,x.expr=T.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=T.uniqueSort,x.text=T.getText,x.isXMLDoc=T.isXML,x.contains=T.contains,x.escapeSelector=T.escape;var S=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&x(e).is(n))break;r.push(e)}return r},E=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},_=x.expr.match.needsContext;function D(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var B=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function z(e,t,n){return v(t)?x.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?x.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?x.grep(e,(function(e){return p.call(t,e)>-1!==n})):x.filter(t,e,n)}x.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,(function(e){return 1===e.nodeType})))},x.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(x(e).filter((function(){for(t=0;t<r;t++)if(x.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)x.find(e,i[t],n);return r>1?x.uniqueSort(n):n},filter:function(e){return this.pushStack(z(this,e||[],!1))},not:function(e){return this.pushStack(z(this,e||[],!0))},is:function(e){return!!z(this,"string"==typeof e&&_.test(e)?x(e):e||[],!1).length}});var M,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||M,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:w,!0)),B.test(r[1])&&x.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=w.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(x):x.makeArray(e,this)}).prototype=x.fn,M=x(w);var O=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}x.fn.extend({has:function(e){var t=x(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(x.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,a=[],o="string"!=typeof e&&x(e);if(!_.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){a.push(n);break}return this.pushStack(a.length>1?x.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?p.call(x(e),this[0]):p.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){return null!=e.contentDocument&&o(e.contentDocument)?e.contentDocument:(D(e,"template")&&(e=e.content||e),x.merge([],e.childNodes))}},(function(e,t){x.fn[e]=function(n,r){var i=x.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=x.filter(r,i)),this.length>1&&(P[e]||x.uniqueSort(i),O.test(e)&&i.reverse()),this.pushStack(i)}}));var N=/[^\x20\t\r\n\f]+/g;function F(e){return e}function j(e){throw e}function $(e,t,n,r){var i;try{e&&v(i=e.promise)?i.call(e).done(t).fail(n):e&&v(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}x.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return x.each(e.match(N)||[],(function(e,n){t[n]=!0})),t}(e):x.extend({},e);var t,n,r,i,a=[],o=[],s=-1,l=function(){for(i=i||e.once,r=t=!0;o.length;s=-1)for(n=o.shift();++s<a.length;)!1===a[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=a.length,n=!1);e.memory||(n=!1),t=!1,i&&(a=n?[]:"")},c={add:function(){return a&&(n&&!t&&(s=a.length-1,o.push(n)),function t(n){x.each(n,(function(n,r){v(r)?e.unique&&c.has(r)||a.push(r):r&&r.length&&"string"!==b(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return x.each(arguments,(function(e,t){for(var n;(n=x.inArray(t,a,n))>-1;)a.splice(n,1),n<=s&&s--})),this},has:function(e){return e?x.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return i=o=[],a=n="",this},disabled:function(){return!a},lock:function(){return i=o=[],n||t||(a=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},x.extend({Deferred:function(e){var t=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return x.Deferred((function(n){x.each(t,(function(t,r){var i=v(e[r[4]])&&e[r[4]];a[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,i){var a=0;function o(e,t,r,i){return function(){var s=this,l=arguments,c=function(){var n,c;if(!(e<a)){if((n=r.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(c)?i?c.call(n,o(a,t,F,i),o(a,t,j,i)):(a++,c.call(n,o(a,t,F,i),o(a,t,j,i),o(a,t,F,t.notifyWith))):(r!==F&&(s=void 0,l=[n]),(i||t.resolveWith)(s,l))}},p=i?c:function(){try{c()}catch(n){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(n,p.stackTrace),e+1>=a&&(r!==j&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?p():(x.Deferred.getStackHook&&(p.stackTrace=x.Deferred.getStackHook()),n.setTimeout(p))}}return x.Deferred((function(n){t[0][3].add(o(0,n,v(i)?i:F,n.notifyWith)),t[1][3].add(o(0,n,v(e)?e:F)),t[2][3].add(o(0,n,v(r)?r:j))})).promise()},promise:function(e){return null!=e?x.extend(e,i):i}},a={};return x.each(t,(function(e,n){var o=n[2],s=n[5];i[n[1]]=o.add,s&&o.add((function(){r=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(n[3].fire),a[n[0]]=function(){return a[n[0]+"With"](this===a?void 0:this,arguments),this},a[n[0]+"With"]=o.fireWith})),i.promise(a),e&&e.call(a,a),a},when:function(e){var t=arguments.length,n=t,r=Array(n),i=s.call(arguments),a=x.Deferred(),o=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?s.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&($(e,a.done(o(n)).resolve,a.reject,!t),"pending"===a.state()||v(i[n]&&i[n].then)))return a.then();for(;n--;)$(i[n],o(n),a.reject);return a.promise()}});var R=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&R.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},x.readyException=function(e){n.setTimeout((function(){throw e}))};var H=x.Deferred();function q(){w.removeEventListener("DOMContentLoaded",q),n.removeEventListener("load",q),x.ready()}x.fn.ready=function(e){return H.then(e).catch((function(e){x.readyException(e)})),this},x.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--x.readyWait:x.isReady)||(x.isReady=!0,!0!==e&&--x.readyWait>0||H.resolveWith(w,[x]))}}),x.ready.then=H.then,"complete"===w.readyState||"loading"!==w.readyState&&!w.documentElement.doScroll?n.setTimeout(x.ready):(w.addEventListener("DOMContentLoaded",q),n.addEventListener("load",q));var W=function(e,t,n,r,i,a,o){var s=0,l=e.length,c=null==n;if("object"===b(n))for(s in i=!0,n)W(e,t,s,n[s],!0,a,o);else if(void 0!==r&&(i=!0,v(r)||(o=!0),c&&(o?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(x(e),n)})),t))for(;s<l;s++)t(e[s],n,o?r:r.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):l?t(e[0],n):a},U=/^-ms-/,Y=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function X(e){return e.replace(U,"ms-").replace(Y,G)}var V=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=x.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[X(t)]=n;else for(r in t)i[X(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in r?[t]:t.match(N)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||x.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!x.isEmptyObject(t)}};var J=new K,Q=new K,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}(n)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}x.extend({hasData:function(e){return Q.hasData(e)||J.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,r,i,a=this[0],o=a&&a.attributes;if(void 0===e){if(this.length&&(i=Q.get(a),1===a.nodeType&&!J.get(a,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(r=o[n].name).indexOf("data-")&&(r=X(r.slice(5)),te(a,r,i[r]));J.set(a,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){Q.set(this,e)})):W(this,(function(t){var n;if(a&&void 0===t)return void 0!==(n=Q.get(a,e))||void 0!==(n=te(a,e))?n:void 0;this.each((function(){Q.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Q.remove(this,e)}))}}),x.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,x.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),r=n.length,i=n.shift(),a=x._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete a.stop,i.call(e,(function(){x.dequeue(e,t)}),a)),!r&&a&&a.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:x.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?x.queue(this[0],e):void 0===t?this:this.each((function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){x.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=x.Deferred(),a=this,o=this.length,s=function(){--r||i.resolveWith(a,[a])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=J.get(a[o],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ae=w.documentElement,oe=function(e){return x.contains(e.ownerDocument,e)},se={composed:!0};ae.getRootNode&&(oe=function(e){return x.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===x.css(e,"display")};function ce(e,t,n,r){var i,a,o=20,s=r?function(){return r.cur()}:function(){return x.css(e,t,"")},l=s(),c=n&&n[3]||(x.cssNumber[t]?"":"px"),p=e.nodeType&&(x.cssNumber[t]||"px"!==c&&+l)&&re.exec(x.css(e,t));if(p&&p[3]!==c){for(l/=2,c=c||p[3],p=+l||1;o--;)x.style(e,t,p+c),(1-a)*(1-(a=s()/l||.5))<=0&&(o=0),p/=a;p*=2,x.style(e,t,p+c),n=n||[]}return n&&(p=+p||+l||0,i=n[1]?p+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=p,r.end=i)),i}var pe={};function ue(e){var t,n=e.ownerDocument,r=e.nodeName,i=pe[r];return i||(t=n.body.appendChild(n.createElement(r)),i=x.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),pe[r]=i,i)}function de(e,t){for(var n,r,i=[],a=0,o=e.length;a<o;a++)(r=e[a]).style&&(n=r.style.display,t?("none"===n&&(i[a]=J.get(r,"display")||null,i[a]||(r.style.display="")),""===r.style.display&&le(r)&&(i[a]=ue(r))):"none"!==n&&(i[a]="none",J.set(r,"display",n)));for(a=0;a<o;a++)null!=i[a]&&(e[a].style.display=i[a]);return e}x.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?x(this).show():x(this).hide()}))}});var fe,he,me=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;fe=w.createDocumentFragment().appendChild(w.createElement("div")),(he=w.createElement("input")).setAttribute("type","radio"),he.setAttribute("checked","checked"),he.setAttribute("name","t"),fe.appendChild(he),g.checkClone=fe.cloneNode(!0).cloneNode(!0).lastChild.checked,fe.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!fe.cloneNode(!0).lastChild.defaultValue,fe.innerHTML="<option></option>",g.option=!!fe.lastChild;var Ae={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function we(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&D(e,t)?x.merge([e],n):n}function ye(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}Ae.tbody=Ae.tfoot=Ae.colgroup=Ae.caption=Ae.thead,Ae.th=Ae.td,g.option||(Ae.optgroup=Ae.option=[1,"<select multiple='multiple'>","</select>"]);var Ce=/<|&#?\w+;/;function be(e,t,n,r,i){for(var a,o,s,l,c,p,u=t.createDocumentFragment(),d=[],f=0,h=e.length;f<h;f++)if((a=e[f])||0===a)if("object"===b(a))x.merge(d,a.nodeType?[a]:a);else if(Ce.test(a)){for(o=o||u.appendChild(t.createElement("div")),s=(ge.exec(a)||["",""])[1].toLowerCase(),l=Ae[s]||Ae._default,o.innerHTML=l[1]+x.htmlPrefilter(a)+l[2],p=l[0];p--;)o=o.lastChild;x.merge(d,o.childNodes),(o=u.firstChild).textContent=""}else d.push(t.createTextNode(a));for(u.textContent="",f=0;a=d[f++];)if(r&&x.inArray(a,r)>-1)i&&i.push(a);else if(c=oe(a),o=we(u.appendChild(a),"script"),c&&ye(o),n)for(p=0;a=o[p++];)ve.test(a.type||"")&&n.push(a);return u}var xe=/^key/,ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Ee(){return!1}function _e(e,t){return e===function(){try{return w.activeElement}catch(e){}}()==("focus"===t)}function De(e,t,n,r,i,a){var o,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)De(e,s,n,r,t[s],a);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ee;else if(!i)return e;return 1===a&&(o=i,(i=function(e){return x().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=x.guid++)),e.each((function(){x.event.add(this,t,i,r,n)}))}function Be(e,t,n){n?(J.set(e,t,!1),x.event.add(e,t,{namespace:!1,handler:function(e){var r,i,a=J.get(this,t);if(1&e.isTrigger&&this[t]){if(a.length)(x.event.special[t]||{}).delegateType&&e.stopPropagation();else if(a=s.call(arguments),J.set(this,t,a),r=n(this,t),this[t](),a!==(i=J.get(this,t))||r?J.set(this,t,!1):i={},a!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else a.length&&(J.set(this,t,{value:x.event.trigger(x.extend(a[0],x.Event.prototype),a.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&x.event.add(e,t,Se)}x.event={global:{},add:function(e,t,n,r,i){var a,o,s,l,c,p,u,d,f,h,m,g=J.get(e);if(V(e))for(n.handler&&(n=(a=n).handler,i=a.selector),i&&x.find.matchesSelector(ae,i),n.guid||(n.guid=x.guid++),(l=g.events)||(l=g.events=Object.create(null)),(o=g.handle)||(o=g.handle=function(t){return void 0!==x&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(N)||[""]).length;c--;)f=m=(s=Te.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),f&&(u=x.event.special[f]||{},f=(i?u.delegateType:u.bindType)||f,u=x.event.special[f]||{},p=x.extend({type:f,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&x.expr.match.needsContext.test(i),namespace:h.join(".")},a),(d=l[f])||((d=l[f]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,r,h,o)||e.addEventListener&&e.addEventListener(f,o)),u.add&&(u.add.call(e,p),p.handler.guid||(p.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,p):d.push(p),x.event.global[f]=!0)},remove:function(e,t,n,r,i){var a,o,s,l,c,p,u,d,f,h,m,g=J.hasData(e)&&J.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(N)||[""]).length;c--;)if(f=m=(s=Te.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),f){for(u=x.event.special[f]||{},d=l[f=(r?u.delegateType:u.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=a=d.length;a--;)p=d[a],!i&&m!==p.origType||n&&n.guid!==p.guid||s&&!s.test(p.namespace)||r&&r!==p.selector&&("**"!==r||!p.selector)||(d.splice(a,1),p.selector&&d.delegateCount--,u.remove&&u.remove.call(e,p));o&&!d.length&&(u.teardown&&!1!==u.teardown.call(e,h,g.handle)||x.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)x.event.remove(e,f+t[c],n,r,!0);x.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,a,o,s=new Array(arguments.length),l=x.event.fix(e),c=(J.get(this,"events")||Object.create(null))[l.type]||[],p=x.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!p.preDispatch||!1!==p.preDispatch.call(this,l)){for(o=x.event.handlers.call(this,l,c),t=0;(i=o[t++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(a=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(r=((x.event.special[a.origType]||{}).handle||a.handler).apply(i.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return p.postDispatch&&p.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,i,a,o,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(a=[],o={},n=0;n<l;n++)void 0===o[i=(r=t[n]).selector+" "]&&(o[i]=r.needsContext?x(i,this).index(c)>-1:x.find(i,this,null,[c]).length),o[i]&&a.push(r);a.length&&s.push({elem:c,handlers:a})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&D(t,"input")&&Be(t,"click",Se),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&D(t,"input")&&Be(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&D(t,"input")&&J.get(t,"click")||D(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},x.Event=function(e,t){if(!(this instanceof x.Event))return new x.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[x.expando]=!0},x.Event.prototype={constructor:x.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&ke.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},x.event.addProp),x.each({focus:"focusin",blur:"focusout"},(function(e,t){x.event.special[e]={setup:function(){return Be(this,e,_e),!1},trigger:function(){return Be(this,e),!0},delegateType:t}})),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,a=e.handleObj;return i&&(i===r||x.contains(r,i))||(e.type=a.origType,n=a.handler.apply(this,arguments),e.type=t),n}}})),x.fn.extend({on:function(e,t,n,r){return De(this,e,t,n,r)},one:function(e,t,n,r){return De(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,x(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ee),this.each((function(){x.event.remove(this,e,n,t)}))}});var ze=/<script|<style|<link/i,Me=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return D(e,"table")&&D(11!==t.nodeType?t:t.firstChild,"tr")&&x(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ie(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ne(e,t){var n,r,i,a,o,s;if(1===t.nodeType){if(J.hasData(e)&&(s=J.get(e).events))for(i in J.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)x.event.add(t,i,s[i][n]);Q.hasData(e)&&(a=Q.access(e),o=x.extend({},a),Q.set(t,o))}}function Fe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function je(e,t,n,r){t=l(t);var i,a,o,s,c,p,u=0,d=e.length,f=d-1,h=t[0],m=v(h);if(m||d>1&&"string"==typeof h&&!g.checkClone&&Me.test(h))return e.each((function(i){var a=e.eq(i);m&&(t[0]=h.call(this,i,a.html())),je(a,t,n,r)}));if(d&&(a=(i=be(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=a),a||r)){for(s=(o=x.map(we(i,"script"),Pe)).length;u<d;u++)c=i,u!==f&&(c=x.clone(c,!0,!0),s&&x.merge(o,we(c,"script"))),n.call(e[u],c,u);if(s)for(p=o[o.length-1].ownerDocument,x.map(o,Ie),u=0;u<s;u++)c=o[u],ve.test(c.type||"")&&!J.access(c,"globalEval")&&x.contains(p,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?x._evalUrl&&!c.noModule&&x._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},p):C(c.textContent.replace(Le,""),c,p))}return e}function $e(e,t,n){for(var r,i=t?x.filter(t,e):e,a=0;null!=(r=i[a]);a++)n||1!==r.nodeType||x.cleanData(we(r)),r.parentNode&&(n&&oe(r)&&ye(we(r,"script")),r.parentNode.removeChild(r));return e}x.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,a,o,s=e.cloneNode(!0),l=oe(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(o=we(s),r=0,i=(a=we(e)).length;r<i;r++)Fe(a[r],o[r]);if(t)if(n)for(a=a||we(e),o=o||we(s),r=0,i=a.length;r<i;r++)Ne(a[r],o[r]);else Ne(e,s);return(o=we(s,"script")).length>0&&ye(o,!l&&we(e,"script")),s},cleanData:function(e){for(var t,n,r,i=x.event.special,a=0;void 0!==(n=e[a]);a++)if(V(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?x.event.remove(n,r):x.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),x.fn.extend({detach:function(e){return $e(this,e,!0)},remove:function(e){return $e(this,e)},text:function(e){return W(this,(function(e){return void 0===e?x.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return je(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)}))},prepend:function(){return je(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(we(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return x.clone(this,e,t)}))},html:function(e){return W(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ze.test(e)&&!Ae[(ge.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(x.cleanData(we(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,(function(t){var n=this.parentNode;x.inArray(this,e)<0&&(x.cleanData(we(this)),n&&n.replaceChild(t,this))}),e)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){x.fn[e]=function(e){for(var n,r=[],i=x(e),a=i.length-1,o=0;o<=a;o++)n=o===a?this:this.clone(!0),x(i[o])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var Re=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),He=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},qe=function(e,t,n){var r,i,a={};for(i in t)a[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=a[i];return r},We=new RegExp(ie.join("|"),"i");function Ue(e,t,n){var r,i,a,o,s=e.style;return(n=n||He(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||oe(e)||(o=x.style(e,t)),!g.pixelBoxStyles()&&Re.test(o)&&We.test(t)&&(r=s.width,i=s.minWidth,a=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=r,s.minWidth=i,s.maxWidth=a)),void 0!==o?o+"":o}function Ye(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(p){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",p.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(c).appendChild(p);var e=n.getComputedStyle(p);r="1%"!==e.top,l=12===t(e.marginLeft),p.style.right="60%",o=36===t(e.right),i=36===t(e.width),p.style.position="absolute",a=12===t(p.offsetWidth/3),ae.removeChild(c),p=null}}function t(e){return Math.round(parseFloat(e))}var r,i,a,o,s,l,c=w.createElement("div"),p=w.createElement("div");p.style&&(p.style.backgroundClip="content-box",p.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===p.style.backgroundClip,x.extend(g,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),a},reliableTrDimensions:function(){var e,t,r,i;return null==s&&(e=w.createElement("table"),t=w.createElement("tr"),r=w.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",r.style.height="9px",ae.appendChild(e).appendChild(t).appendChild(r),i=n.getComputedStyle(t),s=parseInt(i.height)>3,ae.removeChild(e)),s}}))}();var Ge=["Webkit","Moz","ms"],Xe=w.createElement("div").style,Ve={};function Ke(e){var t=x.cssProps[e]||Ve[e];return t||(e in Xe?e:Ve[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in Xe)return e}(e)||e)}var Je=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var r=re.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function nt(e,t,n,r,i,a){var o="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=x.css(e,n+ie[o],!0,i)),r?("content"===n&&(l-=x.css(e,"padding"+ie[o],!0,i)),"margin"!==n&&(l-=x.css(e,"border"+ie[o]+"Width",!0,i))):(l+=x.css(e,"padding"+ie[o],!0,i),"padding"!==n?l+=x.css(e,"border"+ie[o]+"Width",!0,i):s+=x.css(e,"border"+ie[o]+"Width",!0,i));return!r&&a>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-l-s-.5))||0),l}function rt(e,t,n){var r=He(e),i=(!g.boxSizingReliable()||n)&&"border-box"===x.css(e,"boxSizing",!1,r),a=i,o=Ue(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Re.test(o)){if(!n)return o;o="auto"}return(!g.boxSizingReliable()&&i||!g.reliableTrDimensions()&&D(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===x.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===x.css(e,"boxSizing",!1,r),(a=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+nt(e,t,n||(i?"border":"content"),a,r,o)+"px"}function it(e,t,n,r,i){return new it.prototype.init(e,t,n,r,i)}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ue(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,a,o,s=X(t),l=Qe.test(t),c=e.style;if(l||(t=Ke(s)),o=x.cssHooks[t]||x.cssHooks[s],void 0===n)return o&&"get"in o&&void 0!==(i=o.get(e,!1,r))?i:c[t];"string"===(a=typeof n)&&(i=re.exec(n))&&i[1]&&(n=ce(e,t,i),a="number"),null!=n&&n==n&&("number"!==a||l||(n+=i&&i[3]||(x.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,r))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var i,a,o,s=X(t);return Qe.test(t)||(t=Ke(s)),(o=x.cssHooks[t]||x.cssHooks[s])&&"get"in o&&(i=o.get(e,!0,n)),void 0===i&&(i=Ue(e,t,r)),"normal"===i&&t in et&&(i=et[t]),""===n||n?(a=parseFloat(i),!0===n||isFinite(a)?a||0:i):i}}),x.each(["height","width"],(function(e,t){x.cssHooks[t]={get:function(e,n,r){if(n)return!Je.test(x.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?rt(e,t,r):qe(e,Ze,(function(){return rt(e,t,r)}))},set:function(e,n,r){var i,a=He(e),o=!g.scrollboxSize()&&"absolute"===a.position,s=(o||r)&&"border-box"===x.css(e,"boxSizing",!1,a),l=r?nt(e,t,r,s,a):0;return s&&o&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(a[t])-nt(e,t,"border",!1,a)-.5)),l&&(i=re.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=x.css(e,t)),tt(0,n,l)}}})),x.cssHooks.marginLeft=Ye(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ue(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),x.each({margin:"",padding:"",border:"Width"},(function(e,t){x.cssHooks[e+t]={expand:function(n){for(var r=0,i={},a="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+ie[r]+t]=a[r]||a[r-2]||a[0];return i}},"margin"!==e&&(x.cssHooks[e+t].set=tt)})),x.fn.extend({css:function(e,t){return W(this,(function(e,t,n){var r,i,a={},o=0;if(Array.isArray(t)){for(r=He(e),i=t.length;o<i;o++)a[t[o]]=x.css(e,t[o],!1,r);return a}return void 0!==n?x.style(e,t,n):x.css(e,t)}),e,t,arguments.length>1)}}),x.Tween=it,it.prototype={constructor:it,init:function(e,t,n,r,i,a){this.elem=e,this.prop=n,this.easing=i||x.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=a||(x.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=x.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):1!==e.elem.nodeType||!x.cssHooks[e.prop]&&null==e.elem.style[Ke(e.prop)]?e.elem[e.prop]=e.now:x.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},x.fx=it.prototype.init,x.fx.step={};var at,ot,st=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ct(){ot&&(!1===w.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ct):n.setTimeout(ct,x.fx.interval),x.fx.tick())}function pt(){return n.setTimeout((function(){at=void 0})),at=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=ie[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function dt(e,t,n){for(var r,i=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),a=0,o=i.length;a<o;a++)if(r=i[a].call(n,t,e))return r}function ft(e,t,n){var r,i,a=0,o=ft.prefilters.length,s=x.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var t=at||pt(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),a=0,o=c.tweens.length;a<o;a++)c.tweens[a].run(r);return s.notifyWith(e,[c,r,n]),r<1&&o?n:(o||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{},easing:x.easing._default},n),originalProperties:t,originalOptions:n,startTime:at||pt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=x.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),p=c.props;for(!function(e,t){var n,r,i,a,o;for(n in e)if(i=t[r=X(n)],a=e[n],Array.isArray(a)&&(i=a[1],a=e[n]=a[0]),n!==r&&(e[r]=a,delete e[n]),(o=x.cssHooks[r])&&"expand"in o)for(n in a=o.expand(a),delete e[r],a)n in e||(e[n]=a[n],t[n]=i);else t[r]=i}(p,c.opts.specialEasing);a<o;a++)if(r=ft.prefilters[a].call(c,e,p,c.opts))return v(r.stop)&&(x._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return x.map(p,dt,c),v(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),x.fx.timer(x.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}x.Animation=x.extend(ft,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(N);for(var n,r=0,i=e.length;r<i;r++)n=e[r],ft.tweeners[n]=ft.tweeners[n]||[],ft.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,a,o,s,l,c,p,u="width"in t||"height"in t,d=this,f={},h=e.style,m=e.nodeType&&le(e),g=J.get(e,"fxshow");for(r in n.queue||(null==(o=x._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,d.always((function(){d.always((function(){o.unqueued--,x.queue(e,"fx").length||o.empty.fire()}))}))),t)if(i=t[r],st.test(i)){if(delete t[r],a=a||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;m=!0}f[r]=g&&g[r]||x.style(e,r)}if((l=!x.isEmptyObject(t))||!x.isEmptyObject(f))for(r in u&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=g&&g.display)&&(c=J.get(e,"display")),"none"===(p=x.css(e,"display"))&&(c?p=c:(de([e],!0),c=e.style.display||c,p=x.css(e,"display"),de([e]))),("inline"===p||"inline-block"===p&&null!=c)&&"none"===x.css(e,"float")&&(l||(d.done((function(){h.display=c})),null==c&&(p=h.display,c="none"===p?"":p)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(g?"hidden"in g&&(m=g.hidden):g=J.access(e,"fxshow",{display:c}),a&&(g.hidden=!m),m&&de([e],!0),d.done((function(){for(r in m||de([e]),J.remove(e,"fxshow"),f)x.style(e,r,f[r])}))),l=dt(m?g[r]:0,r,d),r in g||(g[r]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ft.prefilters.unshift(e):ft.prefilters.push(e)}}),x.speed=function(e,t,n){var r=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return x.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in x.fx.speeds?r.duration=x.fx.speeds[r.duration]:r.duration=x.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.fn.extend({fadeTo:function(e,t,n,r){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=x.isEmptyObject(e),a=x.speed(t,n,r),o=function(){var t=ft(this,x.extend({},e),a);(i||J.get(this,"finish"))&&t.stop(!0)};return o.finish=o,i||!1===a.queue?this.each(o):this.queue(a.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",a=x.timers,o=J.get(this);if(i)o[i]&&o[i].stop&&r(o[i]);else for(i in o)o[i]&&o[i].stop&&lt.test(i)&&r(o[i]);for(i=a.length;i--;)a[i].elem!==this||null!=e&&a[i].queue!==e||(a[i].anim.stop(n),t=!1,a.splice(i,1));!t&&n||x.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],a=x.timers,o=r?r.length:0;for(n.finish=!0,x.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=a.length;t--;)a[t].elem===this&&a[t].queue===e&&(a[t].anim.stop(!0),a.splice(t,1));for(t=0;t<o;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),x.each(["toggle","show","hide"],(function(e,t){var n=x.fn[t];x.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}})),x.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){x.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),x.timers=[],x.fx.tick=function(){var e,t=0,n=x.timers;for(at=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||x.fx.stop(),at=void 0},x.fx.timer=function(e){x.timers.push(e),x.fx.start()},x.fx.interval=13,x.fx.start=function(){ot||(ot=!0,ct())},x.fx.stop=function(){ot=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fn.delay=function(e,t){return e=x.fx&&x.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}}))},function(){var e=w.createElement("input"),t=w.createElement("select").appendChild(w.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=w.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var ht,mt=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return W(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){x.removeAttr(this,e)}))}}),x.extend({attr:function(e,t,n){var r,i,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?x.prop(e,t,n):(1===a&&x.isXMLDoc(e)||(i=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void x.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=x.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&D(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(N);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=mt[t]||x.find.attr;mt[t]=function(e,t,r){var i,a,o=t.toLowerCase();return r||(a=mt[o],mt[o]=i,i=null!=n(e,t,r)?o:null,mt[o]=a),i}}));var gt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function At(e){return(e.match(N)||[]).join(" ")}function wt(e){return e.getAttribute&&e.getAttribute("class")||""}function yt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(N)||[]}x.fn.extend({prop:function(e,t){return W(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[x.propFix[e]||e]}))}}),x.extend({prop:function(e,t,n){var r,i,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&x.isXMLDoc(e)||(t=x.propFix[t]||t,i=x.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){x.propFix[this.toLowerCase()]=this})),x.fn.extend({addClass:function(e){var t,n,r,i,a,o,s,l=0;if(v(e))return this.each((function(t){x(this).addClass(e.call(this,t,wt(this)))}));if((t=yt(e)).length)for(;n=this[l++];)if(i=wt(n),r=1===n.nodeType&&" "+At(i)+" "){for(o=0;a=t[o++];)r.indexOf(" "+a+" ")<0&&(r+=a+" ");i!==(s=At(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,a,o,s,l=0;if(v(e))return this.each((function(t){x(this).removeClass(e.call(this,t,wt(this)))}));if(!arguments.length)return this.attr("class","");if((t=yt(e)).length)for(;n=this[l++];)if(i=wt(n),r=1===n.nodeType&&" "+At(i)+" "){for(o=0;a=t[o++];)for(;r.indexOf(" "+a+" ")>-1;)r=r.replace(" "+a+" "," ");i!==(s=At(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){x(this).toggleClass(e.call(this,n,wt(this),t),t)})):this.each((function(){var t,i,a,o;if(r)for(i=0,a=x(this),o=yt(e);t=o[i++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else void 0!==e&&"boolean"!==n||((t=wt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+At(wt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Ct=/\r/g;x.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=v(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,x(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=x.map(i,(function(e){return null==e?"":e+""}))),(t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=x.valHooks[i.type]||x.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Ct,""):null==n?"":n:void 0}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:At(x.text(e))}},select:{get:function(e){var t,n,r,i=e.options,a=e.selectedIndex,o="select-one"===e.type,s=o?null:[],l=o?a+1:i.length;for(r=a<0?l:o?a:0;r<l;r++)if(((n=i[r]).selected||r===a)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(t=x(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,a=x.makeArray(t),o=i.length;o--;)((r=i[o]).selected=x.inArray(x.valHooks.option.get(r),a)>-1)&&(n=!0);return n||(e.selectedIndex=-1),a}}}}),x.each(["radio","checkbox"],(function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=x.inArray(x(e).val(),t)>-1}},g.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),g.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(e,t,r,i){var a,o,s,l,c,p,u,d,h=[r||w],m=f.call(e,"type")?e.type:e,g=f.call(e,"namespace")?e.namespace.split("."):[];if(o=d=s=r=r||w,3!==r.nodeType&&8!==r.nodeType&&!bt.test(m+x.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[x.expando]?e:new x.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:x.makeArray(t,[e]),u=x.event.special[m]||{},i||!u.trigger||!1!==u.trigger.apply(r,t))){if(!i&&!u.noBubble&&!A(r)){for(l=u.delegateType||m,bt.test(l+m)||(o=o.parentNode);o;o=o.parentNode)h.push(o),s=o;s===(r.ownerDocument||w)&&h.push(s.defaultView||s.parentWindow||n)}for(a=0;(o=h[a++])&&!e.isPropagationStopped();)d=o,e.type=a>1?l:u.bindType||m,(p=(J.get(o,"events")||Object.create(null))[e.type]&&J.get(o,"handle"))&&p.apply(o,t),(p=c&&o[c])&&p.apply&&V(o)&&(e.result=p.apply(o,t),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(h.pop(),t)||!V(r)||c&&v(r[m])&&!A(r)&&((s=r[c])&&(r[c]=null),x.event.triggered=m,e.isPropagationStopped()&&d.addEventListener(m,xt),r[m](),e.isPropagationStopped()&&d.removeEventListener(m,xt),x.event.triggered=void 0,s&&(r[c]=s)),e.result}},simulate:function(e,t,n){var r=x.extend(new x.Event,n,{type:e,isSimulated:!0});x.event.trigger(r,null,t)}}),x.fn.extend({trigger:function(e,t){return this.each((function(){x.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return x.event.trigger(e,t,n,!0)}}),g.focusin||x.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}}));var kt=n.location,Tt={guid:Date.now()},St=/\?/;x.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||x.error("Invalid XML: "+e),t};var Et=/\[\]$/,_t=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Bt=/^(?:input|select|textarea|keygen)/i;function zt(e,t,n,r){var i;if(Array.isArray(t))x.each(t,(function(t,i){n||Et.test(e)?r(e,i):zt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==b(t))r(e,t);else for(i in t)zt(e+"["+i+"]",t[i],n,r)}x.param=function(e,t){var n,r=[],i=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,(function(){i(this.name,this.value)}));else for(n in e)zt(n,e[n],t,i);return r.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&Bt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=x(this).val();return null==n?null:Array.isArray(n)?x.map(n,(function(e){return{name:t.name,value:e.replace(_t,"\r\n")}})):{name:t.name,value:n.replace(_t,"\r\n")}})).get()}});var Mt=/%20/g,Lt=/#.*$/,Ot=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:GET|HEAD)$/,Nt=/^\/\//,Ft={},jt={},$t="*/".concat("*"),Rt=w.createElement("a");function Ht(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,a=t.toLowerCase().match(N)||[];if(v(n))for(;r=a[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qt(e,t,n,r){var i={},a=e===jt;function o(s){var l;return i[s]=!0,x.each(e[s]||[],(function(e,s){var c=s(t,n,r);return"string"!=typeof c||a||i[c]?a?!(l=c):void 0:(t.dataTypes.unshift(c),o(c),!1)})),l}return o(t.dataTypes[0])||!i["*"]&&o("*")}function Wt(e,t){var n,r,i=x.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&x.extend(!0,e,r),e}Rt.href=kt.href,x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,x.ajaxSettings),t):Wt(x.ajaxSettings,e)},ajaxPrefilter:Ht(Ft),ajaxTransport:Ht(jt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,a,o,s,l,c,p,u,d,f=x.ajaxSetup({},t),h=f.context||f,m=f.context&&(h.nodeType||h.jquery)?x(h):x.event,g=x.Deferred(),v=x.Callbacks("once memory"),A=f.statusCode||{},y={},C={},b="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(c){if(!o)for(o={};t=Pt.exec(a);)o[t[1].toLowerCase()+" "]=(o[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=o[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=C[e.toLowerCase()]=C[e.toLowerCase()]||e,y[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)k.always(e[k.status]);else for(t in e)A[t]=[A[t],e[t]];return this},abort:function(e){var t=e||b;return r&&r.abort(t),T(0,t),this}};if(g.promise(k),f.url=((e||f.url||kt.href)+"").replace(Nt,kt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(N)||[""],null==f.crossDomain){l=w.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Rt.protocol+"//"+Rt.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=x.param(f.data,f.traditional)),qt(Ft,f,t,k),c)return k;for(u in(p=x.event&&f.global)&&0==x.active++&&x.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!It.test(f.type),i=f.url.replace(Lt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Mt,"+")):(d=f.url.slice(i.length),f.data&&(f.processData||"string"==typeof f.data)&&(i+=(St.test(i)?"&":"?")+f.data,delete f.data),!1===f.cache&&(i=i.replace(Ot,"$1"),d=(St.test(i)?"&":"?")+"_="+Tt.guid+++d),f.url=i+d),f.ifModified&&(x.lastModified[i]&&k.setRequestHeader("If-Modified-Since",x.lastModified[i]),x.etag[i]&&k.setRequestHeader("If-None-Match",x.etag[i])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&k.setRequestHeader("Content-Type",f.contentType),k.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+$t+"; q=0.01":""):f.accepts["*"]),f.headers)k.setRequestHeader(u,f.headers[u]);if(f.beforeSend&&(!1===f.beforeSend.call(h,k,f)||c))return k.abort();if(b="abort",v.add(f.complete),k.done(f.success),k.fail(f.error),r=qt(jt,f,t,k)){if(k.readyState=1,p&&m.trigger("ajaxSend",[k,f]),c)return k;f.async&&f.timeout>0&&(s=n.setTimeout((function(){k.abort("timeout")}),f.timeout));try{c=!1,r.send(y,T)}catch(e){if(c)throw e;T(-1,e)}}else T(-1,"No Transport");function T(e,t,o,l){var u,d,w,y,C,b=t;c||(c=!0,s&&n.clearTimeout(s),r=void 0,a=l||"",k.readyState=e>0?4:0,u=e>=200&&e<300||304===e,o&&(y=function(e,t,n){for(var r,i,a,o,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)a=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){a=i;break}o||(o=i)}a=a||o}if(a)return a!==l[0]&&l.unshift(a),n[a]}(f,k,o)),!u&&x.inArray("script",f.dataTypes)>-1&&(f.converters["text script"]=function(){}),y=function(e,t,n,r){var i,a,o,s,l,c={},p=e.dataTypes.slice();if(p[1])for(o in e.converters)c[o.toLowerCase()]=e.converters[o];for(a=p.shift();a;)if(e.responseFields[a]&&(n[e.responseFields[a]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=p.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(o=c[l+" "+a]||c["* "+a]))for(i in c)if((s=i.split(" "))[1]===a&&(o=c[l+" "+s[0]]||c["* "+s[0]])){!0===o?o=c[i]:!0!==c[i]&&(a=s[0],p.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}(f,y,k,u),u?(f.ifModified&&((C=k.getResponseHeader("Last-Modified"))&&(x.lastModified[i]=C),(C=k.getResponseHeader("etag"))&&(x.etag[i]=C)),204===e||"HEAD"===f.type?b="nocontent":304===e?b="notmodified":(b=y.state,d=y.data,u=!(w=y.error))):(w=b,!e&&b||(b="error",e<0&&(e=0))),k.status=e,k.statusText=(t||b)+"",u?g.resolveWith(h,[d,b,k]):g.rejectWith(h,[k,b,w]),k.statusCode(A),A=void 0,p&&m.trigger(u?"ajaxSuccess":"ajaxError",[k,f,u?d:w]),v.fireWith(h,[k,b]),p&&(m.trigger("ajaxComplete",[k,f]),--x.active||x.event.trigger("ajaxStop")))}return k},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,void 0,t,"script")}}),x.each(["get","post"],(function(e,t){x[t]=function(e,n,r,i){return v(n)&&(i=i||r,r=n,n=void 0),x.ajax(x.extend({url:e,type:t,dataType:i,data:n,success:r},x.isPlainObject(e)&&e))}})),x.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),x._evalUrl=function(e,t,n){return x.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){x.globalEval(e,t,n)}})},x.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){x(this).wrapInner(e.call(this,t))})):this.each((function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){x(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){x(this).replaceWith(this.childNodes)})),this}}),x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)},x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},x.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Yt=x.ajaxSettings.xhr();g.cors=!!Yt&&"withCredentials"in Yt,g.ajax=Yt=!!Yt,x.ajaxTransport((function(e){var t,r;if(g.cors||Yt&&!e.crossDomain)return{send:function(i,a){var o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];for(o in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(o,i[o]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?a(0,"error"):a(s.status,s.statusText):a(Ut[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),x.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),x.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=x("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),w.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Gt,Xt=[],Vt=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||x.expando+"_"+Tt.guid++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",(function(e,t,r){var i,a,o,s=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Vt,"$1"+i):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return o||x.error(i+" was not called"),o[0]},e.dataTypes[0]="json",a=n[i],n[i]=function(){o=arguments},r.always((function(){void 0===a?x(n).removeProp(i):n[i]=a,e[i]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(i)),o&&v(a)&&a(o[0]),o=a=void 0})),"script"})),g.createHTMLDocument=((Gt=w.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Gt.childNodes.length),x.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((r=(t=w.implementation.createHTMLDocument("")).createElement("base")).href=w.location.href,t.head.appendChild(r)):t=w),a=!n&&[],(i=B.exec(e))?[t.createElement(i[1])]:(i=be([e],t,a),a&&a.length&&x(a).remove(),x.merge([],i.childNodes)));var r,i,a},x.fn.load=function(e,t,n){var r,i,a,o=this,s=e.indexOf(" ");return s>-1&&(r=At(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),o.length>0&&x.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){a=arguments,o.html(r?x("<div>").append(x.parseHTML(e)).find(r):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,a||[e.responseText,t,e])}))}),this},x.expr.pseudos.animated=function(e){return x.grep(x.timers,(function(t){return e===t.elem})).length},x.offset={setOffset:function(e,t,n){var r,i,a,o,s,l,c=x.css(e,"position"),p=x(e),u={};"static"===c&&(e.style.position="relative"),s=p.offset(),a=x.css(e,"top"),l=x.css(e,"left"),("absolute"===c||"fixed"===c)&&(a+l).indexOf("auto")>-1?(o=(r=p.position()).top,i=r.left):(o=parseFloat(a)||0,i=parseFloat(l)||0),v(t)&&(t=t.call(e,n,x.extend({},s))),null!=t.top&&(u.top=t.top-s.top+o),null!=t.left&&(u.left=t.left-s.left+i),"using"in t?t.using.call(e,u):("number"==typeof u.top&&(u.top+="px"),"number"==typeof u.left&&(u.left+="px"),p.css(u))}},x.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){x.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===x.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===x.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=x(e).offset()).top+=x.css(e,"borderTopWidth",!0),i.left+=x.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-x.css(r,"marginTop",!0),left:t.left-i.left-x.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===x.css(e,"position");)e=e.offsetParent;return e||ae}))}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;x.fn[e]=function(r){return W(this,(function(e,r,i){var a;if(A(e)?a=e:9===e.nodeType&&(a=e.defaultView),void 0===i)return a?a[t]:e[r];a?a.scrollTo(n?a.pageXOffset:i,n?i:a.pageYOffset):e[r]=i}),e,r,arguments.length)}})),x.each(["top","left"],(function(e,t){x.cssHooks[t]=Ye(g.pixelPosition,(function(e,n){if(n)return n=Ue(e,t),Re.test(n)?x(e).position()[t]+"px":n}))})),x.each({Height:"height",Width:"width"},(function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){x.fn[r]=function(i,a){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===a?"margin":"border");return W(this,(function(t,n,i){var a;return A(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])):void 0===i?x.css(t,n,s):x.style(t,n,i,s)}),t,o?i:void 0,o)}}))})),x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){x.fn[t]=function(e){return this.on(t,e)}})),x.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Kt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||x.guid++,i},x.holdReady=function(e){e?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=D,x.isFunction=v,x.isWindow=A,x.camelCase=X,x.type=b,x.now=Date.now,x.isNumeric=function(e){var t=x.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},x.trim=function(e){return null==e?"":(e+"").replace(Kt,"")},void 0===(r=function(){return x}.apply(t,[]))||(e.exports=r);var Jt=n.jQuery,Qt=n.$;return x.noConflict=function(e){return n.$===x&&(n.$=Qt),e&&n.jQuery===x&&(n.jQuery=Jt),x},void 0===i&&(n.jQuery=n.$=x),x}))},function(e,t,n){"use strict";var r=n(4),i=n(21),a=n(38),o=n(27);function s(e){var t=new a(e),n=i(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var l=s(n(24));l.Axios=a,l.create=function(e){return s(o(l.defaults,e))},l.Cancel=n(28),l.CancelToken=n(50),l.isCancel=n(23),l.all=function(e){return Promise.all(e)},l.spread=n(51),e.exports=l,e.exports.default=l},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,n){"use strict";var r=n(4),i=n(22),a=n(39),o=n(40),s=n(27);function l(e){this.defaults=e,this.interceptors={request:new a,response:new a}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[o,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},l.prototype.getUri=function(e){return e=s(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,n,i){return this.request(r.merge(i||{},{method:e,url:t,data:n}))}})),e.exports=l},function(e,t,n){"use strict";var r=n(4);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=i},function(e,t,n){"use strict";var r=n(4),i=n(41),a=n(23),o=n(24),s=n(48),l=n(49);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!s(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||o.adapter)(e).then((function(t){return c(e),t.data=i(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(c(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(26);e.exports=function(e,t,n){var i=n.config.validateStatus;!i||i(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(4),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,o={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(o[t]&&i.indexOf(t)>=0)return;o[t]="set-cookie"===t?(o[t]?o[t]:[]).concat([n]):o[t]?o[t]+", "+n:n}})),o):o}},function(e,t,n){"use strict";var r=n(4);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(4);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,a,o){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(i)&&s.push("path="+i),r.isString(a)&&s.push("domain="+a),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(28);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i((function(t){e=t})),cancel:e}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(16),i=n(29),a=Object.prototype.hasOwnProperty,o={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},s=Array.isArray,l=Array.prototype.push,c=function(e,t){l.apply(e,s(t)?t:[t])},p=Date.prototype.toISOString,u=i.default,d={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:r.encode,encodeValuesOnly:!1,format:u,formatter:i.formatters[u],indices:!1,serializeDate:function(e){return p.call(e)},skipNulls:!1,strictNullHandling:!1},f=function e(t,n,i,a,o,l,p,u,f,h,m,g,v){var A,w=t;if("function"==typeof p?w=p(n,w):w instanceof Date?w=h(w):"comma"===i&&s(w)&&(w=w.join(",")),null===w){if(a)return l&&!g?l(n,d.encoder,v,"key"):n;w=""}if("string"==typeof(A=w)||"number"==typeof A||"boolean"==typeof A||"symbol"==typeof A||"bigint"==typeof A||r.isBuffer(w))return l?[m(g?n:l(n,d.encoder,v,"key"))+"="+m(l(w,d.encoder,v,"value"))]:[m(n)+"="+m(String(w))];var y,C=[];if(void 0===w)return C;if(s(p))y=p;else{var b=Object.keys(w);y=u?b.sort(u):b}for(var x=0;x<y.length;++x){var k=y[x];o&&null===w[k]||(s(w)?c(C,e(w[k],"function"==typeof i?i(n,k):n,i,a,o,l,p,u,f,h,m,g,v)):c(C,e(w[k],n+(f?"."+k:"["+k+"]"),i,a,o,l,p,u,f,h,m,g,v)))}return C};e.exports=function(e,t){var n,r=e,l=function(e){if(!e)return d;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||d.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=i.default;if(void 0!==e.format){if(!a.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r=i.formatters[n],o=d.filter;return("function"==typeof e.filter||s(e.filter))&&(o=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:d.addQueryPrefix,allowDots:void 0===e.allowDots?d.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:d.charsetSentinel,delimiter:void 0===e.delimiter?d.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:d.encode,encoder:"function"==typeof e.encoder?e.encoder:d.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:d.encodeValuesOnly,filter:o,formatter:r,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:d.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:d.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:d.strictNullHandling}}(t);"function"==typeof l.filter?r=(0,l.filter)("",r):s(l.filter)&&(n=l.filter);var p,u=[];if("object"!=typeof r||null===r)return"";p=t&&t.arrayFormat in o?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var h=o[p];n||(n=Object.keys(r)),l.sort&&n.sort(l.sort);for(var m=0;m<n.length;++m){var g=n[m];l.skipNulls&&null===r[g]||c(u,f(r[g],g,h,l.strictNullHandling,l.skipNulls,l.encode?l.encoder:null,l.filter,l.sort,l.allowDots,l.serializeDate,l.formatter,l.encodeValuesOnly,l.charset))}var v=u.join(l.delimiter),A=!0===l.addQueryPrefix?"?":"";return l.charsetSentinel&&("iso-8859-1"===l.charset?A+="utf8=%26%2310003%3B&":A+="utf8=%E2%9C%93&"),v.length>0?A+v:""}},function(e,t,n){"use strict";var r=n(16),i=Object.prototype.hasOwnProperty,a={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},o=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},s=function(e,t,n){if(e){var r=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,a=/(\[[^[\]]*])/g,o=n.depth>0&&/(\[[^[\]]*])/.exec(r),s=o?r.slice(0,o.index):r,l=[];if(s){if(!n.plainObjects&&i.call(Object.prototype,s)&&!n.allowPrototypes)return;l.push(s)}for(var c=0;n.depth>0&&null!==(o=a.exec(r))&&c<n.depth;){if(c+=1,!n.plainObjects&&i.call(Object.prototype,o[1].slice(1,-1))&&!n.allowPrototypes)return;l.push(o[1])}return o&&l.push("["+r.slice(o.index)+"]"),function(e,t,n){for(var r=t,i=e.length-1;i>=0;--i){var a,o=e[i];if("[]"===o&&n.parseArrays)a=[].concat(r);else{a=n.plainObjects?Object.create(null):{};var s="["===o.charAt(0)&&"]"===o.charAt(o.length-1)?o.slice(1,-1):o,l=parseInt(s,10);n.parseArrays||""!==s?!isNaN(l)&&o!==s&&String(l)===s&&l>=0&&n.parseArrays&&l<=n.arrayLimit?(a=[])[l]=r:a[s]=r:a={0:r}}r=a}return r}(l,t,n)}};e.exports=function(e,t){var n=function(e){if(!e)return a;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?a.charset:e.charset;return{allowDots:void 0===e.allowDots?a.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:a.allowPrototypes,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:a.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:a.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:a.comma,decoder:"function"==typeof e.decoder?e.decoder:a.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:a.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:a.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:a.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:a.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:a.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:a.strictNullHandling}}(t);if(""===e||null==e)return n.plainObjects?Object.create(null):{};for(var l="string"==typeof e?function(e,t){var n,s={},l=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,c=t.parameterLimit===1/0?void 0:t.parameterLimit,p=l.split(t.delimiter,c),u=-1,d=t.charset;if(t.charsetSentinel)for(n=0;n<p.length;++n)0===p[n].indexOf("utf8=")&&("utf8=%E2%9C%93"===p[n]?d="utf-8":"utf8=%26%2310003%3B"===p[n]&&(d="iso-8859-1"),u=n,n=p.length);for(n=0;n<p.length;++n)if(n!==u){var f,h,m=p[n],g=m.indexOf("]="),v=-1===g?m.indexOf("="):g+1;-1===v?(f=t.decoder(m,a.decoder,d,"key"),h=t.strictNullHandling?null:""):(f=t.decoder(m.slice(0,v),a.decoder,d,"key"),h=t.decoder(m.slice(v+1),a.decoder,d,"value")),h&&t.interpretNumericEntities&&"iso-8859-1"===d&&(h=o(h)),h&&t.comma&&h.indexOf(",")>-1&&(h=h.split(",")),i.call(s,f)?s[f]=r.combine(s[f],h):s[f]=h}return s}(e,n):e,c=n.plainObjects?Object.create(null):{},p=Object.keys(l),u=0;u<p.length;++u){var d=p[u],f=s(d,l[d],n);c=r.merge(c,f,n)}return r.compact(c)}},function(e,t,n){"use strict";var r=n(1),i=n.n(r),a=n(2),o=n.n(a)()(i.a);o.push([e.i,"\n.productst[data-v-6c69c096]{\r\n  width: 100%;\r\n  height: auto;\n}\n.productst>.con[data-v-6c69c096]{\r\n  max-width: 1200px;\n}\n.productst>.con>.list[data-v-6c69c096]{\r\n  width: 28%;\r\n  overflow: hidden;\r\n  display: inline-block;\r\n  margin-bottom: 50px;\r\n  margin-left: 20px;\r\n  cursor: pointer;\n}\n.productst>.con>.list>img[data-v-6c69c096]{\r\n  width: 77.78%;\r\n  height: 77.78%;\n}\n.productst>.con>.list>h3[data-v-6c69c096]{\r\n  font-size: 24px;\r\n  margin-bottom: 10px;\r\n  font-weight: 400;\r\n  padding: 0 55px;\r\n  color: #000;\r\n  font-family: 微软雅黑;\n}\n.productst>.con>.list>p[data-v-6c69c096]{\r\n  font-size: 18px;\r\n  color: #666;\r\n  padding: 0 55px;\n}\r\n\r\n","",{version:3,sources:["webpack://./src/component/productst.vue"],names:[],mappings:";AAiCA;EACA,WAAA;EACA,YAAA;AACA;AACA;EACA,iBAAA;AACA;AACA;EACA,UAAA;EACA,gBAAA;EACA,qBAAA;EACA,mBAAA;EACA,iBAAA;EACA,eAAA;AACA;AACA;EACA,aAAA;EACA,cAAA;AACA;AACA;EACA,eAAA;EACA,mBAAA;EACA,gBAAA;EACA,eAAA;EACA,WAAA;EACA,iBAAA;AACA;AACA;EACA,eAAA;EACA,WAAA;EACA,eAAA;AACA",sourcesContent:['<template>\r\n  <div class="productst">\r\n   <div class="con">\r\n      <div class="list" @click="pro">\r\n      <img src="/img/1545205287_222a3e965c1e790e415d0625ac4295b1.jpg" alt="">\r\n      <h3>宠物饮水机滤芯</h3>\r\n      <p>优质滤材 四重过滤</p>\r\n    </div>\r\n     <div class="list">\r\n      <img src="/img/1545205287_222a3e965c1e790e415d0625ac4295b1.jpg" alt="">\r\n      <h3>宠物饮水机滤芯</h3>\r\n      <p>优质滤材 四重过滤</p>\r\n    </div>\r\n     <div class="list">\r\n      <img src="/img/1545205287_222a3e965c1e790e415d0625ac4295b1.jpg" alt="">\r\n      <h3>宠物饮水机滤芯</h3>\r\n      <p>优质滤材 四重过滤</p>\r\n    </div>\r\n   </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name:"productst",\r\n  methods:{\r\n    pro(){\r\n      location.href="product.html"\r\n    }\r\n  }\r\n}\r\n\r\n<\/script>\r\n<style scoped>\r\n.productst{\r\n  width: 100%;\r\n  height: auto;\r\n}\r\n.productst>.con{\r\n  max-width: 1200px;\r\n}\r\n.productst>.con>.list{\r\n  width: 28%;\r\n  overflow: hidden;\r\n  display: inline-block;\r\n  margin-bottom: 50px;\r\n  margin-left: 20px;\r\n  cursor: pointer;\r\n}\r\n.productst>.con>.list>img{\r\n  width: 77.78%;\r\n  height: 77.78%;\r\n}\r\n.productst>.con>.list>h3{\r\n  font-size: 24px;\r\n  margin-bottom: 10px;\r\n  font-weight: 400;\r\n  padding: 0 55px;\r\n  color: #000;\r\n  font-family: 微软雅黑;\r\n}\r\n.productst>.con>.list>p{\r\n  font-size: 18px;\r\n  color: #666;\r\n  padding: 0 55px;\r\n}\r\n\r\n</style>'],sourceRoot:""}]),t.a=o},,,,function(e,t,n){"use strict";n.r(t);var r=n(7),i=n(11),a=n(12),o=n(34),s=n(5),l=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"productst"},[n("div",{staticClass:"con"},[n("div",{staticClass:"list",on:{click:e.pro}},[n("img",{attrs:{src:"/img/1545205287_222a3e965c1e790e415d0625ac4295b1.jpg",alt:""}}),e._v(" "),n("h3",[e._v("宠物饮水机滤芯")]),e._v(" "),n("p",[e._v("优质滤材 四重过滤")])]),e._v(" "),e._m(0),e._v(" "),e._m(1)])])};l._withStripped=!0;var c={name:"productst",methods:{pro:function(){location.href="product.html"}}},p=n(0),u=n.n(p),d=n(54),f={insert:"head",singleton:!1},h=(u()(d.a,f),d.a.locals,n(3)),m=Object(h.a)(c,l,[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"list"},[t("img",{attrs:{src:"/img/1545205287_222a3e965c1e790e415d0625ac4295b1.jpg",alt:""}}),this._v(" "),t("h3",[this._v("宠物饮水机滤芯")]),this._v(" "),t("p",[this._v("优质滤材 四重过滤")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"list"},[t("img",{attrs:{src:"/img/1545205287_222a3e965c1e790e415d0625ac4295b1.jpg",alt:""}}),this._v(" "),t("h3",[this._v("宠物饮水机滤芯")]),this._v(" "),t("p",[this._v("优质滤材 四重过滤")])])}],!1,null,"6c69c096",null);m.options.__file="src/component/productst.vue";var g=m.exports;new r.a({el:"#ex",data:{},components:{headers:i.a,footers:a.a,banners:o.a,products:s.a,pro:g}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,