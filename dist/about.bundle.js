!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=61)}([function(t,e,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function s(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},r=[],i=0;i<t.length;i++){var a=t[i],c=e.base?a[0]+e.base:a[0],l=n[c]||0,u="".concat(c," ").concat(l);n[c]=l+1;var f=s(u),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(o[f].references++,o[f].updater(d)):o.push({identifier:u,updater:A(d,e),references:1}),r.push(u)}return r}function l(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var o=a(t.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var u,f=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join("\n")});function d(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=f(e,i);else{var a=document.createTextNode(i),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(a,o[e]):t.appendChild(a)}}function p(t,e,n){var r=n.css,i=n.media,a=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var v=null,h=0;function A(t,e){var n,r,i;if(e.singleton){var a=h++;n=v||(v=l(e)),r=d.bind(null,n,a,!1),i=d.bind(null,n,a,!0)}else n=l(e),r=p.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=i());var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=s(n[r]);o[i].references--}for(var a=c(t,e),l=0;l<n.length;l++){var u=s(n[l]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}n=a}}}},function(t,e,n){"use strict";function r(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],r=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){i=!0,a=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw a}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var e=r(t,4),n=e[1],i=e[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),s="/*# ".concat(o," */"),c=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[n].concat(c).concat([s]).join("\n")}return[n].join("\n")}},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},function(t,e,n){"use strict";function r(t,e,n,r,i,a,o,s){var c,l="function"==typeof t?t.options:t;if(e&&(l.render=e,l.staticRenderFns=n,l._compiled=!0),r&&(l.functional=!0),a&&(l._scopeId="data-v-"+a),o?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(o)},l._ssrRegister=c):i&&(c=s?function(){i.call(this,this.$root.$options.shadowRoot)}:i),c)if(l.functional){l._injectStyles=c;var u=l.render;l.render=function(t,e){return c.call(e),u(t,e)}}else{var f=l.beforeCreate;l.beforeCreate=f?[].concat(f,c):[c]}return{exports:t,options:l}}n.d(e,"a",(function(){return r}))},,function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"products product"},[n("div",{staticClass:"pro-col",attrs:{"data-v-0ef3150e":""}},[n("h4",{staticClass:"pro-group-title",attrs:{"data-v-0ef3150e":""}},[t._v("智能用品")]),t._v(" "),n("div",{staticClass:"flex-row pro-block",attrs:{"data-v-0ef3150e":""}},[n("img",{staticClass:"pro-thumb",attrs:{"data-v-0ef3150e":"",src:"/img/1545100156_bcd7cf4cfdeae8b8df43dea36a52b3c9.png",alt:""}}),t._v(" "),n("div",{attrs:{"data-v-0ef3150e":""},on:{click:t.pro}},[n("h5",{staticClass:"pro-title pro-h5",attrs:{"data-v-0ef3150e":""}},[t._v("宠物饮水机")]),t._v(" "),n("p",{staticClass:"pro-summary kaiti",attrs:{"data-v-0ef3150e":""}},[t._v("呵护爱宠 健康饮水")])])]),n("br"),t._v(" "),t._m(0)]),t._v(" "),t._m(1),t._v(" "),t._m(2)])};r._withStripped=!0;var i={name:"products",data:function(){return{}},methods:{pro:function(){location.href="product.html"}},mounted:function(){}},a=n(0),o=n.n(a),s=n(8),c={insert:"head",singleton:!1},l=(o()(s.a,c),s.a.locals,n(3)),u=Object(l.a)(i,r,[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"flex-row pro-block",attrs:{"data-v-0ef3150e":""}},[e("img",{staticClass:"pro-thumb",attrs:{"data-v-0ef3150e":"",src:"/img/1569566741_5c3d477f9293108d105cc14faba2d9b2.png",alt:""}}),this._v(" "),e("div",{attrs:{"data-v-0ef3150e":""}},[e("h5",{staticClass:"pro-title pro-h5",attrs:{"data-v-0ef3150e":""}},[this._v("智能宠物零食机")]),this._v(" "),e("p",{staticClass:"pro-summary kaiti",attrs:{"data-v-0ef3150e":""}},[this._v("智能“逗猫” 远程“遛狗”")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"pro-col",attrs:{"data-v-0ef3150e":""}},[e("h4",{staticClass:"pro-group-title",attrs:{"data-v-0ef3150e":""}},[this._v("清洁")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"pro-col",attrs:{"data-v-0ef3150e":""}},[e("h4",{staticClass:"pro-group-title",attrs:{"data-v-0ef3150e":""}},[this._v("配件")]),this._v(" "),e("div",{staticClass:"flex-row pro-block",attrs:{"data-v-0ef3150e":""}},[e("img",{staticClass:"pro-thumb",attrs:{"data-v-0ef3150e":"",src:"/img/1545100779_5bfb0d5fa046511a64dc7cad9cff8d34.png",alt:""}}),this._v(" "),e("div",{attrs:{"data-v-0ef3150e":""}},[e("h5",{staticClass:"pro-title pro-h5",attrs:{"data-v-0ef3150e":""}},[this._v("宠物饮水机滤芯")]),this._v(" "),e("p",{staticClass:"pro-summary kaiti",attrs:{"data-v-0ef3150e":""}},[this._v("优质滤材 四重过滤")])])]),e("br")])}],!1,null,"a8e61a62",null);u.options.__file="src/component/products.vue";e.a=u.exports},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";(function(t,n){
/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({});function i(t){return null==t}function a(t){return null!=t}function o(t){return!0===t}function s(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function c(t){return null!==t&&"object"==typeof t}var l=Object.prototype.toString;function u(t){return"[object Object]"===l.call(t)}function f(t){return"[object RegExp]"===l.call(t)}function d(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function p(t){return a(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function v(t){return null==t?"":Array.isArray(t)||u(t)&&t.toString===l?JSON.stringify(t,null,2):String(t)}function h(t){var e=parseFloat(t);return isNaN(e)?t:e}function A(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var m=A("slot,component",!0),g=A("key,ref,slot,slot-scope,is");function y(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var _=Object.prototype.hasOwnProperty;function b(t,e){return _.call(t,e)}function C(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var x=/-(\w)/g,w=C((function(t){return t.replace(x,(function(t,e){return e?e.toUpperCase():""}))})),$=C((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),k=/\B([A-Z])/g,E=C((function(t){return t.replace(k,"-$1").toLowerCase()}));var O=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function S(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function T(t,e){for(var n in e)t[n]=e[n];return t}function I(t){for(var e={},n=0;n<t.length;n++)t[n]&&T(e,t[n]);return e}function j(t,e,n){}var B=function(t,e,n){return!1},D=function(t){return t};function M(t,e){if(t===e)return!0;var n=c(t),r=c(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var i=Array.isArray(t),a=Array.isArray(e);if(i&&a)return t.length===e.length&&t.every((function(t,n){return M(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(i||a)return!1;var o=Object.keys(t),s=Object.keys(e);return o.length===s.length&&o.every((function(n){return M(t[n],e[n])}))}catch(t){return!1}}function N(t,e){for(var n=0;n<t.length;n++)if(M(t[n],e))return n;return-1}function L(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var P=["component","directive","filter"],F=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],R={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:B,isReservedAttr:B,isUnknownElement:B,getTagNamespace:j,parsePlatformTagName:D,mustUseProp:B,async:!0,_lifecycleHooks:F},U=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function z(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function W(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var H=new RegExp("[^"+U.source+".$_\\d]");var V,Y="__proto__"in{},K="undefined"!=typeof window,q="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,J=q&&WXEnvironment.platform.toLowerCase(),G=K&&window.navigator.userAgent.toLowerCase(),Z=G&&/msie|trident/.test(G),X=G&&G.indexOf("msie 9.0")>0,Q=G&&G.indexOf("edge/")>0,tt=(G&&G.indexOf("android"),G&&/iphone|ipad|ipod|ios/.test(G)||"ios"===J),et=(G&&/chrome\/\d+/.test(G),G&&/phantomjs/.test(G),G&&G.match(/firefox\/(\d+)/)),nt={}.watch,rt=!1;if(K)try{var it={};Object.defineProperty(it,"passive",{get:function(){rt=!0}}),window.addEventListener("test-passive",null,it)}catch(t){}var at=function(){return void 0===V&&(V=!K&&!q&&void 0!==t&&(t.process&&"server"===t.process.env.VUE_ENV)),V},ot=K&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function st(t){return"function"==typeof t&&/native code/.test(t.toString())}var ct,lt="undefined"!=typeof Symbol&&st(Symbol)&&"undefined"!=typeof Reflect&&st(Reflect.ownKeys);ct="undefined"!=typeof Set&&st(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ut=j,ft=0,dt=function(){this.id=ft++,this.subs=[]};dt.prototype.addSub=function(t){this.subs.push(t)},dt.prototype.removeSub=function(t){y(this.subs,t)},dt.prototype.depend=function(){dt.target&&dt.target.addDep(this)},dt.prototype.notify=function(){var t=this.subs.slice();for(var e=0,n=t.length;e<n;e++)t[e].update()},dt.target=null;var pt=[];function vt(t){pt.push(t),dt.target=t}function ht(){pt.pop(),dt.target=pt[pt.length-1]}var At=function(t,e,n,r,i,a,o,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},mt={child:{configurable:!0}};mt.child.get=function(){return this.componentInstance},Object.defineProperties(At.prototype,mt);var gt=function(t){void 0===t&&(t="");var e=new At;return e.text=t,e.isComment=!0,e};function yt(t){return new At(void 0,void 0,void 0,String(t))}function _t(t){var e=new At(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var bt=Array.prototype,Ct=Object.create(bt);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(t){var e=bt[t];W(Ct,t,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,a=e.apply(this,n),o=this.__ob__;switch(t){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&o.observeArray(i),o.dep.notify(),a}))}));var xt=Object.getOwnPropertyNames(Ct),wt=!0;function $t(t){wt=t}var kt=function(t){this.value=t,this.dep=new dt,this.vmCount=0,W(t,"__ob__",this),Array.isArray(t)?(Y?function(t,e){t.__proto__=e}(t,Ct):function(t,e,n){for(var r=0,i=n.length;r<i;r++){var a=n[r];W(t,a,e[a])}}(t,Ct,xt),this.observeArray(t)):this.walk(t)};function Et(t,e){var n;if(c(t)&&!(t instanceof At))return b(t,"__ob__")&&t.__ob__ instanceof kt?n=t.__ob__:wt&&!at()&&(Array.isArray(t)||u(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new kt(t)),e&&n&&n.vmCount++,n}function Ot(t,e,n,r,i){var a=new dt,o=Object.getOwnPropertyDescriptor(t,e);if(!o||!1!==o.configurable){var s=o&&o.get,c=o&&o.set;s&&!c||2!==arguments.length||(n=t[e]);var l=!i&&Et(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return dt.target&&(a.depend(),l&&(l.dep.depend(),Array.isArray(e)&&It(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!=e&&r!=r||s&&!c||(c?c.call(t,e):n=e,l=!i&&Et(e),a.notify())}})}}function St(t,e,n){if(Array.isArray(t)&&d(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(Ot(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function Tt(t,e){if(Array.isArray(t)&&d(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||b(t,e)&&(delete t[e],n&&n.dep.notify())}}function It(t){for(var e=void 0,n=0,r=t.length;n<r;n++)(e=t[n])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&It(e)}kt.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Ot(t,e[n])},kt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)Et(t[e])};var jt=R.optionMergeStrategies;function Bt(t,e){if(!e)return t;for(var n,r,i,a=lt?Reflect.ownKeys(e):Object.keys(e),o=0;o<a.length;o++)"__ob__"!==(n=a[o])&&(r=t[n],i=e[n],b(t,n)?r!==i&&u(r)&&u(i)&&Bt(r,i):St(t,n,i));return t}function Dt(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,i="function"==typeof t?t.call(n,n):t;return r?Bt(r,i):i}:e?t?function(){return Bt("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function Mt(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function Nt(t,e,n,r){var i=Object.create(t||null);return e?T(i,e):i}jt.data=function(t,e,n){return n?Dt(t,e,n):e&&"function"!=typeof e?t:Dt(t,e)},F.forEach((function(t){jt[t]=Mt})),P.forEach((function(t){jt[t+"s"]=Nt})),jt.watch=function(t,e,n,r){if(t===nt&&(t=void 0),e===nt&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var i={};for(var a in T(i,t),e){var o=i[a],s=e[a];o&&!Array.isArray(o)&&(o=[o]),i[a]=o?o.concat(s):Array.isArray(s)?s:[s]}return i},jt.props=jt.methods=jt.inject=jt.computed=function(t,e,n,r){if(!t)return e;var i=Object.create(null);return T(i,t),e&&T(i,e),i},jt.provide=Dt;var Lt=function(t,e){return void 0===e?t:e};function Pt(t,e,n){if("function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,i,a={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(i=n[r])&&(a[w(i)]={type:null});else if(u(n))for(var o in n)i=n[o],a[w(o)]=u(i)?i:{type:i};else 0;t.props=a}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(u(n))for(var a in n){var o=n[a];r[a]=u(o)?T({from:a},o):{from:o}}else 0}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(t=Pt(t,e.extends,n)),e.mixins))for(var r=0,i=e.mixins.length;r<i;r++)t=Pt(t,e.mixins[r],n);var a,o={};for(a in t)s(a);for(a in e)b(t,a)||s(a);function s(r){var i=jt[r]||Lt;o[r]=i(t[r],e[r],n,r)}return o}function Ft(t,e,n,r){if("string"==typeof n){var i=t[e];if(b(i,n))return i[n];var a=w(n);if(b(i,a))return i[a];var o=$(a);return b(i,o)?i[o]:i[n]||i[a]||i[o]}}function Rt(t,e,n,r){var i=e[t],a=!b(n,t),o=n[t],s=Wt(Boolean,i.type);if(s>-1)if(a&&!b(i,"default"))o=!1;else if(""===o||o===E(t)){var c=Wt(String,i.type);(c<0||s<c)&&(o=!0)}if(void 0===o){o=function(t,e,n){if(!b(e,"default"))return;var r=e.default;0;if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==Ut(e.type)?r.call(t):r}(r,i,t);var l=wt;$t(!0),Et(o),$t(l)}return o}function Ut(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function zt(t,e){return Ut(t)===Ut(e)}function Wt(t,e){if(!Array.isArray(e))return zt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(zt(e[n],t))return n;return-1}function Ht(t,e,n){vt();try{if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var a=0;a<i.length;a++)try{if(!1===i[a].call(r,t,e,n))return}catch(t){Yt(t,r,"errorCaptured hook")}}Yt(t,e,n)}finally{ht()}}function Vt(t,e,n,r,i){var a;try{(a=n?t.apply(e,n):t.call(e))&&!a._isVue&&p(a)&&!a._handled&&(a.catch((function(t){return Ht(t,r,i+" (Promise/async)")})),a._handled=!0)}catch(t){Ht(t,r,i)}return a}function Yt(t,e,n){if(R.errorHandler)try{return R.errorHandler.call(null,t,e,n)}catch(e){e!==t&&Kt(e,null,"config.errorHandler")}Kt(t,e,n)}function Kt(t,e,n){if(!K&&!q||"undefined"==typeof console)throw t;console.error(t)}var qt,Jt=!1,Gt=[],Zt=!1;function Xt(){Zt=!1;var t=Gt.slice(0);Gt.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&st(Promise)){var Qt=Promise.resolve();qt=function(){Qt.then(Xt),tt&&setTimeout(j)},Jt=!0}else if(Z||"undefined"==typeof MutationObserver||!st(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())qt=void 0!==n&&st(n)?function(){n(Xt)}:function(){setTimeout(Xt,0)};else{var te=1,ee=new MutationObserver(Xt),ne=document.createTextNode(String(te));ee.observe(ne,{characterData:!0}),qt=function(){te=(te+1)%2,ne.data=String(te)},Jt=!0}function re(t,e){var n;if(Gt.push((function(){if(t)try{t.call(e)}catch(t){Ht(t,e,"nextTick")}else n&&n(e)})),Zt||(Zt=!0,qt()),!t&&"undefined"!=typeof Promise)return new Promise((function(t){n=t}))}var ie=new ct;function ae(t){!function t(e,n){var r,i,a=Array.isArray(e);if(!a&&!c(e)||Object.isFrozen(e)||e instanceof At)return;if(e.__ob__){var o=e.__ob__.dep.id;if(n.has(o))return;n.add(o)}if(a)for(r=e.length;r--;)t(e[r],n);else for(i=Object.keys(e),r=i.length;r--;)t(e[i[r]],n)}(t,ie),ie.clear()}var oe=C((function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}}));function se(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return Vt(r,null,arguments,e,"v-on handler");for(var i=r.slice(),a=0;a<i.length;a++)Vt(i[a],null,t,e,"v-on handler")}return n.fns=t,n}function ce(t,e,n,r,a,s){var c,l,u,f;for(c in t)l=t[c],u=e[c],f=oe(c),i(l)||(i(u)?(i(l.fns)&&(l=t[c]=se(l,s)),o(f.once)&&(l=t[c]=a(f.name,l,f.capture)),n(f.name,l,f.capture,f.passive,f.params)):l!==u&&(u.fns=l,t[c]=u));for(c in e)i(t[c])&&r((f=oe(c)).name,e[c],f.capture)}function le(t,e,n){var r;t instanceof At&&(t=t.data.hook||(t.data.hook={}));var s=t[e];function c(){n.apply(this,arguments),y(r.fns,c)}i(s)?r=se([c]):a(s.fns)&&o(s.merged)?(r=s).fns.push(c):r=se([s,c]),r.merged=!0,t[e]=r}function ue(t,e,n,r,i){if(a(e)){if(b(e,n))return t[n]=e[n],i||delete e[n],!0;if(b(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function fe(t){return s(t)?[yt(t)]:Array.isArray(t)?function t(e,n){var r,c,l,u,f=[];for(r=0;r<e.length;r++)i(c=e[r])||"boolean"==typeof c||(l=f.length-1,u=f[l],Array.isArray(c)?c.length>0&&(de((c=t(c,(n||"")+"_"+r))[0])&&de(u)&&(f[l]=yt(u.text+c[0].text),c.shift()),f.push.apply(f,c)):s(c)?de(u)?f[l]=yt(u.text+c):""!==c&&f.push(yt(c)):de(c)&&de(u)?f[l]=yt(u.text+c.text):(o(e._isVList)&&a(c.tag)&&i(c.key)&&a(n)&&(c.key="__vlist"+n+"_"+r+"__"),f.push(c)));return f}(t):void 0}function de(t){return a(t)&&a(t.text)&&!1===t.isComment}function pe(t,e){if(t){for(var n=Object.create(null),r=lt?Reflect.ownKeys(t):Object.keys(t),i=0;i<r.length;i++){var a=r[i];if("__ob__"!==a){for(var o=t[a].from,s=e;s;){if(s._provided&&b(s._provided,o)){n[a]=s._provided[o];break}s=s.$parent}if(!s)if("default"in t[a]){var c=t[a].default;n[a]="function"==typeof c?c.call(e):c}else 0}}return n}}function ve(t,e){if(!t||!t.length)return{};for(var n={},r=0,i=t.length;r<i;r++){var a=t[r],o=a.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,a.context!==e&&a.fnContext!==e||!o||null==o.slot)(n.default||(n.default=[])).push(a);else{var s=o.slot,c=n[s]||(n[s]=[]);"template"===a.tag?c.push.apply(c,a.children||[]):c.push(a)}}for(var l in n)n[l].every(he)&&delete n[l];return n}function he(t){return t.isComment&&!t.asyncFactory||" "===t.text}function Ae(t,e,n){var i,a=Object.keys(e).length>0,o=t?!!t.$stable:!a,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(o&&n&&n!==r&&s===n.$key&&!a&&!n.$hasNormal)return n;for(var c in i={},t)t[c]&&"$"!==c[0]&&(i[c]=me(e,c,t[c]))}else i={};for(var l in e)l in i||(i[l]=ge(e,l));return t&&Object.isExtensible(t)&&(t._normalized=i),W(i,"$stable",o),W(i,"$key",s),W(i,"$hasNormal",a),i}function me(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return(t=t&&"object"==typeof t&&!Array.isArray(t)?[t]:fe(t))&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function ge(t,e){return function(){return t[e]}}function ye(t,e){var n,r,i,o,s;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(c(t))if(lt&&t[Symbol.iterator]){n=[];for(var l=t[Symbol.iterator](),u=l.next();!u.done;)n.push(e(u.value,n.length)),u=l.next()}else for(o=Object.keys(t),n=new Array(o.length),r=0,i=o.length;r<i;r++)s=o[r],n[r]=e(t[s],s,r);return a(n)||(n=[]),n._isVList=!0,n}function _e(t,e,n,r){var i,a=this.$scopedSlots[t];a?(n=n||{},r&&(n=T(T({},r),n)),i=a(n)||e):i=this.$slots[t]||e;var o=n&&n.slot;return o?this.$createElement("template",{slot:o},i):i}function be(t){return Ft(this.$options,"filters",t)||D}function Ce(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function xe(t,e,n,r,i){var a=R.keyCodes[e]||n;return i&&r&&!R.keyCodes[e]?Ce(i,r):a?Ce(a,t):r?E(r)!==e:void 0}function we(t,e,n,r,i){if(n)if(c(n)){var a;Array.isArray(n)&&(n=I(n));var o=function(o){if("class"===o||"style"===o||g(o))a=t;else{var s=t.attrs&&t.attrs.type;a=r||R.mustUseProp(e,s,o)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=w(o),l=E(o);c in a||l in a||(a[o]=n[o],i&&((t.on||(t.on={}))["update:"+o]=function(t){n[o]=t}))};for(var s in n)o(s)}else;return t}function $e(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||Ee(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r}function ke(t,e,n){return Ee(t,"__once__"+e+(n?"_"+n:""),!0),t}function Ee(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Oe(t[r],e+"_"+r,n);else Oe(t,e,n)}function Oe(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function Se(t,e){if(e)if(u(e)){var n=t.on=t.on?T({},t.on):{};for(var r in e){var i=n[r],a=e[r];n[r]=i?[].concat(i,a):a}}else;return t}function Te(t,e,n,r){e=e||{$stable:!n};for(var i=0;i<t.length;i++){var a=t[i];Array.isArray(a)?Te(a,e,n):a&&(a.proxy&&(a.fn.proxy=!0),e[a.key]=a.fn)}return r&&(e.$key=r),e}function Ie(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"==typeof r&&r&&(t[e[n]]=e[n+1])}return t}function je(t,e){return"string"==typeof t?e+t:t}function Be(t){t._o=ke,t._n=h,t._s=v,t._l=ye,t._t=_e,t._q=M,t._i=N,t._m=$e,t._f=be,t._k=xe,t._b=we,t._v=yt,t._e=gt,t._u=Te,t._g=Se,t._d=Ie,t._p=je}function De(t,e,n,i,a){var s,c=this,l=a.options;b(i,"_uid")?(s=Object.create(i))._original=i:(s=i,i=i._original);var u=o(l._compiled),f=!u;this.data=t,this.props=e,this.children=n,this.parent=i,this.listeners=t.on||r,this.injections=pe(l.inject,i),this.slots=function(){return c.$slots||Ae(t.scopedSlots,c.$slots=ve(n,i)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return Ae(t.scopedSlots,this.slots())}}),u&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=Ae(t.scopedSlots,this.$slots)),l._scopeId?this._c=function(t,e,n,r){var a=Ue(s,t,e,n,r,f);return a&&!Array.isArray(a)&&(a.fnScopeId=l._scopeId,a.fnContext=i),a}:this._c=function(t,e,n,r){return Ue(s,t,e,n,r,f)}}function Me(t,e,n,r,i){var a=_t(t);return a.fnContext=n,a.fnOptions=r,e.slot&&((a.data||(a.data={})).slot=e.slot),a}function Ne(t,e){for(var n in e)t[w(n)]=e[n]}Be(De.prototype);var Le={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;Le.prepatch(n,n)}else{(t.componentInstance=function(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;a(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new t.componentOptions.Ctor(n)}(t,Ze)).$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,i,a){0;var o=i.data.scopedSlots,s=t.$scopedSlots,c=!!(o&&!o.$stable||s!==r&&!s.$stable||o&&t.$scopedSlots.$key!==o.$key),l=!!(a||t.$options._renderChildren||c);t.$options._parentVnode=i,t.$vnode=i,t._vnode&&(t._vnode.parent=i);if(t.$options._renderChildren=a,t.$attrs=i.data.attrs||r,t.$listeners=n||r,e&&t.$options.props){$t(!1);for(var u=t._props,f=t.$options._propKeys||[],d=0;d<f.length;d++){var p=f[d],v=t.$options.props;u[p]=Rt(p,v,e,t)}$t(!0),t.$options.propsData=e}n=n||r;var h=t.$options._parentListeners;t.$options._parentListeners=n,Ge(t,n,h),l&&(t.$slots=ve(a,i.context),t.$forceUpdate());0}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,en(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,rn.push(e)):tn(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(n&&(e._directInactive=!0,Qe(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);en(e,"deactivated")}}(e,!0):e.$destroy())}},Pe=Object.keys(Le);function Fe(t,e,n,s,l){if(!i(t)){var u=n.$options._base;if(c(t)&&(t=u.extend(t)),"function"==typeof t){var f;if(i(t.cid)&&void 0===(t=function(t,e){if(o(t.error)&&a(t.errorComp))return t.errorComp;if(a(t.resolved))return t.resolved;var n=We;n&&a(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n);if(o(t.loading)&&a(t.loadingComp))return t.loadingComp;if(n&&!a(t.owners)){var r=t.owners=[n],s=!0,l=null,u=null;n.$on("hook:destroyed",(function(){return y(r,n)}));var f=function(t){for(var e=0,n=r.length;e<n;e++)r[e].$forceUpdate();t&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==u&&(clearTimeout(u),u=null))},d=L((function(n){t.resolved=He(n,e),s?r.length=0:f(!0)})),v=L((function(e){a(t.errorComp)&&(t.error=!0,f(!0))})),h=t(d,v);return c(h)&&(p(h)?i(t.resolved)&&h.then(d,v):p(h.component)&&(h.component.then(d,v),a(h.error)&&(t.errorComp=He(h.error,e)),a(h.loading)&&(t.loadingComp=He(h.loading,e),0===h.delay?t.loading=!0:l=setTimeout((function(){l=null,i(t.resolved)&&i(t.error)&&(t.loading=!0,f(!1))}),h.delay||200)),a(h.timeout)&&(u=setTimeout((function(){u=null,i(t.resolved)&&v(null)}),h.timeout)))),s=!1,t.loading?t.loadingComp:t.resolved}}(f=t,u)))return function(t,e,n,r,i){var a=gt();return a.asyncFactory=t,a.asyncMeta={data:e,context:n,children:r,tag:i},a}(f,e,n,s,l);e=e||{},wn(t),a(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var i=e.on||(e.on={}),o=i[r],s=e.model.callback;a(o)?(Array.isArray(o)?-1===o.indexOf(s):o!==s)&&(i[r]=[s].concat(o)):i[r]=s}(t.options,e);var d=function(t,e,n){var r=e.options.props;if(!i(r)){var o={},s=t.attrs,c=t.props;if(a(s)||a(c))for(var l in r){var u=E(l);ue(o,c,l,u,!0)||ue(o,s,l,u,!1)}return o}}(e,t);if(o(t.options.functional))return function(t,e,n,i,o){var s=t.options,c={},l=s.props;if(a(l))for(var u in l)c[u]=Rt(u,l,e||r);else a(n.attrs)&&Ne(c,n.attrs),a(n.props)&&Ne(c,n.props);var f=new De(n,c,o,i,t),d=s.render.call(null,f._c,f);if(d instanceof At)return Me(d,n,f.parent,s,f);if(Array.isArray(d)){for(var p=fe(d)||[],v=new Array(p.length),h=0;h<p.length;h++)v[h]=Me(p[h],n,f.parent,s,f);return v}}(t,d,e,n,s);var v=e.on;if(e.on=e.nativeOn,o(t.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<Pe.length;n++){var r=Pe[n],i=e[r],a=Le[r];i===a||i&&i._merged||(e[r]=i?Re(a,i):a)}}(e);var A=t.options.name||l;return new At("vue-component-"+t.cid+(A?"-"+A:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:d,listeners:v,tag:l,children:s},f)}}}function Re(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function Ue(t,e,n,r,l,u){return(Array.isArray(n)||s(n))&&(l=r,r=n,n=void 0),o(u)&&(l=2),function(t,e,n,r,s){if(a(n)&&a(n.__ob__))return gt();a(n)&&a(n.is)&&(e=n.is);if(!e)return gt();0;Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);2===s?r=fe(r):1===s&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r));var l,u;if("string"==typeof e){var f;u=t.$vnode&&t.$vnode.ns||R.getTagNamespace(e),l=R.isReservedTag(e)?new At(R.parsePlatformTagName(e),n,r,void 0,void 0,t):n&&n.pre||!a(f=Ft(t.$options,"components",e))?new At(e,n,r,void 0,void 0,t):Fe(f,n,t,r,e)}else l=Fe(e,n,t,r);return Array.isArray(l)?l:a(l)?(a(u)&&function t(e,n,r){e.ns=n,"foreignObject"===e.tag&&(n=void 0,r=!0);if(a(e.children))for(var s=0,c=e.children.length;s<c;s++){var l=e.children[s];a(l.tag)&&(i(l.ns)||o(r)&&"svg"!==l.tag)&&t(l,n,r)}}(l,u),a(n)&&function(t){c(t.style)&&ae(t.style);c(t.class)&&ae(t.class)}(n),l):gt()}(t,e,n,r,l)}var ze,We=null;function He(t,e){return(t.__esModule||lt&&"Module"===t[Symbol.toStringTag])&&(t=t.default),c(t)?e.extend(t):t}function Ve(t){return t.isComment&&t.asyncFactory}function Ye(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(a(n)&&(a(n.componentOptions)||Ve(n)))return n}}function Ke(t,e){ze.$on(t,e)}function qe(t,e){ze.$off(t,e)}function Je(t,e){var n=ze;return function r(){var i=e.apply(null,arguments);null!==i&&n.$off(t,r)}}function Ge(t,e,n){ze=t,ce(e,n||{},Ke,qe,Je,t),ze=void 0}var Ze=null;function Xe(t){var e=Ze;return Ze=t,function(){Ze=e}}function Qe(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function tn(t,e){if(e){if(t._directInactive=!1,Qe(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)tn(t.$children[n]);en(t,"activated")}}function en(t,e){vt();var n=t.$options[e],r=e+" hook";if(n)for(var i=0,a=n.length;i<a;i++)Vt(n[i],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),ht()}var nn=[],rn=[],an={},on=!1,sn=!1,cn=0;var ln=0,un=Date.now;if(K&&!Z){var fn=window.performance;fn&&"function"==typeof fn.now&&un()>document.createEvent("Event").timeStamp&&(un=function(){return fn.now()})}function dn(){var t,e;for(ln=un(),sn=!0,nn.sort((function(t,e){return t.id-e.id})),cn=0;cn<nn.length;cn++)(t=nn[cn]).before&&t.before(),e=t.id,an[e]=null,t.run();var n=rn.slice(),r=nn.slice();cn=nn.length=rn.length=0,an={},on=sn=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,tn(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&en(r,"updated")}}(r),ot&&R.devtools&&ot.emit("flush")}var pn=0,vn=function(t,e,n,r,i){this.vm=t,i&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++pn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ct,this.newDepIds=new ct,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!H.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=j)),this.value=this.lazy?void 0:this.get()};vn.prototype.get=function(){var t;vt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;Ht(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ae(t),ht(),this.cleanupDeps()}return t},vn.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},vn.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},vn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==an[e]){if(an[e]=!0,sn){for(var n=nn.length-1;n>cn&&nn[n].id>t.id;)n--;nn.splice(n+1,0,t)}else nn.push(t);on||(on=!0,re(dn))}}(this)},vn.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||c(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){Ht(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},vn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},vn.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},vn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||y(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var hn={enumerable:!0,configurable:!0,get:j,set:j};function An(t,e,n){hn.get=function(){return this[e][n]},hn.set=function(t){this[e][n]=t},Object.defineProperty(t,n,hn)}function mn(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},i=t.$options._propKeys=[];t.$parent&&$t(!1);var a=function(a){i.push(a);var o=Rt(a,e,n,t);Ot(r,a,o),a in t||An(t,"_props",a)};for(var o in e)a(o);$t(!0)}(t,e.props),e.methods&&function(t,e){t.$options.props;for(var n in e)t[n]="function"!=typeof e[n]?j:O(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;u(e=t._data="function"==typeof e?function(t,e){vt();try{return t.call(e,e)}catch(t){return Ht(t,e,"data()"),{}}finally{ht()}}(e,t):e||{})||(e={});var n=Object.keys(e),r=t.$options.props,i=(t.$options.methods,n.length);for(;i--;){var a=n[i];0,r&&b(r,a)||z(a)||An(t,"_data",a)}Et(e,!0)}(t):Et(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=at();for(var i in e){var a=e[i],o="function"==typeof a?a:a.get;0,r||(n[i]=new vn(t,o||j,j,gn)),i in t||yn(t,i,a)}}(t,e.computed),e.watch&&e.watch!==nt&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)Cn(t,n,r[i]);else Cn(t,n,r)}}(t,e.watch)}var gn={lazy:!0};function yn(t,e,n){var r=!at();"function"==typeof n?(hn.get=r?_n(e):bn(n),hn.set=j):(hn.get=n.get?r&&!1!==n.cache?_n(e):bn(n.get):j,hn.set=n.set||j),Object.defineProperty(t,e,hn)}function _n(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),dt.target&&e.depend(),e.value}}function bn(t){return function(){return t.call(this,this)}}function Cn(t,e,n,r){return u(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}var xn=0;function wn(t){var e=t.options;if(t.super){var n=wn(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.sealedOptions;for(var i in n)n[i]!==r[i]&&(e||(e={}),e[i]=n[i]);return e}(t);r&&T(t.extendOptions,r),(e=t.options=Pt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function $n(t){this._init(t)}function kn(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,i=t._Ctor||(t._Ctor={});if(i[r])return i[r];var a=t.name||n.options.name;var o=function(t){this._init(t)};return(o.prototype=Object.create(n.prototype)).constructor=o,o.cid=e++,o.options=Pt(n.options,t),o.super=n,o.options.props&&function(t){var e=t.options.props;for(var n in e)An(t.prototype,"_props",n)}(o),o.options.computed&&function(t){var e=t.options.computed;for(var n in e)yn(t.prototype,n,e[n])}(o),o.extend=n.extend,o.mixin=n.mixin,o.use=n.use,P.forEach((function(t){o[t]=n[t]})),a&&(o.options.components[a]=o),o.superOptions=n.options,o.extendOptions=t,o.sealedOptions=T({},o.options),i[r]=o,o}}function En(t){return t&&(t.Ctor.options.name||t.tag)}function On(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!f(t)&&t.test(e)}function Sn(t,e){var n=t.cache,r=t.keys,i=t._vnode;for(var a in n){var o=n[a];if(o){var s=En(o.componentOptions);s&&!e(s)&&Tn(n,a,r,i)}}}function Tn(t,e,n,r){var i=t[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),t[e]=null,y(n,e)}!function(t){t.prototype._init=function(t){var e=this;e._uid=xn++,e._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(e,t):e.$options=Pt(wn(e.constructor),t||{},e),e._renderProxy=e,e._self=e,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(e),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Ge(t,e)}(e),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,i=n&&n.context;t.$slots=ve(e._renderChildren,i),t.$scopedSlots=r,t._c=function(e,n,r,i){return Ue(t,e,n,r,i,!1)},t.$createElement=function(e,n,r,i){return Ue(t,e,n,r,i,!0)};var a=n&&n.data;Ot(t,"$attrs",a&&a.attrs||r,null,!0),Ot(t,"$listeners",e._parentListeners||r,null,!0)}(e),en(e,"beforeCreate"),function(t){var e=pe(t.$options.inject,t);e&&($t(!1),Object.keys(e).forEach((function(n){Ot(t,n,e[n])})),$t(!0))}(e),mn(e),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(e),en(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}($n),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=St,t.prototype.$delete=Tt,t.prototype.$watch=function(t,e,n){if(u(e))return Cn(this,t,e,n);(n=n||{}).user=!0;var r=new vn(this,t,e,n);if(n.immediate)try{e.call(this,r.value)}catch(t){Ht(t,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}($n),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var i=0,a=t.length;i<a;i++)r.$on(t[i],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,i=t.length;r<i;r++)n.$off(t[r],e);return n}var a,o=n._events[t];if(!o)return n;if(!e)return n._events[t]=null,n;for(var s=o.length;s--;)if((a=o[s])===e||a.fn===e){o.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?S(n):n;for(var r=S(arguments,1),i='event handler for "'+t+'"',a=0,o=n.length;a<o;a++)Vt(n[a],e,r,e,i)}return e}}($n),function(t){t.prototype._update=function(t,e){var n=this,r=n.$el,i=n._vnode,a=Xe(n);n._vnode=t,n.$el=i?n.__patch__(i,t):n.__patch__(n.$el,t,e,!1),a(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){en(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||y(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),en(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}($n),function(t){Be(t.prototype),t.prototype.$nextTick=function(t){return re(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,i=n._parentVnode;i&&(e.$scopedSlots=Ae(i.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=i;try{We=e,t=r.call(e._renderProxy,e.$createElement)}catch(n){Ht(n,e,"render"),t=e._vnode}finally{We=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof At||(t=gt()),t.parent=i,t}}($n);var In=[String,RegExp,Array],jn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:In,exclude:In,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)Tn(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",(function(e){Sn(t,(function(t){return On(e,t)}))})),this.$watch("exclude",(function(e){Sn(t,(function(t){return!On(e,t)}))}))},render:function(){var t=this.$slots.default,e=Ye(t),n=e&&e.componentOptions;if(n){var r=En(n),i=this.include,a=this.exclude;if(i&&(!r||!On(i,r))||a&&r&&On(a,r))return e;var o=this.cache,s=this.keys,c=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;o[c]?(e.componentInstance=o[c].componentInstance,y(s,c),s.push(c)):(o[c]=e,s.push(c),this.max&&s.length>parseInt(this.max)&&Tn(o,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return R}};Object.defineProperty(t,"config",e),t.util={warn:ut,extend:T,mergeOptions:Pt,defineReactive:Ot},t.set=St,t.delete=Tt,t.nextTick=re,t.observable=function(t){return Et(t),t},t.options=Object.create(null),P.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,T(t.options.components,jn),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=S(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Pt(this.options,t),this}}(t),kn(t),function(t){P.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&u(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}(t)}($n),Object.defineProperty($n.prototype,"$isServer",{get:at}),Object.defineProperty($n.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty($n,"FunctionalRenderContext",{value:De}),$n.version="2.6.10";var Bn=A("style,class"),Dn=A("input,textarea,option,select,progress"),Mn=function(t,e,n){return"value"===n&&Dn(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Nn=A("contenteditable,draggable,spellcheck"),Ln=A("events,caret,typing,plaintext-only"),Pn=A("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Fn="http://www.w3.org/1999/xlink",Rn=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Un=function(t){return Rn(t)?t.slice(6,t.length):""},zn=function(t){return null==t||!1===t};function Wn(t){for(var e=t.data,n=t,r=t;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Hn(r.data,e));for(;a(n=n.parent);)n&&n.data&&(e=Hn(e,n.data));return function(t,e){if(a(t)||a(e))return Vn(t,Yn(e));return""}(e.staticClass,e.class)}function Hn(t,e){return{staticClass:Vn(t.staticClass,e.staticClass),class:a(t.class)?[t.class,e.class]:e.class}}function Vn(t,e){return t?e?t+" "+e:t:e||""}function Yn(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,i=t.length;r<i;r++)a(e=Yn(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):c(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Kn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},qn=A("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Jn=A("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Gn=function(t){return qn(t)||Jn(t)};function Zn(t){return Jn(t)?"svg":"math"===t?"math":void 0}var Xn=Object.create(null);var Qn=A("text,number,password,search,email,tel,url");function tr(t){if("string"==typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}var er=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(t,e){return document.createElementNS(Kn[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),nr={create:function(t,e){rr(e)},update:function(t,e){t.data.ref!==e.data.ref&&(rr(t,!0),rr(e))},destroy:function(t){rr(t,!0)}};function rr(t,e){var n=t.data.ref;if(a(n)){var r=t.context,i=t.componentInstance||t.elm,o=r.$refs;e?Array.isArray(o[n])?y(o[n],i):o[n]===i&&(o[n]=void 0):t.data.refInFor?Array.isArray(o[n])?o[n].indexOf(i)<0&&o[n].push(i):o[n]=[i]:o[n]=i}}var ir=new At("",{},[]),ar=["create","activate","update","remove","destroy"];function or(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&a(t.data)===a(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=a(n=t.data)&&a(n=n.attrs)&&n.type,i=a(n=e.data)&&a(n=n.attrs)&&n.type;return r===i||Qn(r)&&Qn(i)}(t,e)||o(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&i(e.asyncFactory.error))}function sr(t,e,n){var r,i,o={};for(r=e;r<=n;++r)a(i=t[r].key)&&(o[i]=r);return o}var cr={create:lr,update:lr,destroy:function(t){lr(t,ir)}};function lr(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,i,a=t===ir,o=e===ir,s=fr(t.data.directives,t.context),c=fr(e.data.directives,e.context),l=[],u=[];for(n in c)r=s[n],i=c[n],r?(i.oldValue=r.value,i.oldArg=r.arg,pr(i,"update",e,t),i.def&&i.def.componentUpdated&&u.push(i)):(pr(i,"bind",e,t),i.def&&i.def.inserted&&l.push(i));if(l.length){var f=function(){for(var n=0;n<l.length;n++)pr(l[n],"inserted",e,t)};a?le(e,"insert",f):f()}u.length&&le(e,"postpatch",(function(){for(var n=0;n<u.length;n++)pr(u[n],"componentUpdated",e,t)}));if(!a)for(n in s)c[n]||pr(s[n],"unbind",t,t,o)}(t,e)}var ur=Object.create(null);function fr(t,e){var n,r,i=Object.create(null);if(!t)return i;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=ur),i[dr(r)]=r,r.def=Ft(e.$options,"directives",r.name);return i}function dr(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function pr(t,e,n,r,i){var a=t.def&&t.def[e];if(a)try{a(n.elm,t,n,r,i)}catch(r){Ht(r,n.context,"directive "+t.name+" "+e+" hook")}}var vr=[nr,cr];function hr(t,e){var n=e.componentOptions;if(!(a(n)&&!1===n.Ctor.options.inheritAttrs||i(t.data.attrs)&&i(e.data.attrs))){var r,o,s=e.elm,c=t.data.attrs||{},l=e.data.attrs||{};for(r in a(l.__ob__)&&(l=e.data.attrs=T({},l)),l)o=l[r],c[r]!==o&&Ar(s,r,o);for(r in(Z||Q)&&l.value!==c.value&&Ar(s,"value",l.value),c)i(l[r])&&(Rn(r)?s.removeAttributeNS(Fn,Un(r)):Nn(r)||s.removeAttribute(r))}}function Ar(t,e,n){t.tagName.indexOf("-")>-1?mr(t,e,n):Pn(e)?zn(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Nn(e)?t.setAttribute(e,function(t,e){return zn(e)||"false"===e?"false":"contenteditable"===t&&Ln(e)?e:"true"}(e,n)):Rn(e)?zn(n)?t.removeAttributeNS(Fn,Un(e)):t.setAttributeNS(Fn,e,n):mr(t,e,n)}function mr(t,e,n){if(zn(n))t.removeAttribute(e);else{if(Z&&!X&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var gr={create:hr,update:hr};function yr(t,e){var n=e.elm,r=e.data,o=t.data;if(!(i(r.staticClass)&&i(r.class)&&(i(o)||i(o.staticClass)&&i(o.class)))){var s=Wn(e),c=n._transitionClasses;a(c)&&(s=Vn(s,Yn(c))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var _r,br,Cr,xr,wr,$r,kr={create:yr,update:yr},Er=/[\w).+\-_$\]]/;function Or(t){var e,n,r,i,a,o=!1,s=!1,c=!1,l=!1,u=0,f=0,d=0,p=0;for(r=0;r<t.length;r++)if(n=e,e=t.charCodeAt(r),o)39===e&&92!==n&&(o=!1);else if(s)34===e&&92!==n&&(s=!1);else if(c)96===e&&92!==n&&(c=!1);else if(l)47===e&&92!==n&&(l=!1);else if(124!==e||124===t.charCodeAt(r+1)||124===t.charCodeAt(r-1)||u||f||d){switch(e){case 34:s=!0;break;case 39:o=!0;break;case 96:c=!0;break;case 40:d++;break;case 41:d--;break;case 91:f++;break;case 93:f--;break;case 123:u++;break;case 125:u--}if(47===e){for(var v=r-1,h=void 0;v>=0&&" "===(h=t.charAt(v));v--);h&&Er.test(h)||(l=!0)}}else void 0===i?(p=r+1,i=t.slice(0,r).trim()):A();function A(){(a||(a=[])).push(t.slice(p,r).trim()),p=r+1}if(void 0===i?i=t.slice(0,r).trim():0!==p&&A(),a)for(r=0;r<a.length;r++)i=Sr(i,a[r]);return i}function Sr(t,e){var n=e.indexOf("(");if(n<0)return'_f("'+e+'")('+t+")";var r=e.slice(0,n),i=e.slice(n+1);return'_f("'+r+'")('+t+(")"!==i?","+i:i)}function Tr(t,e){console.error("[Vue compiler]: "+t)}function Ir(t,e){return t?t.map((function(t){return t[e]})).filter((function(t){return t})):[]}function jr(t,e,n,r,i){(t.props||(t.props=[])).push(Ur({name:e,value:n,dynamic:i},r)),t.plain=!1}function Br(t,e,n,r,i){(i?t.dynamicAttrs||(t.dynamicAttrs=[]):t.attrs||(t.attrs=[])).push(Ur({name:e,value:n,dynamic:i},r)),t.plain=!1}function Dr(t,e,n,r){t.attrsMap[e]=n,t.attrsList.push(Ur({name:e,value:n},r))}function Mr(t,e,n,r,i,a,o,s){(t.directives||(t.directives=[])).push(Ur({name:e,rawName:n,value:r,arg:i,isDynamicArg:a,modifiers:o},s)),t.plain=!1}function Nr(t,e,n){return n?"_p("+e+',"'+t+'")':t+e}function Lr(t,e,n,i,a,o,s,c){var l;(i=i||r).right?c?e="("+e+")==='click'?'contextmenu':("+e+")":"click"===e&&(e="contextmenu",delete i.right):i.middle&&(c?e="("+e+")==='click'?'mouseup':("+e+")":"click"===e&&(e="mouseup")),i.capture&&(delete i.capture,e=Nr("!",e,c)),i.once&&(delete i.once,e=Nr("~",e,c)),i.passive&&(delete i.passive,e=Nr("&",e,c)),i.native?(delete i.native,l=t.nativeEvents||(t.nativeEvents={})):l=t.events||(t.events={});var u=Ur({value:n.trim(),dynamic:c},s);i!==r&&(u.modifiers=i);var f=l[e];Array.isArray(f)?a?f.unshift(u):f.push(u):l[e]=f?a?[u,f]:[f,u]:u,t.plain=!1}function Pr(t,e,n){var r=Fr(t,":"+e)||Fr(t,"v-bind:"+e);if(null!=r)return Or(r);if(!1!==n){var i=Fr(t,e);if(null!=i)return JSON.stringify(i)}}function Fr(t,e,n){var r;if(null!=(r=t.attrsMap[e]))for(var i=t.attrsList,a=0,o=i.length;a<o;a++)if(i[a].name===e){i.splice(a,1);break}return n&&delete t.attrsMap[e],r}function Rr(t,e){for(var n=t.attrsList,r=0,i=n.length;r<i;r++){var a=n[r];if(e.test(a.name))return n.splice(r,1),a}}function Ur(t,e){return e&&(null!=e.start&&(t.start=e.start),null!=e.end&&(t.end=e.end)),t}function zr(t,e,n){var r=n||{},i=r.number,a="$$v";r.trim&&(a="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(a="_n("+a+")");var o=Wr(e,a);t.model={value:"("+e+")",expression:JSON.stringify(e),callback:"function ($$v) {"+o+"}"}}function Wr(t,e){var n=function(t){if(t=t.trim(),_r=t.length,t.indexOf("[")<0||t.lastIndexOf("]")<_r-1)return(xr=t.lastIndexOf("."))>-1?{exp:t.slice(0,xr),key:'"'+t.slice(xr+1)+'"'}:{exp:t,key:null};br=t,xr=wr=$r=0;for(;!Vr();)Yr(Cr=Hr())?qr(Cr):91===Cr&&Kr(Cr);return{exp:t.slice(0,wr),key:t.slice(wr+1,$r)}}(t);return null===n.key?t+"="+e:"$set("+n.exp+", "+n.key+", "+e+")"}function Hr(){return br.charCodeAt(++xr)}function Vr(){return xr>=_r}function Yr(t){return 34===t||39===t}function Kr(t){var e=1;for(wr=xr;!Vr();)if(Yr(t=Hr()))qr(t);else if(91===t&&e++,93===t&&e--,0===e){$r=xr;break}}function qr(t){for(var e=t;!Vr()&&(t=Hr())!==e;);}var Jr;function Gr(t,e,n){var r=Jr;return function i(){var a=e.apply(null,arguments);null!==a&&Qr(t,i,n,r)}}var Zr=Jt&&!(et&&Number(et[1])<=53);function Xr(t,e,n,r){if(Zr){var i=ln,a=e;e=a._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=i||t.timeStamp<=0||t.target.ownerDocument!==document)return a.apply(this,arguments)}}Jr.addEventListener(t,e,rt?{capture:n,passive:r}:n)}function Qr(t,e,n,r){(r||Jr).removeEventListener(t,e._wrapper||e,n)}function ti(t,e){if(!i(t.data.on)||!i(e.data.on)){var n=e.data.on||{},r=t.data.on||{};Jr=e.elm,function(t){if(a(t.__r)){var e=Z?"change":"input";t[e]=[].concat(t.__r,t[e]||[]),delete t.__r}a(t.__c)&&(t.change=[].concat(t.__c,t.change||[]),delete t.__c)}(n),ce(n,r,Xr,Qr,Gr,e.context),Jr=void 0}}var ei,ni={create:ti,update:ti};function ri(t,e){if(!i(t.data.domProps)||!i(e.data.domProps)){var n,r,o=e.elm,s=t.data.domProps||{},c=e.data.domProps||{};for(n in a(c.__ob__)&&(c=e.data.domProps=T({},c)),s)n in c||(o[n]="");for(n in c){if(r=c[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===s[n])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===n&&"PROGRESS"!==o.tagName){o._value=r;var l=i(r)?"":String(r);ii(o,l)&&(o.value=l)}else if("innerHTML"===n&&Jn(o.tagName)&&i(o.innerHTML)){(ei=ei||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var u=ei.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;u.firstChild;)o.appendChild(u.firstChild)}else if(r!==s[n])try{o[n]=r}catch(t){}}}}function ii(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(a(r)){if(r.number)return h(n)!==h(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var ai={create:ri,update:ri},oi=C((function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach((function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function si(t){var e=ci(t.style);return t.staticStyle?T(t.staticStyle,e):e}function ci(t){return Array.isArray(t)?I(t):"string"==typeof t?oi(t):t}var li,ui=/^--/,fi=/\s*!important$/,di=function(t,e,n){if(ui.test(e))t.style.setProperty(e,n);else if(fi.test(n))t.style.setProperty(E(e),n.replace(fi,""),"important");else{var r=vi(e);if(Array.isArray(n))for(var i=0,a=n.length;i<a;i++)t.style[r]=n[i];else t.style[r]=n}},pi=["Webkit","Moz","ms"],vi=C((function(t){if(li=li||document.createElement("div").style,"filter"!==(t=w(t))&&t in li)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<pi.length;n++){var r=pi[n]+e;if(r in li)return r}}));function hi(t,e){var n=e.data,r=t.data;if(!(i(n.staticStyle)&&i(n.style)&&i(r.staticStyle)&&i(r.style))){var o,s,c=e.elm,l=r.staticStyle,u=r.normalizedStyle||r.style||{},f=l||u,d=ci(e.data.style)||{};e.data.normalizedStyle=a(d.__ob__)?T({},d):d;var p=function(t,e){var n,r={};if(e)for(var i=t;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=si(i.data))&&T(r,n);(n=si(t.data))&&T(r,n);for(var a=t;a=a.parent;)a.data&&(n=si(a.data))&&T(r,n);return r}(e,!0);for(s in f)i(p[s])&&di(c,s,"");for(s in p)(o=p[s])!==f[s]&&di(c,s,null==o?"":o)}}var Ai={create:hi,update:hi},mi=/\s+/;function gi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(mi).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function yi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(mi).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function _i(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&T(e,bi(t.name||"v")),T(e,t),e}return"string"==typeof t?bi(t):void 0}}var bi=C((function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}})),Ci=K&&!X,xi="transition",wi="transitionend",$i="animation",ki="animationend";Ci&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(xi="WebkitTransition",wi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&($i="WebkitAnimation",ki="webkitAnimationEnd"));var Ei=K?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Oi(t){Ei((function(){Ei(t)}))}function Si(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),gi(t,e))}function Ti(t,e){t._transitionClasses&&y(t._transitionClasses,e),yi(t,e)}function Ii(t,e,n){var r=Bi(t,e),i=r.type,a=r.timeout,o=r.propCount;if(!i)return n();var s="transition"===i?wi:ki,c=0,l=function(){t.removeEventListener(s,u),n()},u=function(e){e.target===t&&++c>=o&&l()};setTimeout((function(){c<o&&l()}),a+1),t.addEventListener(s,u)}var ji=/\b(transform|all)(,|$)/;function Bi(t,e){var n,r=window.getComputedStyle(t),i=(r[xi+"Delay"]||"").split(", "),a=(r[xi+"Duration"]||"").split(", "),o=Di(i,a),s=(r[$i+"Delay"]||"").split(", "),c=(r[$i+"Duration"]||"").split(", "),l=Di(s,c),u=0,f=0;return"transition"===e?o>0&&(n="transition",u=o,f=a.length):"animation"===e?l>0&&(n="animation",u=l,f=c.length):f=(n=(u=Math.max(o,l))>0?o>l?"transition":"animation":null)?"transition"===n?a.length:c.length:0,{type:n,timeout:u,propCount:f,hasTransform:"transition"===n&&ji.test(r[xi+"Property"])}}function Di(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return Mi(e)+Mi(t[n])})))}function Mi(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function Ni(t,e){var n=t.elm;a(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=_i(t.data.transition);if(!i(r)&&!a(n._enterCb)&&1===n.nodeType){for(var o=r.css,s=r.type,l=r.enterClass,u=r.enterToClass,f=r.enterActiveClass,d=r.appearClass,p=r.appearToClass,v=r.appearActiveClass,A=r.beforeEnter,m=r.enter,g=r.afterEnter,y=r.enterCancelled,_=r.beforeAppear,b=r.appear,C=r.afterAppear,x=r.appearCancelled,w=r.duration,$=Ze,k=Ze.$vnode;k&&k.parent;)$=k.context,k=k.parent;var E=!$._isMounted||!t.isRootInsert;if(!E||b||""===b){var O=E&&d?d:l,S=E&&v?v:f,T=E&&p?p:u,I=E&&_||A,j=E&&"function"==typeof b?b:m,B=E&&C||g,D=E&&x||y,M=h(c(w)?w.enter:w);0;var N=!1!==o&&!X,P=Fi(j),F=n._enterCb=L((function(){N&&(Ti(n,T),Ti(n,S)),F.cancelled?(N&&Ti(n,O),D&&D(n)):B&&B(n),n._enterCb=null}));t.data.show||le(t,"insert",(function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),j&&j(n,F)})),I&&I(n),N&&(Si(n,O),Si(n,S),Oi((function(){Ti(n,O),F.cancelled||(Si(n,T),P||(Pi(M)?setTimeout(F,M):Ii(n,s,F)))}))),t.data.show&&(e&&e(),j&&j(n,F)),N||P||F()}}}function Li(t,e){var n=t.elm;a(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=_i(t.data.transition);if(i(r)||1!==n.nodeType)return e();if(!a(n._leaveCb)){var o=r.css,s=r.type,l=r.leaveClass,u=r.leaveToClass,f=r.leaveActiveClass,d=r.beforeLeave,p=r.leave,v=r.afterLeave,A=r.leaveCancelled,m=r.delayLeave,g=r.duration,y=!1!==o&&!X,_=Fi(p),b=h(c(g)?g.leave:g);0;var C=n._leaveCb=L((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),y&&(Ti(n,u),Ti(n,f)),C.cancelled?(y&&Ti(n,l),A&&A(n)):(e(),v&&v(n)),n._leaveCb=null}));m?m(x):x()}function x(){C.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),d&&d(n),y&&(Si(n,l),Si(n,f),Oi((function(){Ti(n,l),C.cancelled||(Si(n,u),_||(Pi(b)?setTimeout(C,b):Ii(n,s,C)))}))),p&&p(n,C),y||_||C())}}function Pi(t){return"number"==typeof t&&!isNaN(t)}function Fi(t){if(i(t))return!1;var e=t.fns;return a(e)?Fi(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function Ri(t,e){!0!==e.data.show&&Ni(e)}var Ui=function(t){var e,n,r={},c=t.modules,l=t.nodeOps;for(e=0;e<ar.length;++e)for(r[ar[e]]=[],n=0;n<c.length;++n)a(c[n][ar[e]])&&r[ar[e]].push(c[n][ar[e]]);function u(t){var e=l.parentNode(t);a(e)&&l.removeChild(e,t)}function f(t,e,n,i,s,c,u){if(a(t.elm)&&a(c)&&(t=c[u]=_t(t)),t.isRootInsert=!s,!function(t,e,n,i){var s=t.data;if(a(s)){var c=a(t.componentInstance)&&s.keepAlive;if(a(s=s.hook)&&a(s=s.init)&&s(t,!1),a(t.componentInstance))return d(t,e),p(n,t.elm,i),o(c)&&function(t,e,n,i){var o,s=t;for(;s.componentInstance;)if(s=s.componentInstance._vnode,a(o=s.data)&&a(o=o.transition)){for(o=0;o<r.activate.length;++o)r.activate[o](ir,s);e.push(s);break}p(n,t.elm,i)}(t,e,n,i),!0}}(t,e,n,i)){var f=t.data,h=t.children,A=t.tag;a(A)?(t.elm=t.ns?l.createElementNS(t.ns,A):l.createElement(A,t),g(t),v(t,h,e),a(f)&&m(t,e),p(n,t.elm,i)):o(t.isComment)?(t.elm=l.createComment(t.text),p(n,t.elm,i)):(t.elm=l.createTextNode(t.text),p(n,t.elm,i))}}function d(t,e){a(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,h(t)?(m(t,e),g(t)):(rr(t),e.push(t))}function p(t,e,n){a(t)&&(a(n)?l.parentNode(n)===t&&l.insertBefore(t,e,n):l.appendChild(t,e))}function v(t,e,n){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)f(e[r],n,t.elm,null,!0,e,r)}else s(t.text)&&l.appendChild(t.elm,l.createTextNode(String(t.text)))}function h(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return a(t.tag)}function m(t,n){for(var i=0;i<r.create.length;++i)r.create[i](ir,t);a(e=t.data.hook)&&(a(e.create)&&e.create(ir,t),a(e.insert)&&n.push(t))}function g(t){var e;if(a(e=t.fnScopeId))l.setStyleScope(t.elm,e);else for(var n=t;n;)a(e=n.context)&&a(e=e.$options._scopeId)&&l.setStyleScope(t.elm,e),n=n.parent;a(e=Ze)&&e!==t.context&&e!==t.fnContext&&a(e=e.$options._scopeId)&&l.setStyleScope(t.elm,e)}function y(t,e,n,r,i,a){for(;r<=i;++r)f(n[r],a,t,e,!1,n,r)}function _(t){var e,n,i=t.data;if(a(i))for(a(e=i.hook)&&a(e=e.destroy)&&e(t),e=0;e<r.destroy.length;++e)r.destroy[e](t);if(a(e=t.children))for(n=0;n<t.children.length;++n)_(t.children[n])}function b(t,e,n,r){for(;n<=r;++n){var i=e[n];a(i)&&(a(i.tag)?(C(i),_(i)):u(i.elm))}}function C(t,e){if(a(e)||a(t.data)){var n,i=r.remove.length+1;for(a(e)?e.listeners+=i:e=function(t,e){function n(){0==--n.listeners&&u(t)}return n.listeners=e,n}(t.elm,i),a(n=t.componentInstance)&&a(n=n._vnode)&&a(n.data)&&C(n,e),n=0;n<r.remove.length;++n)r.remove[n](t,e);a(n=t.data.hook)&&a(n=n.remove)?n(t,e):e()}else u(t.elm)}function x(t,e,n,r){for(var i=n;i<r;i++){var o=e[i];if(a(o)&&or(t,o))return i}}function w(t,e,n,s,c,u){if(t!==e){a(e.elm)&&a(s)&&(e=s[c]=_t(e));var d=e.elm=t.elm;if(o(t.isAsyncPlaceholder))a(e.asyncFactory.resolved)?E(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(o(e.isStatic)&&o(t.isStatic)&&e.key===t.key&&(o(e.isCloned)||o(e.isOnce)))e.componentInstance=t.componentInstance;else{var p,v=e.data;a(v)&&a(p=v.hook)&&a(p=p.prepatch)&&p(t,e);var A=t.children,m=e.children;if(a(v)&&h(e)){for(p=0;p<r.update.length;++p)r.update[p](t,e);a(p=v.hook)&&a(p=p.update)&&p(t,e)}i(e.text)?a(A)&&a(m)?A!==m&&function(t,e,n,r,o){var s,c,u,d=0,p=0,v=e.length-1,h=e[0],A=e[v],m=n.length-1,g=n[0],_=n[m],C=!o;for(0;d<=v&&p<=m;)i(h)?h=e[++d]:i(A)?A=e[--v]:or(h,g)?(w(h,g,r,n,p),h=e[++d],g=n[++p]):or(A,_)?(w(A,_,r,n,m),A=e[--v],_=n[--m]):or(h,_)?(w(h,_,r,n,m),C&&l.insertBefore(t,h.elm,l.nextSibling(A.elm)),h=e[++d],_=n[--m]):or(A,g)?(w(A,g,r,n,p),C&&l.insertBefore(t,A.elm,h.elm),A=e[--v],g=n[++p]):(i(s)&&(s=sr(e,d,v)),i(c=a(g.key)?s[g.key]:x(g,e,d,v))?f(g,r,t,h.elm,!1,n,p):or(u=e[c],g)?(w(u,g,r,n,p),e[c]=void 0,C&&l.insertBefore(t,u.elm,h.elm)):f(g,r,t,h.elm,!1,n,p),g=n[++p]);d>v?y(t,i(n[m+1])?null:n[m+1].elm,n,p,m,r):p>m&&b(0,e,d,v)}(d,A,m,n,u):a(m)?(a(t.text)&&l.setTextContent(d,""),y(d,null,m,0,m.length-1,n)):a(A)?b(0,A,0,A.length-1):a(t.text)&&l.setTextContent(d,""):t.text!==e.text&&l.setTextContent(d,e.text),a(v)&&a(p=v.hook)&&a(p=p.postpatch)&&p(t,e)}}}function $(t,e,n){if(o(n)&&a(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var k=A("attrs,class,staticClass,staticStyle,key");function E(t,e,n,r){var i,s=e.tag,c=e.data,l=e.children;if(r=r||c&&c.pre,e.elm=t,o(e.isComment)&&a(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(a(c)&&(a(i=c.hook)&&a(i=i.init)&&i(e,!0),a(i=e.componentInstance)))return d(e,n),!0;if(a(s)){if(a(l))if(t.hasChildNodes())if(a(i=c)&&a(i=i.domProps)&&a(i=i.innerHTML)){if(i!==t.innerHTML)return!1}else{for(var u=!0,f=t.firstChild,p=0;p<l.length;p++){if(!f||!E(f,l[p],n,r)){u=!1;break}f=f.nextSibling}if(!u||f)return!1}else v(e,l,n);if(a(c)){var h=!1;for(var A in c)if(!k(A)){h=!0,m(e,n);break}!h&&c.class&&ae(c.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,s){if(!i(e)){var c,u=!1,d=[];if(i(t))u=!0,f(e,d);else{var p=a(t.nodeType);if(!p&&or(t,e))w(t,e,d,null,null,s);else{if(p){if(1===t.nodeType&&t.hasAttribute("data-server-rendered")&&(t.removeAttribute("data-server-rendered"),n=!0),o(n)&&E(t,e,d))return $(e,d,!0),t;c=t,t=new At(l.tagName(c).toLowerCase(),{},[],void 0,c)}var v=t.elm,A=l.parentNode(v);if(f(e,d,v._leaveCb?null:A,l.nextSibling(v)),a(e.parent))for(var m=e.parent,g=h(e);m;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](m);if(m.elm=e.elm,g){for(var C=0;C<r.create.length;++C)r.create[C](ir,m);var x=m.data.hook.insert;if(x.merged)for(var k=1;k<x.fns.length;k++)x.fns[k]()}else rr(m);m=m.parent}a(A)?b(0,[t],0,0):a(t.tag)&&_(t)}}return $(e,d,u),e.elm}a(t)&&_(t)}}({nodeOps:er,modules:[gr,kr,ni,ai,Ai,K?{create:Ri,activate:Ri,remove:function(t,e){!0!==t.data.show?Li(t,e):e()}}:{}].concat(vr)});X&&document.addEventListener("selectionchange",(function(){var t=document.activeElement;t&&t.vmodel&&Ji(t,"input")}));var zi={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?le(n,"postpatch",(function(){zi.componentUpdated(t,e,n)})):Wi(t,e,n.context),t._vOptions=[].map.call(t.options,Yi)):("textarea"===n.tag||Qn(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",Ki),t.addEventListener("compositionend",qi),t.addEventListener("change",qi),X&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Wi(t,e,n.context);var r=t._vOptions,i=t._vOptions=[].map.call(t.options,Yi);if(i.some((function(t,e){return!M(t,r[e])})))(t.multiple?e.value.some((function(t){return Vi(t,i)})):e.value!==e.oldValue&&Vi(e.value,i))&&Ji(t,"change")}}};function Wi(t,e,n){Hi(t,e,n),(Z||Q)&&setTimeout((function(){Hi(t,e,n)}),0)}function Hi(t,e,n){var r=e.value,i=t.multiple;if(!i||Array.isArray(r)){for(var a,o,s=0,c=t.options.length;s<c;s++)if(o=t.options[s],i)a=N(r,Yi(o))>-1,o.selected!==a&&(o.selected=a);else if(M(Yi(o),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));i||(t.selectedIndex=-1)}}function Vi(t,e){return e.every((function(e){return!M(e,t)}))}function Yi(t){return"_value"in t?t._value:t.value}function Ki(t){t.target.composing=!0}function qi(t){t.target.composing&&(t.target.composing=!1,Ji(t.target,"input"))}function Ji(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function Gi(t){return!t.componentInstance||t.data&&t.data.transition?t:Gi(t.componentInstance._vnode)}var Zi={model:zi,show:{bind:function(t,e,n){var r=e.value,i=(n=Gi(n)).data&&n.data.transition,a=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&i?(n.data.show=!0,Ni(n,(function(){t.style.display=a}))):t.style.display=r?a:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=Gi(n)).data&&n.data.transition?(n.data.show=!0,r?Ni(n,(function(){t.style.display=t.__vOriginalDisplay})):Li(n,(function(){t.style.display="none"}))):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,i){i||(t.style.display=t.__vOriginalDisplay)}}},Xi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Qi(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?Qi(Ye(e.children)):t}function ta(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var i=n._parentListeners;for(var a in i)e[w(a)]=i[a];return e}function ea(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var na=function(t){return t.tag||Ve(t)},ra=function(t){return"show"===t.name},ia={name:"transition",props:Xi,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(na)).length){0;var r=this.mode;0;var i=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return i;var a=Qi(i);if(!a)return i;if(this._leaving)return ea(t,i);var o="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?o+"comment":o+a.tag:s(a.key)?0===String(a.key).indexOf(o)?a.key:o+a.key:a.key;var c=(a.data||(a.data={})).transition=ta(this),l=this._vnode,u=Qi(l);if(a.data.directives&&a.data.directives.some(ra)&&(a.data.show=!0),u&&u.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(a,u)&&!Ve(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var f=u.data.transition=T({},c);if("out-in"===r)return this._leaving=!0,le(f,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),ea(t,i);if("in-out"===r){if(Ve(a))return l;var d,p=function(){d()};le(c,"afterEnter",p),le(c,"enterCancelled",p),le(f,"delayLeave",(function(t){d=t}))}}return i}}},aa=T({tag:String,moveClass:String},Xi);function oa(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function sa(t){t.data.newPos=t.elm.getBoundingClientRect()}function ca(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,i=e.top-n.top;if(r||i){t.data.moved=!0;var a=t.elm.style;a.transform=a.WebkitTransform="translate("+r+"px,"+i+"px)",a.transitionDuration="0s"}}delete aa.mode;var la={Transition:ia,TransitionGroup:{props:aa,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var i=Xe(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,i(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],o=ta(this),s=0;s<i.length;s++){var c=i[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))a.push(c),n[c.key]=c,(c.data||(c.data={})).transition=o;else;}if(r){for(var l=[],u=[],f=0;f<r.length;f++){var d=r[f];d.data.transition=o,d.data.pos=d.elm.getBoundingClientRect(),n[d.key]?l.push(d):u.push(d)}this.kept=t(e,null,l),this.removed=u}return t(e,null,a)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(oa),t.forEach(sa),t.forEach(ca),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;Si(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(wi,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(wi,t),n._moveCb=null,Ti(n,e))})}})))},methods:{hasMove:function(t,e){if(!Ci)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){yi(n,t)})),gi(n,e),n.style.display="none",this.$el.appendChild(n);var r=Bi(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};$n.config.mustUseProp=Mn,$n.config.isReservedTag=Gn,$n.config.isReservedAttr=Bn,$n.config.getTagNamespace=Zn,$n.config.isUnknownElement=function(t){if(!K)return!0;if(Gn(t))return!1;if(t=t.toLowerCase(),null!=Xn[t])return Xn[t];var e=document.createElement(t);return t.indexOf("-")>-1?Xn[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Xn[t]=/HTMLUnknownElement/.test(e.toString())},T($n.options.directives,Zi),T($n.options.components,la),$n.prototype.__patch__=K?Ui:j,$n.prototype.$mount=function(t,e){return function(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=gt),en(t,"beforeMount"),r=function(){t._update(t._render(),n)},new vn(t,r,j,{before:function(){t._isMounted&&!t._isDestroyed&&en(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,en(t,"mounted")),t}(this,t=t&&K?tr(t):void 0,e)},K&&setTimeout((function(){R.devtools&&ot&&ot.emit("init",$n)}),0);var ua=/\{\{((?:.|\r?\n)+?)\}\}/g,fa=/[-.*+?^${}()|[\]\/\\]/g,da=C((function(t){var e=t[0].replace(fa,"\\$&"),n=t[1].replace(fa,"\\$&");return new RegExp(e+"((?:.|\\n)+?)"+n,"g")}));var pa={staticKeys:["staticClass"],transformNode:function(t,e){e.warn;var n=Fr(t,"class");n&&(t.staticClass=JSON.stringify(n));var r=Pr(t,"class",!1);r&&(t.classBinding=r)},genData:function(t){var e="";return t.staticClass&&(e+="staticClass:"+t.staticClass+","),t.classBinding&&(e+="class:"+t.classBinding+","),e}};var va,ha={staticKeys:["staticStyle"],transformNode:function(t,e){e.warn;var n=Fr(t,"style");n&&(t.staticStyle=JSON.stringify(oi(n)));var r=Pr(t,"style",!1);r&&(t.styleBinding=r)},genData:function(t){var e="";return t.staticStyle&&(e+="staticStyle:"+t.staticStyle+","),t.styleBinding&&(e+="style:("+t.styleBinding+"),"),e}},Aa=function(t){return(va=va||document.createElement("div")).innerHTML=t,va.textContent},ma=A("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),ga=A("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),ya=A("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),_a=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ba=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Ca="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+U.source+"]*",xa="((?:"+Ca+"\\:)?"+Ca+")",wa=new RegExp("^<"+xa),$a=/^\s*(\/?)>/,ka=new RegExp("^<\\/"+xa+"[^>]*>"),Ea=/^<!DOCTYPE [^>]+>/i,Oa=/^<!\--/,Sa=/^<!\[/,Ta=A("script,style,textarea",!0),Ia={},ja={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},Ba=/&(?:lt|gt|quot|amp|#39);/g,Da=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,Ma=A("pre,textarea",!0),Na=function(t,e){return t&&Ma(t)&&"\n"===e[0]};function La(t,e){var n=e?Da:Ba;return t.replace(n,(function(t){return ja[t]}))}var Pa,Fa,Ra,Ua,za,Wa,Ha,Va,Ya=/^@|^v-on:/,Ka=/^v-|^@|^:/,qa=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Ja=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Ga=/^\(|\)$/g,Za=/^\[.*\]$/,Xa=/:(.*)$/,Qa=/^:|^\.|^v-bind:/,to=/\.[^.\]]+(?=[^\]]*$)/g,eo=/^v-slot(:|$)|^#/,no=/[\r\n]/,ro=/\s+/g,io=C(Aa);function ao(t,e,n){return{type:1,tag:t,attrsList:e,attrsMap:po(e),rawAttrsMap:{},parent:n,children:[]}}function oo(t,e){Pa=e.warn||Tr,Wa=e.isPreTag||B,Ha=e.mustUseProp||B,Va=e.getTagNamespace||B;var n=e.isReservedTag||B;(function(t){return!!t.component||!n(t.tag)}),Ra=Ir(e.modules,"transformNode"),Ua=Ir(e.modules,"preTransformNode"),za=Ir(e.modules,"postTransformNode"),Fa=e.delimiters;var r,i,a=[],o=!1!==e.preserveWhitespace,s=e.whitespace,c=!1,l=!1;function u(t){if(f(t),c||t.processed||(t=so(t,e)),a.length||t===r||r.if&&(t.elseif||t.else)&&lo(r,{exp:t.elseif,block:t}),i&&!t.forbidden)if(t.elseif||t.else)o=t,(s=function(t){for(var e=t.length;e--;){if(1===t[e].type)return t[e];t.pop()}}(i.children))&&s.if&&lo(s,{exp:o.elseif,block:o});else{if(t.slotScope){var n=t.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[n]=t}i.children.push(t),t.parent=i}var o,s;t.children=t.children.filter((function(t){return!t.slotScope})),f(t),t.pre&&(c=!1),Wa(t.tag)&&(l=!1);for(var u=0;u<za.length;u++)za[u](t,e)}function f(t){if(!l)for(var e;(e=t.children[t.children.length-1])&&3===e.type&&" "===e.text;)t.children.pop()}return function(t,e){for(var n,r,i=[],a=e.expectHTML,o=e.isUnaryTag||B,s=e.canBeLeftOpenTag||B,c=0;t;){if(n=t,r&&Ta(r)){var l=0,u=r.toLowerCase(),f=Ia[u]||(Ia[u]=new RegExp("([\\s\\S]*?)(</"+u+"[^>]*>)","i")),d=t.replace(f,(function(t,n,r){return l=r.length,Ta(u)||"noscript"===u||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Na(u,n)&&(n=n.slice(1)),e.chars&&e.chars(n),""}));c+=t.length-d.length,t=d,k(u,c-l,c)}else{var p=t.indexOf("<");if(0===p){if(Oa.test(t)){var v=t.indexOf("--\x3e");if(v>=0){e.shouldKeepComment&&e.comment(t.substring(4,v),c,c+v+3),x(v+3);continue}}if(Sa.test(t)){var h=t.indexOf("]>");if(h>=0){x(h+2);continue}}var A=t.match(Ea);if(A){x(A[0].length);continue}var m=t.match(ka);if(m){var g=c;x(m[0].length),k(m[1],g,c);continue}var y=w();if(y){$(y),Na(y.tagName,t)&&x(1);continue}}var _=void 0,b=void 0,C=void 0;if(p>=0){for(b=t.slice(p);!(ka.test(b)||wa.test(b)||Oa.test(b)||Sa.test(b)||(C=b.indexOf("<",1))<0);)p+=C,b=t.slice(p);_=t.substring(0,p)}p<0&&(_=t),_&&x(_.length),e.chars&&_&&e.chars(_,c-_.length,c)}if(t===n){e.chars&&e.chars(t);break}}function x(e){c+=e,t=t.substring(e)}function w(){var e=t.match(wa);if(e){var n,r,i={tagName:e[1],attrs:[],start:c};for(x(e[0].length);!(n=t.match($a))&&(r=t.match(ba)||t.match(_a));)r.start=c,x(r[0].length),r.end=c,i.attrs.push(r);if(n)return i.unarySlash=n[1],x(n[0].length),i.end=c,i}}function $(t){var n=t.tagName,c=t.unarySlash;a&&("p"===r&&ya(n)&&k(r),s(n)&&r===n&&k(n));for(var l=o(n)||!!c,u=t.attrs.length,f=new Array(u),d=0;d<u;d++){var p=t.attrs[d],v=p[3]||p[4]||p[5]||"",h="a"===n&&"href"===p[1]?e.shouldDecodeNewlinesForHref:e.shouldDecodeNewlines;f[d]={name:p[1],value:La(v,h)}}l||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:f,start:t.start,end:t.end}),r=n),e.start&&e.start(n,f,l,t.start,t.end)}function k(t,n,a){var o,s;if(null==n&&(n=c),null==a&&(a=c),t)for(s=t.toLowerCase(),o=i.length-1;o>=0&&i[o].lowerCasedTag!==s;o--);else o=0;if(o>=0){for(var l=i.length-1;l>=o;l--)e.end&&e.end(i[l].tag,n,a);i.length=o,r=o&&i[o-1].tag}else"br"===s?e.start&&e.start(t,[],!0,n,a):"p"===s&&(e.start&&e.start(t,[],!1,n,a),e.end&&e.end(t,n,a))}k()}(t,{warn:Pa,expectHTML:e.expectHTML,isUnaryTag:e.isUnaryTag,canBeLeftOpenTag:e.canBeLeftOpenTag,shouldDecodeNewlines:e.shouldDecodeNewlines,shouldDecodeNewlinesForHref:e.shouldDecodeNewlinesForHref,shouldKeepComment:e.comments,outputSourceRange:e.outputSourceRange,start:function(t,n,o,s,f){var d=i&&i.ns||Va(t);Z&&"svg"===d&&(n=function(t){for(var e=[],n=0;n<t.length;n++){var r=t[n];vo.test(r.name)||(r.name=r.name.replace(ho,""),e.push(r))}return e}(n));var p,v=ao(t,n,i);d&&(v.ns=d),"style"!==(p=v).tag&&("script"!==p.tag||p.attrsMap.type&&"text/javascript"!==p.attrsMap.type)||at()||(v.forbidden=!0);for(var h=0;h<Ua.length;h++)v=Ua[h](v,e)||v;c||(!function(t){null!=Fr(t,"v-pre")&&(t.pre=!0)}(v),v.pre&&(c=!0)),Wa(v.tag)&&(l=!0),c?function(t){var e=t.attrsList,n=e.length;if(n)for(var r=t.attrs=new Array(n),i=0;i<n;i++)r[i]={name:e[i].name,value:JSON.stringify(e[i].value)},null!=e[i].start&&(r[i].start=e[i].start,r[i].end=e[i].end);else t.pre||(t.plain=!0)}(v):v.processed||(co(v),function(t){var e=Fr(t,"v-if");if(e)t.if=e,lo(t,{exp:e,block:t});else{null!=Fr(t,"v-else")&&(t.else=!0);var n=Fr(t,"v-else-if");n&&(t.elseif=n)}}(v),function(t){null!=Fr(t,"v-once")&&(t.once=!0)}(v)),r||(r=v),o?u(v):(i=v,a.push(v))},end:function(t,e,n){var r=a[a.length-1];a.length-=1,i=a[a.length-1],u(r)},chars:function(t,e,n){if(i&&(!Z||"textarea"!==i.tag||i.attrsMap.placeholder!==t)){var r,a,u,f=i.children;if(t=l||t.trim()?"script"===(r=i).tag||"style"===r.tag?t:io(t):f.length?s?"condense"===s&&no.test(t)?"":" ":o?" ":"":"")l||"condense"!==s||(t=t.replace(ro," ")),!c&&" "!==t&&(a=function(t,e){var n=e?da(e):ua;if(n.test(t)){for(var r,i,a,o=[],s=[],c=n.lastIndex=0;r=n.exec(t);){(i=r.index)>c&&(s.push(a=t.slice(c,i)),o.push(JSON.stringify(a)));var l=Or(r[1].trim());o.push("_s("+l+")"),s.push({"@binding":l}),c=i+r[0].length}return c<t.length&&(s.push(a=t.slice(c)),o.push(JSON.stringify(a))),{expression:o.join("+"),tokens:s}}}(t,Fa))?u={type:2,expression:a.expression,tokens:a.tokens,text:t}:" "===t&&f.length&&" "===f[f.length-1].text||(u={type:3,text:t}),u&&f.push(u)}},comment:function(t,e,n){if(i){var r={type:3,text:t,isComment:!0};0,i.children.push(r)}}}),r}function so(t,e){var n;!function(t){var e=Pr(t,"key");if(e){t.key=e}}(t),t.plain=!t.key&&!t.scopedSlots&&!t.attrsList.length,function(t){var e=Pr(t,"ref");e&&(t.ref=e,t.refInFor=function(t){var e=t;for(;e;){if(void 0!==e.for)return!0;e=e.parent}return!1}(t))}(t),function(t){var e;"template"===t.tag?(e=Fr(t,"scope"),t.slotScope=e||Fr(t,"slot-scope")):(e=Fr(t,"slot-scope"))&&(t.slotScope=e);var n=Pr(t,"slot");n&&(t.slotTarget='""'===n?'"default"':n,t.slotTargetDynamic=!(!t.attrsMap[":slot"]&&!t.attrsMap["v-bind:slot"]),"template"===t.tag||t.slotScope||Br(t,"slot",n,function(t,e){return t.rawAttrsMap[":"+e]||t.rawAttrsMap["v-bind:"+e]||t.rawAttrsMap[e]}(t,"slot")));if("template"===t.tag){var r=Rr(t,eo);if(r){0;var i=uo(r),a=i.name,o=i.dynamic;t.slotTarget=a,t.slotTargetDynamic=o,t.slotScope=r.value||"_empty_"}}else{var s=Rr(t,eo);if(s){0;var c=t.scopedSlots||(t.scopedSlots={}),l=uo(s),u=l.name,f=l.dynamic,d=c[u]=ao("template",[],t);d.slotTarget=u,d.slotTargetDynamic=f,d.children=t.children.filter((function(t){if(!t.slotScope)return t.parent=d,!0})),d.slotScope=s.value||"_empty_",t.children=[],t.plain=!1}}}(t),"slot"===(n=t).tag&&(n.slotName=Pr(n,"name")),function(t){var e;(e=Pr(t,"is"))&&(t.component=e);null!=Fr(t,"inline-template")&&(t.inlineTemplate=!0)}(t);for(var r=0;r<Ra.length;r++)t=Ra[r](t,e)||t;return function(t){var e,n,r,i,a,o,s,c,l=t.attrsList;for(e=0,n=l.length;e<n;e++){if(r=i=l[e].name,a=l[e].value,Ka.test(r))if(t.hasBindings=!0,(o=fo(r.replace(Ka,"")))&&(r=r.replace(to,"")),Qa.test(r))r=r.replace(Qa,""),a=Or(a),(c=Za.test(r))&&(r=r.slice(1,-1)),o&&(o.prop&&!c&&"innerHtml"===(r=w(r))&&(r="innerHTML"),o.camel&&!c&&(r=w(r)),o.sync&&(s=Wr(a,"$event"),c?Lr(t,'"update:"+('+r+")",s,null,!1,0,l[e],!0):(Lr(t,"update:"+w(r),s,null,!1,0,l[e]),E(r)!==w(r)&&Lr(t,"update:"+E(r),s,null,!1,0,l[e])))),o&&o.prop||!t.component&&Ha(t.tag,t.attrsMap.type,r)?jr(t,r,a,l[e],c):Br(t,r,a,l[e],c);else if(Ya.test(r))r=r.replace(Ya,""),(c=Za.test(r))&&(r=r.slice(1,-1)),Lr(t,r,a,o,!1,0,l[e],c);else{var u=(r=r.replace(Ka,"")).match(Xa),f=u&&u[1];c=!1,f&&(r=r.slice(0,-(f.length+1)),Za.test(f)&&(f=f.slice(1,-1),c=!0)),Mr(t,r,i,a,f,c,o,l[e])}else Br(t,r,JSON.stringify(a),l[e]),!t.component&&"muted"===r&&Ha(t.tag,t.attrsMap.type,r)&&jr(t,r,"true",l[e])}}(t),t}function co(t){var e;if(e=Fr(t,"v-for")){var n=function(t){var e=t.match(qa);if(!e)return;var n={};n.for=e[2].trim();var r=e[1].trim().replace(Ga,""),i=r.match(Ja);i?(n.alias=r.replace(Ja,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=r;return n}(e);n&&T(t,n)}}function lo(t,e){t.ifConditions||(t.ifConditions=[]),t.ifConditions.push(e)}function uo(t){var e=t.name.replace(eo,"");return e||"#"!==t.name[0]&&(e="default"),Za.test(e)?{name:e.slice(1,-1),dynamic:!0}:{name:'"'+e+'"',dynamic:!1}}function fo(t){var e=t.match(to);if(e){var n={};return e.forEach((function(t){n[t.slice(1)]=!0})),n}}function po(t){for(var e={},n=0,r=t.length;n<r;n++)e[t[n].name]=t[n].value;return e}var vo=/^xmlns:NS\d+/,ho=/^NS\d+:/;function Ao(t){return ao(t.tag,t.attrsList.slice(),t.parent)}var mo=[pa,ha,{preTransformNode:function(t,e){if("input"===t.tag){var n,r=t.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=Pr(t,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var i=Fr(t,"v-if",!0),a=i?"&&("+i+")":"",o=null!=Fr(t,"v-else",!0),s=Fr(t,"v-else-if",!0),c=Ao(t);co(c),Dr(c,"type","checkbox"),so(c,e),c.processed=!0,c.if="("+n+")==='checkbox'"+a,lo(c,{exp:c.if,block:c});var l=Ao(t);Fr(l,"v-for",!0),Dr(l,"type","radio"),so(l,e),lo(c,{exp:"("+n+")==='radio'"+a,block:l});var u=Ao(t);return Fr(u,"v-for",!0),Dr(u,":type",n),so(u,e),lo(c,{exp:i,block:u}),o?c.else=!0:s&&(c.elseif=s),c}}}}];var go,yo,_o={expectHTML:!0,modules:mo,directives:{model:function(t,e,n){n;var r=e.value,i=e.modifiers,a=t.tag,o=t.attrsMap.type;if(t.component)return zr(t,r,i),!1;if("select"===a)!function(t,e,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";r=r+" "+Wr(e,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),Lr(t,"change",r,null,!0)}(t,r,i);else if("input"===a&&"checkbox"===o)!function(t,e,n){var r=n&&n.number,i=Pr(t,"value")||"null",a=Pr(t,"true-value")||"true",o=Pr(t,"false-value")||"false";jr(t,"checked","Array.isArray("+e+")?_i("+e+","+i+")>-1"+("true"===a?":("+e+")":":_q("+e+","+a+")")),Lr(t,"change","var $$a="+e+",$$el=$event.target,$$c=$$el.checked?("+a+"):("+o+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Wr(e,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Wr(e,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Wr(e,"$$c")+"}",null,!0)}(t,r,i);else if("input"===a&&"radio"===o)!function(t,e,n){var r=n&&n.number,i=Pr(t,"value")||"null";jr(t,"checked","_q("+e+","+(i=r?"_n("+i+")":i)+")"),Lr(t,"change",Wr(e,i),null,!0)}(t,r,i);else if("input"===a||"textarea"===a)!function(t,e,n){var r=t.attrsMap.type;0;var i=n||{},a=i.lazy,o=i.number,s=i.trim,c=!a&&"range"!==r,l=a?"change":"range"===r?"__r":"input",u="$event.target.value";s&&(u="$event.target.value.trim()");o&&(u="_n("+u+")");var f=Wr(e,u);c&&(f="if($event.target.composing)return;"+f);jr(t,"value","("+e+")"),Lr(t,l,f,null,!0),(s||o)&&Lr(t,"blur","$forceUpdate()")}(t,r,i);else{if(!R.isReservedTag(a))return zr(t,r,i),!1}return!0},text:function(t,e){e.value&&jr(t,"textContent","_s("+e.value+")",e)},html:function(t,e){e.value&&jr(t,"innerHTML","_s("+e.value+")",e)}},isPreTag:function(t){return"pre"===t},isUnaryTag:ma,mustUseProp:Mn,canBeLeftOpenTag:ga,isReservedTag:Gn,getTagNamespace:Zn,staticKeys:function(t){return t.reduce((function(t,e){return t.concat(e.staticKeys||[])}),[]).join(",")}(mo)},bo=C((function(t){return A("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(t?","+t:""))}));function Co(t,e){t&&(go=bo(e.staticKeys||""),yo=e.isReservedTag||B,function t(e){if(e.static=function(t){if(2===t.type)return!1;if(3===t.type)return!0;return!(!t.pre&&(t.hasBindings||t.if||t.for||m(t.tag)||!yo(t.tag)||function(t){for(;t.parent;){if("template"!==(t=t.parent).tag)return!1;if(t.for)return!0}return!1}(t)||!Object.keys(t).every(go)))}(e),1===e.type){if(!yo(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var n=0,r=e.children.length;n<r;n++){var i=e.children[n];t(i),i.static||(e.static=!1)}if(e.ifConditions)for(var a=1,o=e.ifConditions.length;a<o;a++){var s=e.ifConditions[a].block;t(s),s.static||(e.static=!1)}}}(t),function t(e,n){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=n),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var r=0,i=e.children.length;r<i;r++)t(e.children[r],n||!!e.for);if(e.ifConditions)for(var a=1,o=e.ifConditions.length;a<o;a++)t(e.ifConditions[a].block,n)}}(t,!1))}var xo=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/,wo=/\([^)]*?\);*$/,$o=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,ko={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Eo={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},Oo=function(t){return"if("+t+")return null;"},So={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Oo("$event.target !== $event.currentTarget"),ctrl:Oo("!$event.ctrlKey"),shift:Oo("!$event.shiftKey"),alt:Oo("!$event.altKey"),meta:Oo("!$event.metaKey"),left:Oo("'button' in $event && $event.button !== 0"),middle:Oo("'button' in $event && $event.button !== 1"),right:Oo("'button' in $event && $event.button !== 2")};function To(t,e){var n=e?"nativeOn:":"on:",r="",i="";for(var a in t){var o=Io(t[a]);t[a]&&t[a].dynamic?i+=a+","+o+",":r+='"'+a+'":'+o+","}return r="{"+r.slice(0,-1)+"}",i?n+"_d("+r+",["+i.slice(0,-1)+"])":n+r}function Io(t){if(!t)return"function(){}";if(Array.isArray(t))return"["+t.map((function(t){return Io(t)})).join(",")+"]";var e=$o.test(t.value),n=xo.test(t.value),r=$o.test(t.value.replace(wo,""));if(t.modifiers){var i="",a="",o=[];for(var s in t.modifiers)if(So[s])a+=So[s],ko[s]&&o.push(s);else if("exact"===s){var c=t.modifiers;a+=Oo(["ctrl","shift","alt","meta"].filter((function(t){return!c[t]})).map((function(t){return"$event."+t+"Key"})).join("||"))}else o.push(s);return o.length&&(i+=function(t){return"if(!$event.type.indexOf('key')&&"+t.map(jo).join("&&")+")return null;"}(o)),a&&(i+=a),"function($event){"+i+(e?"return "+t.value+"($event)":n?"return ("+t.value+")($event)":r?"return "+t.value:t.value)+"}"}return e||n?t.value:"function($event){"+(r?"return "+t.value:t.value)+"}"}function jo(t){var e=parseInt(t,10);if(e)return"$event.keyCode!=="+e;var n=ko[t],r=Eo[t];return"_k($event.keyCode,"+JSON.stringify(t)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var Bo={on:function(t,e){t.wrapListeners=function(t){return"_g("+t+","+e.value+")"}},bind:function(t,e){t.wrapData=function(n){return"_b("+n+",'"+t.tag+"',"+e.value+","+(e.modifiers&&e.modifiers.prop?"true":"false")+(e.modifiers&&e.modifiers.sync?",true":"")+")"}},cloak:j},Do=function(t){this.options=t,this.warn=t.warn||Tr,this.transforms=Ir(t.modules,"transformCode"),this.dataGenFns=Ir(t.modules,"genData"),this.directives=T(T({},Bo),t.directives);var e=t.isReservedTag||B;this.maybeComponent=function(t){return!!t.component||!e(t.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function Mo(t,e){var n=new Do(e);return{render:"with(this){return "+(t?No(t,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function No(t,e){if(t.parent&&(t.pre=t.pre||t.parent.pre),t.staticRoot&&!t.staticProcessed)return Lo(t,e);if(t.once&&!t.onceProcessed)return Po(t,e);if(t.for&&!t.forProcessed)return Ro(t,e);if(t.if&&!t.ifProcessed)return Fo(t,e);if("template"!==t.tag||t.slotTarget||e.pre){if("slot"===t.tag)return function(t,e){var n=t.slotName||'"default"',r=Ho(t,e),i="_t("+n+(r?","+r:""),a=t.attrs||t.dynamicAttrs?Ko((t.attrs||[]).concat(t.dynamicAttrs||[]).map((function(t){return{name:w(t.name),value:t.value,dynamic:t.dynamic}}))):null,o=t.attrsMap["v-bind"];!a&&!o||r||(i+=",null");a&&(i+=","+a);o&&(i+=(a?"":",null")+","+o);return i+")"}(t,e);var n;if(t.component)n=function(t,e,n){var r=e.inlineTemplate?null:Ho(e,n,!0);return"_c("+t+","+Uo(e,n)+(r?","+r:"")+")"}(t.component,t,e);else{var r;(!t.plain||t.pre&&e.maybeComponent(t))&&(r=Uo(t,e));var i=t.inlineTemplate?null:Ho(t,e,!0);n="_c('"+t.tag+"'"+(r?","+r:"")+(i?","+i:"")+")"}for(var a=0;a<e.transforms.length;a++)n=e.transforms[a](t,n);return n}return Ho(t,e)||"void 0"}function Lo(t,e){t.staticProcessed=!0;var n=e.pre;return t.pre&&(e.pre=t.pre),e.staticRenderFns.push("with(this){return "+No(t,e)+"}"),e.pre=n,"_m("+(e.staticRenderFns.length-1)+(t.staticInFor?",true":"")+")"}function Po(t,e){if(t.onceProcessed=!0,t.if&&!t.ifProcessed)return Fo(t,e);if(t.staticInFor){for(var n="",r=t.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+No(t,e)+","+e.onceId+++","+n+")":No(t,e)}return Lo(t,e)}function Fo(t,e,n,r){return t.ifProcessed=!0,function t(e,n,r,i){if(!e.length)return i||"_e()";var a=e.shift();return a.exp?"("+a.exp+")?"+o(a.block)+":"+t(e,n,r,i):""+o(a.block);function o(t){return r?r(t,n):t.once?Po(t,n):No(t,n)}}(t.ifConditions.slice(),e,n,r)}function Ro(t,e,n,r){var i=t.for,a=t.alias,o=t.iterator1?","+t.iterator1:"",s=t.iterator2?","+t.iterator2:"";return t.forProcessed=!0,(r||"_l")+"(("+i+"),function("+a+o+s+"){return "+(n||No)(t,e)+"})"}function Uo(t,e){var n="{",r=function(t,e){var n=t.directives;if(!n)return;var r,i,a,o,s="directives:[",c=!1;for(r=0,i=n.length;r<i;r++){a=n[r],o=!0;var l=e.directives[a.name];l&&(o=!!l(t,a,e.warn)),o&&(c=!0,s+='{name:"'+a.name+'",rawName:"'+a.rawName+'"'+(a.value?",value:("+a.value+"),expression:"+JSON.stringify(a.value):"")+(a.arg?",arg:"+(a.isDynamicArg?a.arg:'"'+a.arg+'"'):"")+(a.modifiers?",modifiers:"+JSON.stringify(a.modifiers):"")+"},")}if(c)return s.slice(0,-1)+"]"}(t,e);r&&(n+=r+","),t.key&&(n+="key:"+t.key+","),t.ref&&(n+="ref:"+t.ref+","),t.refInFor&&(n+="refInFor:true,"),t.pre&&(n+="pre:true,"),t.component&&(n+='tag:"'+t.tag+'",');for(var i=0;i<e.dataGenFns.length;i++)n+=e.dataGenFns[i](t);if(t.attrs&&(n+="attrs:"+Ko(t.attrs)+","),t.props&&(n+="domProps:"+Ko(t.props)+","),t.events&&(n+=To(t.events,!1)+","),t.nativeEvents&&(n+=To(t.nativeEvents,!0)+","),t.slotTarget&&!t.slotScope&&(n+="slot:"+t.slotTarget+","),t.scopedSlots&&(n+=function(t,e,n){var r=t.for||Object.keys(e).some((function(t){var n=e[t];return n.slotTargetDynamic||n.if||n.for||zo(n)})),i=!!t.if;if(!r)for(var a=t.parent;a;){if(a.slotScope&&"_empty_"!==a.slotScope||a.for){r=!0;break}a.if&&(i=!0),a=a.parent}var o=Object.keys(e).map((function(t){return Wo(e[t],n)})).join(",");return"scopedSlots:_u(["+o+"]"+(r?",null,true":"")+(!r&&i?",null,false,"+function(t){var e=5381,n=t.length;for(;n;)e=33*e^t.charCodeAt(--n);return e>>>0}(o):"")+")"}(t,t.scopedSlots,e)+","),t.model&&(n+="model:{value:"+t.model.value+",callback:"+t.model.callback+",expression:"+t.model.expression+"},"),t.inlineTemplate){var a=function(t,e){var n=t.children[0];0;if(n&&1===n.type){var r=Mo(n,e.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map((function(t){return"function(){"+t+"}"})).join(",")+"]}"}}(t,e);a&&(n+=a+",")}return n=n.replace(/,$/,"")+"}",t.dynamicAttrs&&(n="_b("+n+',"'+t.tag+'",'+Ko(t.dynamicAttrs)+")"),t.wrapData&&(n=t.wrapData(n)),t.wrapListeners&&(n=t.wrapListeners(n)),n}function zo(t){return 1===t.type&&("slot"===t.tag||t.children.some(zo))}function Wo(t,e){var n=t.attrsMap["slot-scope"];if(t.if&&!t.ifProcessed&&!n)return Fo(t,e,Wo,"null");if(t.for&&!t.forProcessed)return Ro(t,e,Wo);var r="_empty_"===t.slotScope?"":String(t.slotScope),i="function("+r+"){return "+("template"===t.tag?t.if&&n?"("+t.if+")?"+(Ho(t,e)||"undefined")+":undefined":Ho(t,e)||"undefined":No(t,e))+"}",a=r?"":",proxy:true";return"{key:"+(t.slotTarget||'"default"')+",fn:"+i+a+"}"}function Ho(t,e,n,r,i){var a=t.children;if(a.length){var o=a[0];if(1===a.length&&o.for&&"template"!==o.tag&&"slot"!==o.tag){var s=n?e.maybeComponent(o)?",1":",0":"";return""+(r||No)(o,e)+s}var c=n?function(t,e){for(var n=0,r=0;r<t.length;r++){var i=t[r];if(1===i.type){if(Vo(i)||i.ifConditions&&i.ifConditions.some((function(t){return Vo(t.block)}))){n=2;break}(e(i)||i.ifConditions&&i.ifConditions.some((function(t){return e(t.block)})))&&(n=1)}}return n}(a,e.maybeComponent):0,l=i||Yo;return"["+a.map((function(t){return l(t,e)})).join(",")+"]"+(c?","+c:"")}}function Vo(t){return void 0!==t.for||"template"===t.tag||"slot"===t.tag}function Yo(t,e){return 1===t.type?No(t,e):3===t.type&&t.isComment?function(t){return"_e("+JSON.stringify(t.text)+")"}(t):function(t){return"_v("+(2===t.type?t.expression:qo(JSON.stringify(t.text)))+")"}(t)}function Ko(t){for(var e="",n="",r=0;r<t.length;r++){var i=t[r],a=qo(i.value);i.dynamic?n+=i.name+","+a+",":e+='"'+i.name+'":'+a+","}return e="{"+e.slice(0,-1)+"}",n?"_d("+e+",["+n.slice(0,-1)+"])":e}function qo(t){return t.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");function Jo(t,e){try{return new Function(t)}catch(n){return e.push({err:n,code:t}),j}}function Go(t){var e=Object.create(null);return function(n,r,i){(r=T({},r)).warn;delete r.warn;var a=r.delimiters?String(r.delimiters)+n:n;if(e[a])return e[a];var o=t(n,r);var s={},c=[];return s.render=Jo(o.render,c),s.staticRenderFns=o.staticRenderFns.map((function(t){return Jo(t,c)})),e[a]=s}}var Zo,Xo,Qo=(Zo=function(t,e){var n=oo(t.trim(),e);!1!==e.optimize&&Co(n,e);var r=Mo(n,e);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}},function(t){function e(e,n){var r=Object.create(t),i=[],a=[];if(n)for(var o in n.modules&&(r.modules=(t.modules||[]).concat(n.modules)),n.directives&&(r.directives=T(Object.create(t.directives||null),n.directives)),n)"modules"!==o&&"directives"!==o&&(r[o]=n[o]);r.warn=function(t,e,n){(n?a:i).push(t)};var s=Zo(e.trim(),r);return s.errors=i,s.tips=a,s}return{compile:e,compileToFunctions:Go(e)}})(_o),ts=(Qo.compile,Qo.compileToFunctions);function es(t){return(Xo=Xo||document.createElement("div")).innerHTML=t?'<a href="\n"/>':'<div a="\n"/>',Xo.innerHTML.indexOf("&#10;")>0}var ns=!!K&&es(!1),rs=!!K&&es(!0),is=C((function(t){var e=tr(t);return e&&e.innerHTML})),as=$n.prototype.$mount;$n.prototype.$mount=function(t,e){if((t=t&&tr(t))===document.body||t===document.documentElement)return this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&(r=is(r));else{if(!r.nodeType)return this;r=r.innerHTML}else t&&(r=function(t){if(t.outerHTML)return t.outerHTML;var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML}(t));if(r){0;var i=ts(r,{outputSourceRange:!1,shouldDecodeNewlines:ns,shouldDecodeNewlinesForHref:rs,delimiters:n.delimiters,comments:n.comments},this),a=i.render,o=i.staticRenderFns;n.render=a,n.staticRenderFns=o}}return as.call(this,t,e)},$n.compile=ts,e.a=$n}).call(this,n(6),n(17).setImmediate)},function(t,e,n){"use strict";var r=n(1),i=n.n(r),a=n(2),o=n.n(a)()(i.a);o.push([t.i,'\ndiv[data-v-a8e61a62]{\r\n  float: left;\n}\n.products[data-v-a8e61a62]{\r\n  width: 80%;\r\n  margin: 0 auto;\r\n  padding: 30px 10% 30px;\r\n  background: rgb(89, 89, 89);\n}\n.pro-col[data-v-a8e61a62]{\r\n  width: 25%;\r\n  margin-right: 32px;\r\n  overflow: hidden;\r\n  display: inline-block;\n}\n.pro-group-title[data-v-a8e61a62]{\r\n  font-size: 18px;\r\n    color: #fff;\r\n    padding: 15px 0;\r\n    margin-bottom: 24px;\r\n    font-weight: 400;\r\n    text-align: left;\r\n    position: relative;\r\n    line-height: 28px;\r\n    font-family: 微软雅黑;\n}\n.pro-group-title[data-v-a8e61a62]::after{\r\n  content: " ";\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 1px;\r\n    border-top: 1px solid #9b9ea4;\r\n    -webkit-transform-origin: 0 0;\r\n    transform-origin: 0 0;\r\n    -webkit-transform: scaleY(.5);\r\n    transform: scaleY(.5);\n}\n.pro-block[data-v-0ef3150e][data-v-a8e61a62] {\r\n    margin-bottom: 24px;\r\n    cursor: pointer;\n}\n.pro-thumb[data-v-0ef3150e][data-v-a8e61a62] {\r\n    width: 52px;\r\n    height: 52px;\r\n    margin-right: 20px;\r\n    -webkit-box-align: center;\r\n    -ms-flex-align: center;\r\n    align-items: center;\r\n    float: left;\n}\n.pro-title[data-v-0ef3150e][data-v-a8e61a62] {\r\n    color: #eaeaea;\r\n    font-size: 16px;\r\n    text-align: left;\r\n    font-weight: 400;\r\n    line-height: 22px;\r\n    margin-top: 8px;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\n}\n.pro-summary[data-v-0ef3150e][data-v-a8e61a62] {\r\n    font-size: 12px;\r\n    color: #caced4;\r\n    line-height: 20px;\r\n    text-align: left;\n}\n.kaiti[data-v-a8e61a62] {\r\n    font-family: KaiTi;\n}\r\n',"",{version:3,sources:["webpack://./src/component/products.vue"],names:[],mappings:";AAoDA;EACA,WAAA;AACA;AACA;EACA,UAAA;EACA,cAAA;EACA,sBAAA;EACA,2BAAA;AACA;AACA;EACA,UAAA;EACA,kBAAA;EACA,gBAAA;EACA,qBAAA;AACA;AACA;EACA,eAAA;IACA,WAAA;IACA,eAAA;IACA,mBAAA;IACA,gBAAA;IACA,gBAAA;IACA,kBAAA;IACA,iBAAA;IACA,iBAAA;AACA;AACA;EACA,YAAA;IACA,kBAAA;IACA,OAAA;IACA,SAAA;IACA,WAAA;IACA,WAAA;IACA,6BAAA;IACA,6BAAA;IACA,qBAAA;IACA,6BAAA;IACA,qBAAA;AACA;AACA;IACA,mBAAA;IACA,eAAA;AACA;AACA;IACA,WAAA;IACA,YAAA;IACA,kBAAA;IACA,yBAAA;IACA,sBAAA;IACA,mBAAA;IACA,WAAA;AACA;AACA;IACA,cAAA;IACA,eAAA;IACA,gBAAA;IACA,gBAAA;IACA,iBAAA;IACA,eAAA;IACA,mBAAA;IACA,uBAAA;IACA,gBAAA;AACA;AACA;IACA,eAAA;IACA,cAAA;IACA,iBAAA;IACA,gBAAA;AACA;AACA;IACA,kBAAA;AACA",sourcesContent:['<template>\r\n  <div class="products product">\r\n     <div data-v-0ef3150e="" class="pro-col">\r\n       <h4 data-v-0ef3150e="" class="pro-group-title">智能用品</h4>\r\n       <div data-v-0ef3150e="" class="flex-row pro-block">\r\n         <img data-v-0ef3150e="" src="/img/1545100156_bcd7cf4cfdeae8b8df43dea36a52b3c9.png" alt="" class="pro-thumb">\r\n         <div data-v-0ef3150e=""  @click="pro">\r\n           <h5 data-v-0ef3150e="" class="pro-title pro-h5">宠物饮水机</h5>\r\n           <p data-v-0ef3150e="" class="pro-summary kaiti">呵护爱宠 健康饮水</p>\r\n           </div>\r\n           </div><br>\r\n           <div data-v-0ef3150e="" class="flex-row pro-block">\r\n             <img data-v-0ef3150e="" src="/img/1569566741_5c3d477f9293108d105cc14faba2d9b2.png" alt="" class="pro-thumb">\r\n             <div data-v-0ef3150e="">\r\n               <h5 data-v-0ef3150e="" class="pro-title pro-h5">智能宠物零食机</h5>\r\n               <p data-v-0ef3150e="" class="pro-summary kaiti">智能“逗猫” 远程“遛狗”</p>\r\n               </div>\r\n               </div>\r\n        </div>\r\n        <div data-v-0ef3150e="" class="pro-col">\r\n            <h4 data-v-0ef3150e="" class="pro-group-title">清洁</h4>\r\n            \r\n        </div>\r\n            <div data-v-0ef3150e="" class="pro-col">\r\n       <h4 data-v-0ef3150e="" class="pro-group-title">配件</h4>\r\n       <div data-v-0ef3150e="" class="flex-row pro-block">\r\n         <img data-v-0ef3150e="" src="/img/1545100779_5bfb0d5fa046511a64dc7cad9cff8d34.png" alt="" class="pro-thumb">\r\n         <div data-v-0ef3150e="">\r\n           <h5 data-v-0ef3150e="" class="pro-title pro-h5">宠物饮水机滤芯</h5>\r\n           <p data-v-0ef3150e="" class="pro-summary kaiti">优质滤材 四重过滤</p>\r\n           </div>\r\n           </div><br>\r\n        </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name:"products",\r\n data(){\r\n   return{}\r\n } ,\r\n   methods:{\r\n    pro(){\r\n      location.href="product.html"\r\n    }\r\n  },\r\n mounted(){\r\n\r\n }\r\n}\r\n<\/script>\r\n<style scoped>\r\ndiv{\r\n  float: left;\r\n}\r\n.products{\r\n  width: 80%;\r\n  margin: 0 auto;\r\n  padding: 30px 10% 30px;\r\n  background: rgb(89, 89, 89);\r\n}\r\n.pro-col{\r\n  width: 25%;\r\n  margin-right: 32px;\r\n  overflow: hidden;\r\n  display: inline-block;\r\n}\r\n.pro-group-title{\r\n  font-size: 18px;\r\n    color: #fff;\r\n    padding: 15px 0;\r\n    margin-bottom: 24px;\r\n    font-weight: 400;\r\n    text-align: left;\r\n    position: relative;\r\n    line-height: 28px;\r\n    font-family: 微软雅黑;\r\n}\r\n.pro-group-title::after{\r\n  content: " ";\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 1px;\r\n    border-top: 1px solid #9b9ea4;\r\n    -webkit-transform-origin: 0 0;\r\n    transform-origin: 0 0;\r\n    -webkit-transform: scaleY(.5);\r\n    transform: scaleY(.5);\r\n}\r\n.pro-block[data-v-0ef3150e] {\r\n    margin-bottom: 24px;\r\n    cursor: pointer;\r\n}\r\n.pro-thumb[data-v-0ef3150e] {\r\n    width: 52px;\r\n    height: 52px;\r\n    margin-right: 20px;\r\n    -webkit-box-align: center;\r\n    -ms-flex-align: center;\r\n    align-items: center;\r\n    float: left;\r\n}\r\n.pro-title[data-v-0ef3150e] {\r\n    color: #eaeaea;\r\n    font-size: 16px;\r\n    text-align: left;\r\n    font-weight: 400;\r\n    line-height: 22px;\r\n    margin-top: 8px;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n}\r\n.pro-summary[data-v-0ef3150e] {\r\n    font-size: 12px;\r\n    color: #caced4;\r\n    line-height: 20px;\r\n    text-align: left;\r\n}\r\n.kaiti {\r\n    font-family: KaiTi;\r\n}\r\n</style>'],sourceRoot:""}]),e.a=o},function(t,e,n){"use strict";var r=n(1),i=n.n(r),a=n(2),o=n.n(a)()(i.a);o.push([t.i,"\n.header[data-v-5ba047eb]{\r\n  height: 72px;\r\n  width: 100%;\r\n  background: #000;\r\n  color: #fff;\n}\nul[data-v-5ba047eb],ol[data-v-5ba047eb],li[data-v-5ba047eb]{\r\n  list-style-type: none;\r\n  height: 72px;\r\n  line-height: 72px;\r\n  padding-left: 20px;\n}\na[data-v-5ba047eb]{\r\n  color: #fff;\r\n  text-decoration: none;\n}\n.header>.logo[data-v-5ba047eb]{\r\n  float: left;\r\n  width: 83px;\r\n  height: 35px;\r\n  margin-top: 15px;\r\n  margin-left: 10%;\r\n  margin-right: 15%;\n}\n.header>ul[data-v-5ba047eb]{\r\n  width: auto;\r\n  float: left;\r\n  margin-right: 10%;\n}\n.header>ul>li[data-v-5ba047eb]{\r\n  height: 72px;\r\n  line-height: 72px;\r\n  float: left;\r\n  width: 100px;\r\n  padding-left: 20px;\r\n  cursor: pointer;\r\n  font-family: 微软雅黑;\r\n  font-size: 16px;\r\n  color: #ccc;\n}\n.one[data-v-5ba047eb]{\r\n  border: 1px solid #000;\r\n  background: #000;\r\n  color: #fff;\r\n  height: auto;\r\n  width: 150px;\r\n  margin: 0;\r\n  padding: 0;\r\n  z-index: 9999 !important;\r\n  position: absolute;\r\n  margin-left: -20px;\n}\n.one>li>a[data-v-5ba047eb]{\r\n  color: #ccc;\r\n  font-size: 16px;\n}\n.one>li[data-v-5ba047eb]:hover{\r\n  background: #444;\n}\n.header>.shopping[data-v-5ba047eb]{\r\n  width: 20px;\r\n  height: 20px;\r\n  margin-top: 30px;\n}\n.product[data-v-5ba047eb]{\r\n  z-index: 999;\r\n  position: absolute;\r\n  left: 0;\n}\r\n","",{version:3,sources:["webpack://./src/component/headers.vue"],names:[],mappings:";AAqFA;EACA,YAAA;EACA,WAAA;EACA,gBAAA;EACA,WAAA;AACA;AACA;EACA,qBAAA;EACA,YAAA;EACA,iBAAA;EACA,kBAAA;AACA;AACA;EACA,WAAA;EACA,qBAAA;AAEA;AACA;EACA,WAAA;EACA,WAAA;EACA,YAAA;EACA,gBAAA;EACA,gBAAA;EACA,iBAAA;AACA;AACA;EACA,WAAA;EACA,WAAA;EACA,iBAAA;AACA;AACA;EACA,YAAA;EACA,iBAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;EACA,eAAA;EACA,iBAAA;EACA,eAAA;EACA,WAAA;AACA;AACA;EACA,sBAAA;EACA,gBAAA;EACA,WAAA;EACA,YAAA;EACA,YAAA;EACA,SAAA;EACA,UAAA;EACA,wBAAA;EACA,kBAAA;EACA,kBAAA;AAEA;AACA;EACA,WAAA;EACA,eAAA;AACA;AACA;EACA,gBAAA;AACA;AACA;EACA,WAAA;EACA,YAAA;EACA,gBAAA;AACA;AACA;EACA,YAAA;EACA,kBAAA;EACA,OAAA;AACA",sourcesContent:['<template>\r\n <div class="header">\r\n    <img src="/img/logo.png" class="logo">\r\n  <ul>\r\n    <li>首页</li>\r\n    <li @mouseenter="changeDown" @mouseleave="changeUp">产品\r\n      <products v-if="hide"></products>\r\n    </li>\r\n    <li @mouseenter="changeDownOne" @mouseleave="changeUpOne">媒体\r\n       <ul v-if="show" class="one">\r\n        <li ><a href="news.html">新闻</a></li>\r\n        <li><a href="#">视频</a></li>\r\n      </ul>\r\n    </li>\r\n    <li @mouseenter="changeDownTwo" @mouseleave="changeUpTwo">关于\r\n      <ul class="one" v-if="showDown">\r\n        <li><a href="about.html">品牌故事</a></li>\r\n        <li><a href="#">团队介绍</a></li>\r\n        <li>商务合作</li>\r\n        <li>工作机会</li>\r\n      </ul>\r\n    </li>\r\n    <li @mouseenter="changeDownThree" @mouseleave="changeUpThree">支持\r\n      <ul class="one" v-if="showUp">\r\n        <li>常见问题</li>\r\n        <li>售后服务</li>\r\n        <li>版权声明</li>\r\n        <li>隐私政策</li>\r\n      </ul>\r\n    </li>\r\n  </ul>\r\n  <img src="/img/shopping.png" class="shopping">\r\n  \r\n </div>\r\n</template>\r\n<script>\r\nimport vue from \'vue\'\r\nimport products from \'./products.vue\'\r\n\r\nexport default {\r\n  name:"headers",\r\n  data(){\r\n    return{\r\n      show:false,\r\n      showDown:false,\r\n      showUp:false,\r\n      hide:false\r\n    }\r\n  },\r\n  methods:{\r\n    changeDownOne:function(){\r\n        this.show=true\r\n      \r\n    },\r\n    changeUpOne:function(){\r\n      this.show=false\r\n     console.log(111);\r\n    },\r\n    changeDownTwo:function(){\r\n      this.showDown=true\r\n    },\r\n    changeUpTwo:function(){\r\n      this.showDown=false\r\n    },\r\n    changeDownThree:function(){\r\n      this.showUp=true\r\n    },\r\n    changeUpThree:function(){\r\n      this.showUp=false\r\n    },\r\n    changeDown:function(){\r\n      this.hide=true\r\n    },\r\n    changeUp:function(){\r\n      this.hide=false\r\n    }\r\n  },\r\n  mounted:{\r\n\r\n  },\r\n  components:{products}\r\n  \r\n}\r\n<\/script>\r\n<style scoped>\r\n.header{\r\n  height: 72px;\r\n  width: 100%;\r\n  background: #000;\r\n  color: #fff;\r\n}\r\nul,ol,li{\r\n  list-style-type: none;\r\n  height: 72px;\r\n  line-height: 72px;\r\n  padding-left: 20px;\r\n}\r\na{\r\n  color: #fff;\r\n  text-decoration: none;\r\n  \r\n}\r\n.header>.logo{\r\n  float: left;\r\n  width: 83px;\r\n  height: 35px;\r\n  margin-top: 15px;\r\n  margin-left: 10%;\r\n  margin-right: 15%;\r\n}\r\n.header>ul{\r\n  width: auto;\r\n  float: left;\r\n  margin-right: 10%;\r\n}\r\n.header>ul>li{\r\n  height: 72px;\r\n  line-height: 72px;\r\n  float: left;\r\n  width: 100px;\r\n  padding-left: 20px;\r\n  cursor: pointer;\r\n  font-family: 微软雅黑;\r\n  font-size: 16px;\r\n  color: #ccc;\r\n}\r\n.one{\r\n  border: 1px solid #000;\r\n  background: #000;\r\n  color: #fff;\r\n  height: auto;\r\n  width: 150px;\r\n  margin: 0;\r\n  padding: 0;\r\n  z-index: 9999 !important;\r\n  position: absolute;\r\n  margin-left: -20px;\r\n  \r\n}\r\n.one>li>a{\r\n  color: #ccc;\r\n  font-size: 16px;\r\n}\r\n.one>li:hover{\r\n  background: #444;\r\n}\r\n.header>.shopping{\r\n  width: 20px;\r\n  height: 20px;\r\n  margin-top: 30px;\r\n}\r\n.product{\r\n  z-index: 999;\r\n  position: absolute;\r\n  left: 0;\r\n}\r\n</style>'],sourceRoot:""}]),e.a=o},function(t,e,n){"use strict";var r=n(1),i=n.n(r),a=n(2),o=n.n(a)()(i.a);o.push([t.i,"\nul[data-v-56862d9d],ol[data-v-56862d9d],li[data-v-56862d9d]{\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\n}\na[data-v-56862d9d]{\r\n  text-decoration: none;\r\n  color: #caced4;\n}\na[data-v-56862d9d]:hover{\r\n  color: #fff;\n}\n.footer[data-v-56862d9d]{\r\n  width: 88%;\r\n  background: #404040;\r\n  color: #fff;\r\n  padding-left: 12%;\r\n  padding-top: 100px;\n}\ndiv[data-v-56862d9d]{\r\n  float: left;\n}\n.news[data-v-56862d9d]{\r\n  width: 300px;\r\n  overflow: hidden;\r\n  margin-right:120px ;\n}\n.news>h4[data-v-56862d9d]{\r\n  height: 44px;\r\n  line-height: 44px;\n}\n.news>ul>li[data-v-56862d9d]{\r\n  width: 300px;\r\n  height: 44px;\r\n  line-height: 44px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  margin-right: 120px;\r\n  margin-bottom: 2px;\r\n  border-bottom:1px dashed #656b73  ;\n}\n.pub[data-v-56862d9d]{\r\n  margin-right: 120px;\n}\n.pub>ul>h4[data-v-56862d9d]{\r\n  \r\n  height: 44px;\r\n  line-height: 44px;\r\n  font-size: 16px;\n}\n.pub>ul>li[data-v-56862d9d]{\r\n  line-height: 44px;\r\n  font-size: 14px;\n}\n.bottom[data-v-56862d9d]{\r\n  float: left;\r\n  width: 100%;\r\n  color: #caced4;\r\n  margin: 50px 0 ;\n}\n.bottom>p[data-v-56862d9d]{\r\n float: left;\r\n margin-right: 120px;\n}\n.footer-flow[data-v-56862d9d]{\r\n  position: relative;\n}\n.footer-flow>h1[data-v-56862d9d]{\r\n  font-size: 20px;\r\n  color: #fff;\r\n  line-height: 30px;\r\n  text-align: right;\n}\n.footer-flow>p[data-v-56862d9d]{\r\n  text-align: right;\n}\n.footer-code[data-v-56862d9d]{\r\n  text-align: center;\n}\n.footer-code>img[data-v-56862d9d]{\r\n  width: 60px;\r\n  height: 60px;\n}\r\n","",{version:3,sources:["webpack://./src/component/footers.vue"],names:[],mappings:";AA0DA;EACA,qBAAA;EACA,UAAA;EACA,SAAA;AACA;AACA;EACA,qBAAA;EACA,cAAA;AACA;AACA;EACA,WAAA;AACA;AACA;EACA,UAAA;EACA,mBAAA;EACA,WAAA;EACA,iBAAA;EACA,kBAAA;AACA;AACA;EACA,WAAA;AACA;AACA;EACA,YAAA;EACA,gBAAA;EACA,mBAAA;AAGA;AACA;EACA,YAAA;EACA,iBAAA;AACA;AACA;EACA,YAAA;EACA,YAAA;EACA,iBAAA;EACA,gBAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;EACA,mBAAA;EACA,kBAAA;EACA,kCAAA;AACA;AACA;EACA,mBAAA;AACA;AACA;;EAEA,YAAA;EACA,iBAAA;EACA,eAAA;AACA;AACA;EACA,iBAAA;EACA,eAAA;AACA;AACA;EACA,WAAA;EACA,WAAA;EACA,cAAA;EACA,eAAA;AACA;AACA;CACA,WAAA;CACA,mBAAA;AACA;AACA;EACA,kBAAA;AACA;AACA;EACA,eAAA;EACA,WAAA;EACA,iBAAA;EACA,iBAAA;AACA;AACA;EACA,iBAAA;AACA;AACA;EACA,kBAAA;AACA;AACA;EACA,WAAA;EACA,YAAA;AAEA",sourcesContent:['<template>\r\n  <div class="footer">\r\n    <div class="news">\r\n      <ul>\r\n        <h4>新闻</h4>\r\n        <li><a href="#">小米有品上架专为猫猫狗狗打造的“第一台饮水机”？！</a></li>\r\n        <li><a href="#">选择猫猫狗狗宠物饮水机，让你的爱宠喝出健康，喝出乐趣</a></li>\r\n        <li><a href="#">选择猫猫狗狗宠物饮水机，让你的爱宠喝出健康，喝出乐趣</a></li>\r\n        <li><a href="#">解放铲屎官，猫猫狗狗宠物饮水机体验</a></li>\r\n      </ul>\r\n    </div>\r\n    <div  class="pub">\r\n      <ul>\r\n        <h4>关于我们</h4>\r\n        <li v-for="(v,index) in about" :key="index"><a href="#">{{v}}</a></li>\r\n      </ul>\r\n    </div>\r\n    <div class="pub" >\r\n      <ul>\r\n        <h4>支持</h4>\r\n        <li v-for="(v,index) in suppose" :key="index"><a href="#">{{v}}</a></li>\r\n      </ul>\r\n    </div>\r\n    <div class="pub">\r\n      <ul>\r\n        <h4>关注我们</h4>\r\n        <li v-for="(v,index) in ours" :key="index"><a href="#">{{v}}</a></li>\r\n      </ul>\r\n    </div>\r\n    <div class="bottom">\r\n      <p>Copyright © 2018 Kitten&Puppy Co.ltd All rights reserved. 京ICP备18045044号-1</p>\r\n      <div  style="display: flex;">\r\n        <div class="text-right footer-flow" style="padding-right: 20px; margin-top: -2px;">\r\n          <h1  class="flow-font">400-999-2250</h1>\r\n          <p  class="flow-title">周一到周日9:00-22:00</p>\r\n          <p  class="flow-title">(仅收市话费)</p>\r\n          <p  class="flow-title">商务邮箱：business@mmgg.fun</p>\r\n          </div>\r\n          <div  class="footer-code">\r\n            <img  src="/img/public-account.37fd1f95.png" alt="" class="img-code">\r\n            <p  class="code-title">扫码关注官方微信</p>\r\n            </div>\r\n            </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data(){\r\n    return{\r\n      about:["品牌故事","团队介绍","商务合作","工作机会"],\r\n      suppose:["常见问题","售后服务","版权声明","隐私政策"],\r\n      ours:["官方微信","新浪微博","一日猫"]\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n<style scoped>\r\nul,ol,li{\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\na{\r\n  text-decoration: none;\r\n  color: #caced4;\r\n}\r\na:hover{\r\n  color: #fff;\r\n}\r\n.footer{\r\n  width: 88%;\r\n  background: #404040;\r\n  color: #fff;\r\n  padding-left: 12%;\r\n  padding-top: 100px;\r\n}\r\ndiv{\r\n  float: left;\r\n}\r\n.news{\r\n  width: 300px;\r\n  overflow: hidden;\r\n  margin-right:120px ;\r\n\r\n\r\n}\r\n.news>h4{\r\n  height: 44px;\r\n  line-height: 44px;\r\n}\r\n.news>ul>li{\r\n  width: 300px;\r\n  height: 44px;\r\n  line-height: 44px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  margin-right: 120px;\r\n  margin-bottom: 2px;\r\n  border-bottom:1px dashed #656b73  ;\r\n}\r\n.pub{\r\n  margin-right: 120px;\r\n}\r\n.pub>ul>h4{\r\n  \r\n  height: 44px;\r\n  line-height: 44px;\r\n  font-size: 16px;\r\n}\r\n.pub>ul>li{\r\n  line-height: 44px;\r\n  font-size: 14px;\r\n}\r\n.bottom{\r\n  float: left;\r\n  width: 100%;\r\n  color: #caced4;\r\n  margin: 50px 0 ;\r\n}\r\n.bottom>p{\r\n float: left;\r\n margin-right: 120px;\r\n}\r\n.footer-flow{\r\n  position: relative;\r\n}\r\n.footer-flow>h1{\r\n  font-size: 20px;\r\n  color: #fff;\r\n  line-height: 30px;\r\n  text-align: right;\r\n}\r\n.footer-flow>p{\r\n  text-align: right;\r\n}\r\n.footer-code{\r\n  text-align: center;\r\n}\r\n.footer-code>img{\r\n  width: 60px;\r\n  height: 60px;\r\n  \r\n}\r\n</style>'],sourceRoot:""}]),e.a=o},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"header"},[n("img",{staticClass:"logo",attrs:{src:"/img/logo.png"}}),t._v(" "),n("ul",[n("li",[t._v("首页")]),t._v(" "),n("li",{on:{mouseenter:t.changeDown,mouseleave:t.changeUp}},[t._v("产品\n     "),t.hide?n("products"):t._e()],1),t._v(" "),n("li",{on:{mouseenter:t.changeDownOne,mouseleave:t.changeUpOne}},[t._v("媒体\n      "),t.show?n("ul",{staticClass:"one"},[t._m(0),t._v(" "),t._m(1)]):t._e()]),t._v(" "),n("li",{on:{mouseenter:t.changeDownTwo,mouseleave:t.changeUpTwo}},[t._v("关于\n     "),t.showDown?n("ul",{staticClass:"one"},[t._m(2),t._v(" "),t._m(3),t._v(" "),n("li",[t._v("商务合作")]),t._v(" "),n("li",[t._v("工作机会")])]):t._e()]),t._v(" "),n("li",{on:{mouseenter:t.changeDownThree,mouseleave:t.changeUpThree}},[t._v("支持\n     "),t.showUp?n("ul",{staticClass:"one"},[n("li",[t._v("常见问题")]),t._v(" "),n("li",[t._v("售后服务")]),t._v(" "),n("li",[t._v("版权声明")]),t._v(" "),n("li",[t._v("隐私政策")])]):t._e()])]),t._v(" "),n("img",{staticClass:"shopping",attrs:{src:"/img/shopping.png"}})])};r._withStripped=!0;var i={name:"headers",data:function(){return{show:!1,showDown:!1,showUp:!1,hide:!1}},methods:{changeDownOne:function(){this.show=!0},changeUpOne:function(){this.show=!1,console.log(111)},changeDownTwo:function(){this.showDown=!0},changeUpTwo:function(){this.showDown=!1},changeDownThree:function(){this.showUp=!0},changeUpThree:function(){this.showUp=!1},changeDown:function(){this.hide=!0},changeUp:function(){this.hide=!1}},mounted:{},components:{products:n(5).a}},a=n(0),o=n.n(a),s=n(9),c={insert:"head",singleton:!1},l=(o()(s.a,c),s.a.locals,n(3)),u=Object(l.a)(i,r,[function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("a",{attrs:{href:"news.html"}},[this._v("新闻")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("a",{attrs:{href:"#"}},[this._v("视频")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("a",{attrs:{href:"about.html"}},[this._v("品牌故事")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("a",{attrs:{href:"#"}},[this._v("团队介绍")])])}],!1,null,"5ba047eb",null);u.options.__file="src/component/headers.vue";e.a=u.exports},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"footer"},[t._m(0),t._v(" "),n("div",{staticClass:"pub"},[n("ul",[n("h4",[t._v("关于我们")]),t._v(" "),t._l(t.about,(function(e,r){return n("li",{key:r},[n("a",{attrs:{href:"#"}},[t._v(t._s(e))])])}))],2)]),t._v(" "),n("div",{staticClass:"pub"},[n("ul",[n("h4",[t._v("支持")]),t._v(" "),t._l(t.suppose,(function(e,r){return n("li",{key:r},[n("a",{attrs:{href:"#"}},[t._v(t._s(e))])])}))],2)]),t._v(" "),n("div",{staticClass:"pub"},[n("ul",[n("h4",[t._v("关注我们")]),t._v(" "),t._l(t.ours,(function(e,r){return n("li",{key:r},[n("a",{attrs:{href:"#"}},[t._v(t._s(e))])])}))],2)]),t._v(" "),t._m(1)])};r._withStripped=!0;var i={data:function(){return{about:["品牌故事","团队介绍","商务合作","工作机会"],suppose:["常见问题","售后服务","版权声明","隐私政策"],ours:["官方微信","新浪微博","一日猫"]}}},a=n(0),o=n.n(a),s=n(10),c={insert:"head",singleton:!1},l=(o()(s.a,c),s.a.locals,n(3)),u=Object(l.a)(i,r,[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"news"},[n("ul",[n("h4",[t._v("新闻")]),t._v(" "),n("li",[n("a",{attrs:{href:"#"}},[t._v("小米有品上架专为猫猫狗狗打造的“第一台饮水机”？！")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#"}},[t._v("选择猫猫狗狗宠物饮水机，让你的爱宠喝出健康，喝出乐趣")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#"}},[t._v("选择猫猫狗狗宠物饮水机，让你的爱宠喝出健康，喝出乐趣")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#"}},[t._v("解放铲屎官，猫猫狗狗宠物饮水机体验")])])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"bottom"},[n("p",[t._v("Copyright © 2018 Kitten&Puppy Co.ltd All rights reserved. 京ICP备18045044号-1")]),t._v(" "),n("div",{staticStyle:{display:"flex"}},[n("div",{staticClass:"text-right footer-flow",staticStyle:{"padding-right":"20px","margin-top":"-2px"}},[n("h1",{staticClass:"flow-font"},[t._v("400-999-2250")]),t._v(" "),n("p",{staticClass:"flow-title"},[t._v("周一到周日9:00-22:00")]),t._v(" "),n("p",{staticClass:"flow-title"},[t._v("(仅收市话费)")]),t._v(" "),n("p",{staticClass:"flow-title"},[t._v("商务邮箱：business@mmgg.fun")])]),t._v(" "),n("div",{staticClass:"footer-code"},[n("img",{staticClass:"img-code",attrs:{src:"/img/public-account.37fd1f95.png",alt:""}}),t._v(" "),n("p",{staticClass:"code-title"},[t._v("扫码关注官方微信")])])])])}],!1,null,"56862d9d",null);u.options.__file="src/component/footers.vue";e.a=u.exports},function(t,e,n){"use strict";var r=n(1),i=n.n(r),a=n(2),o=n.n(a)()(i.a);o.push([t.i,"\n*[data-v-58765e0a]{\r\n  margin: 0 auto;\r\n  font-family: 微软雅黑;\n}\n.container[data-v-58765e0a]{\r\n  width: 100%;\r\n  max-width: 1080px;\r\n margin: 0 auto;\r\n display: flex;\r\n padding-bottom: 80px;\n}\n.container>.list[data-v-58765e0a]{\r\n  width: 33%;\r\n  margin: 0 30px;\r\n  text-align: center;\r\n  cursor: pointer;\n}\n.container>.list>img[data-v-58765e0a]{\r\n  width: 77.78%;\r\n  height: 77.78%;\n}\n.container>.list>h3[data-v-58765e0a]{\r\n  font-size: 24px;\r\n  margin-bottom: 10px;\r\n  font-weight: 400;\n}\n.container>.list>p[data-v-58765e0a]{\r\n  font-size: 18px;\r\n  color: #666;\r\n  padding: 0 55px;\n}\r\n\r\n","",{version:3,sources:["webpack://./src/component/contents-index.vue"],names:[],mappings:";AA2BA;EACA,cAAA;EACA,iBAAA;AACA;AACA;EACA,WAAA;EACA,iBAAA;CACA,cAAA;CACA,aAAA;CACA,oBAAA;AACA;AACA;EACA,UAAA;EACA,cAAA;EACA,kBAAA;EACA,eAAA;AACA;AACA;EACA,aAAA;EACA,cAAA;AACA;AACA;EACA,eAAA;EACA,mBAAA;EACA,gBAAA;AACA;AACA;EACA,eAAA;EACA,WAAA;EACA,eAAA;AACA",sourcesContent:['<template>\r\n  <div class="container">\r\n    <div class="list">\r\n      <img src="/img/1545205287_222a3e965c1e790e415d0625ac4295b1.jpg">\r\n      <h3>宠物饮水机滤芯</h3>\r\n      <p>优质滤材 四重过滤</p>\r\n    </div>\r\n     <div class="list">\r\n      <img src="/img/1569570372_69929adc53bb45f5309cea8a9d3447c2.jpg">\r\n      <h3>智能宠物零食机</h3>\r\n      <p>智能“逗猫” 远程“遛狗”</p>\r\n    </div>\r\n    <div class="list">\r\n      <img src="../../dist/img/1546089694_d183db447c17db4bec0ba5110d0653ef.jpg">\r\n      <h3>宠物饮水机</h3>\r\n      <p>呵护爱宠 健康饮水</p>\r\n    </div>\r\n    <div class="on">\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  \r\n}\r\n<\/script>\r\n<style scoped>\r\n*{\r\n  margin: 0 auto;\r\n  font-family: 微软雅黑;\r\n}\r\n.container{\r\n  width: 100%;\r\n  max-width: 1080px;\r\n margin: 0 auto;\r\n display: flex;\r\n padding-bottom: 80px;\r\n}\r\n.container>.list{\r\n  width: 33%;\r\n  margin: 0 30px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n}\r\n.container>.list>img{\r\n  width: 77.78%;\r\n  height: 77.78%;\r\n}\r\n.container>.list>h3{\r\n  font-size: 24px;\r\n  margin-bottom: 10px;\r\n  font-weight: 400;\r\n}\r\n.container>.list>p{\r\n  font-size: 18px;\r\n  color: #666;\r\n  padding: 0 55px;\r\n}\r\n\r\n</style>'],sourceRoot:""}]),e.a=o},function(t,e){var n,r,i=t.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(t){n=a}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(t){r=o}}();var c,l=[],u=!1,f=-1;function d(){u&&c&&(u=!1,c.length?l=c.concat(l):f=-1,l.length&&p())}function p(){if(!u){var t=s(d);u=!0;for(var e=l.length;e;){for(c=l,l=[];++f<e;)c&&c[f].run();f=-1,e=l.length}c=null,u=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function v(t,e){this.fun=t,this.array=e}function h(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new v(t,e)),1!==l.length||u||s(p)},v.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=h,i.addListener=h,i.once=h,i.off=h,i.removeListener=h,i.removeAllListeners=h,i.emit=h,i.prependListener=h,i.prependOnceListener=h,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";var r=function(){var t=this.$createElement;this._self._c;return this._m(0)},i=[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"container"},[r("div",{staticClass:"list"},[r("img",{attrs:{src:"/img/1545205287_222a3e965c1e790e415d0625ac4295b1.jpg"}}),t._v(" "),r("h3",[t._v("宠物饮水机滤芯")]),t._v(" "),r("p",[t._v("优质滤材 四重过滤")])]),t._v(" "),r("div",{staticClass:"list"},[r("img",{attrs:{src:"/img/1569570372_69929adc53bb45f5309cea8a9d3447c2.jpg"}}),t._v(" "),r("h3",[t._v("智能宠物零食机")]),t._v(" "),r("p",[t._v("智能“逗猫” 远程“遛狗”")])]),t._v(" "),r("div",{staticClass:"list"},[r("img",{attrs:{src:n(30)}}),t._v(" "),r("h3",[t._v("宠物饮水机")]),t._v(" "),r("p",[t._v("呵护爱宠 健康饮水")])]),t._v(" "),r("div",{staticClass:"on"})])}];r._withStripped=!0;var a={},o=n(0),s=n.n(o),c=n(13),l={insert:"head",singleton:!1},u=(s()(c.a,l),c.a.locals,n(3)),f=Object(u.a)(a,r,i,!1,null,"58765e0a",null);f.options.__file="src/component/contents-index.vue";e.a=f.exports},,function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function a(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new a(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new a(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(18),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(6))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,a,o,s,c=1,l={},u=!1,f=t.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(t);d=d&&d.setTimeout?d:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){v(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((a=new MessageChannel).port1.onmessage=function(t){v(t.data)},r=function(t){a.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){v(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(v,0,t)}:(o="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(o)&&v(+e.data.slice(o.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(o+e,"*")}),d.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return l[c]=i,r(c),c++},d.clearImmediate=p}function p(t){delete l[t]}function v(t){if(u)setTimeout(v,0,t);else{var e=l[t];if(e){u=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(void 0,n)}}(e)}finally{p(t),u=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(6),n(14))},,,,,,,,,,,,function(t,e,n){t.exports=n.p+"76308365dc32e32ba55bd48d3710d77b.jpg"},,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";var r=n(1),i=n.n(r),a=n(2),o=n.n(a)()(i.a);o.push([t.i,"\n.banner>img[data-v-66506fb2]{\r\n  width: 100%;\r\n  height: 400px;\n}\n.text[data-v-66506fb2]{\r\n    width: 100%;\r\n    height: 100%;\n}\n.text>h2[data-v-66506fb2]{\r\n    font-size: 36px;\r\n    font-family: PingFangSC-Medium;\r\n    font-weight: 500;\r\n    color: #111;\r\n    line-height: 48px;\r\n    text-align: center;\r\n    margin: 80px 0 30px;\n}\n.text>.contain[data-v-66506fb2]{\r\n    width: 720px;\r\n    margin: 0 auto;\r\n    font-family: PingFangSC-Regular;\r\n    color: #333;\n}\n.text>.contain>p[data-v-66506fb2]{\r\n    font-size: 16px;\r\n    line-height: 28px;\r\n    margin-bottom: 20px;\n}\r\n","",{version:3,sources:["webpack://./src/component/about.vue"],names:[],mappings:";AAeA;EACA,WAAA;EACA,aAAA;AACA;AACA;IACA,WAAA;IACA,YAAA;AACA;AACA;IACA,eAAA;IACA,8BAAA;IACA,gBAAA;IACA,WAAA;IACA,iBAAA;IACA,kBAAA;IACA,mBAAA;AACA;AACA;IACA,YAAA;IACA,cAAA;IACA,+BAAA;IACA,WAAA;AACA;AACA;IACA,eAAA;IACA,iBAAA;IACA,mBAAA;AACA",sourcesContent:['<template>\r\n  <div class="main">\r\n    <div class="banner">\r\n      <img src="/img/brandstory.bf4678c1.jpg" alt="">\r\n    </div>\r\n    <div class="text">\r\n      <h2>宠爱生活</h2>\r\n      <div class="contain">\r\n        <p>猫猫狗狗，一个专注宠物和人宠生活的先锋品牌。</p>\r\n        <p>一直以来，猫猫狗狗品牌都坚持打造好品味高性价比的宠物用户，坚持以粉丝用户思维推动宠物行业的变革升级，并且坚持整合优质供应链，坚持引入黑科技，为养宠爱宠用户持续打造好服务、好产品，创造更美好的萌宠生活。</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<style  scoped>\r\n.banner>img{\r\n  width: 100%;\r\n  height: 400px;\r\n}\r\n  .text{\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  .text>h2{\r\n    font-size: 36px;\r\n    font-family: PingFangSC-Medium;\r\n    font-weight: 500;\r\n    color: #111;\r\n    line-height: 48px;\r\n    text-align: center;\r\n    margin: 80px 0 30px;\r\n  }\r\n  .text>.contain{\r\n    width: 720px;\r\n    margin: 0 auto;\r\n    font-family: PingFangSC-Regular;\r\n    color: #333;\r\n  }\r\n    .text>.contain>p{\r\n    font-size: 16px;\r\n    line-height: 28px;\r\n    margin-bottom: 20px;\r\n    }\r\n</style>'],sourceRoot:""}]),e.a=o},,,,function(t,e,n){"use strict";n.r(e);var r=n(7),i=n(11),a=n(12),o=n(5),s=n(15),c=function(){var t=this.$createElement;this._self._c;return this._m(0)};c._withStripped=!0;var l=n(0),u=n.n(l),f=n(57),d={insert:"head",singleton:!1},p=(u()(f.a,d),f.a.locals,n(3)),v=Object(p.a)({},c,[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"main"},[e("div",{staticClass:"banner"},[e("img",{attrs:{src:"/img/brandstory.bf4678c1.jpg",alt:""}})]),this._v(" "),e("div",{staticClass:"text"},[e("h2",[this._v("宠爱生活")]),this._v(" "),e("div",{staticClass:"contain"},[e("p",[this._v("猫猫狗狗，一个专注宠物和人宠生活的先锋品牌。")]),this._v(" "),e("p",[this._v("一直以来，猫猫狗狗品牌都坚持打造好品味高性价比的宠物用户，坚持以粉丝用户思维推动宠物行业的变革升级，并且坚持整合优质供应链，坚持引入黑科技，为养宠爱宠用户持续打造好服务、好产品，创造更美好的萌宠生活。")])])])])}],!1,null,"66506fb2",null);v.options.__file="src/component/about.vue";var h=v.exports;new r.a({el:"#about",data:{},components:{headers:i.a,footers:a.a,products:o.a,contentsindex:s.a,about:h}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L3Byb2R1Y3RzLnZ1ZT82NjQzIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50L3Byb2R1Y3RzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L3Byb2R1Y3RzLnZ1ZT9lNDJlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvcHJvZHVjdHMudnVlP2JmMDMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9wcm9kdWN0cy52dWUiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L3Byb2R1Y3RzLnZ1ZT9lYzk2Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvaGVhZGVycy52dWU/YjY3YyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Zvb3RlcnMudnVlPzg0NmMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9oZWFkZXJzLnZ1ZT9iN2IxIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvaGVhZGVycy52dWU/MzgxNiIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudC9oZWFkZXJzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2hlYWRlcnMudnVlPzFmNTAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9oZWFkZXJzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Zvb3RlcnMudnVlPzVkNmYiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnQvZm9vdGVycy52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9mb290ZXJzLnZ1ZT8yMDNmIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvZm9vdGVycy52dWU/MDYyOSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Zvb3RlcnMudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvY29udGVudHMtaW5kZXgudnVlP2EwYTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2NvbnRlbnRzLWluZGV4LnZ1ZT9iNThjIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50L2NvbnRlbnRzLWluZGV4LnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2NvbnRlbnRzLWluZGV4LnZ1ZT81M2VlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvY29udGVudHMtaW5kZXgudnVlPzMzYTQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9jb250ZW50cy1pbmRleC52dWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9pbWcvMTU0NjA4OTY5NF9kMTgzZGI0NDdjMTdkYjRiZWMwYmE1MTEwZDA2NTNlZi5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9hYm91dC52dWU/NTNhNCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Fib3V0LnZ1ZT83YzBiIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvYWJvdXQudnVlPzExOTIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9hYm91dC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fib3V0LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwid2luZG93IiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibGVuZ3RoIiwibW9kdWxlc1RvRG9tIiwibGlzdCIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpdGVtIiwiaWQiLCJiYXNlIiwiY291bnQiLCJjb25jYXQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJwdXNoIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiam9pbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJ0b1N0cmluZyIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4Iiwic3BsaWNlIiwiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJpdGVyYXRvciIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIm5leHQiLCJkb25lIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwiZnJvbSIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwibGVuIiwiYXJyMiIsIl9pdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJiYXNlNjQiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwibWFwIiwic291cmNlIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJ0aGlzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwicmVuZGVyIiwic3RhdGljUmVuZGVyRm5zIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiaG9vayIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsImNvbnRleHQiLCIkdm5vZGUiLCJzc3JDb250ZXh0IiwicGFyZW50IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsImFkZCIsIl9zc3JSZWdpc3RlciIsIiRyb290IiwiJG9wdGlvbnMiLCJzaGFkb3dSb290IiwiX2luamVjdFN0eWxlcyIsIm9yaWdpbmFsUmVuZGVyIiwiaCIsImV4aXN0aW5nIiwiYmVmb3JlQ3JlYXRlIiwiX3ZtIiwiX2giLCIkY3JlYXRlRWxlbWVudCIsIl9jIiwiX3NlbGYiLCJzdGF0aWNDbGFzcyIsImF0dHJzIiwiX3YiLCJzcmMiLCJhbHQiLCJvbiIsImNsaWNrIiwicHJvIiwiX20iLCJfd2l0aFN0cmlwcGVkIiwibG9jYXRpb24iLCJocmVmIiwibG9jYWxzIiwiY29tcG9uZW50IiwiX19maWxlIiwiZyIsIkZ1bmN0aW9uIiwiZW1wdHlPYmplY3QiLCJmcmVlemUiLCJpc1VuZGVmIiwidiIsImlzRGVmIiwiaXNUcnVlIiwiaXNQcmltaXRpdmUiLCJpc09iamVjdCIsIl90b1N0cmluZyIsImlzUGxhaW5PYmplY3QiLCJpc1JlZ0V4cCIsImlzVmFsaWRBcnJheUluZGV4IiwidmFsIiwicGFyc2VGbG9hdCIsIlN0cmluZyIsIk1hdGgiLCJmbG9vciIsImlzRmluaXRlIiwiaXNQcm9taXNlIiwidGhlbiIsImNhdGNoIiwidG9OdW1iZXIiLCJpc05hTiIsIm1ha2VNYXAiLCJzdHIiLCJleHBlY3RzTG93ZXJDYXNlIiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsImlzQnVpbHRJblRhZyIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJpbmRleE9mIiwiaGFzT3duIiwiY2FjaGVkIiwiZm4iLCJjYWNoZSIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsInJlcGxhY2UiLCJfIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJjdHgiLCJib3VuZEZuIiwiYSIsImFyZ3VtZW50cyIsImFwcGx5IiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsImV4dGVuZCIsInRvIiwiX2Zyb20iLCJ0b09iamVjdCIsInJlcyIsIm5vb3AiLCJiIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZXZlcnkiLCJEYXRlIiwiZ2V0VGltZSIsImtleXNBIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJvbmNlIiwiY2FsbGVkIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJjb25maWciLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsImFzeW5jIiwiX2xpZmVjeWNsZUhvb2tzIiwidW5pY29kZVJlZ0V4cCIsImlzUmVzZXJ2ZWQiLCJjaGFyQ29kZUF0IiwiZGVmIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJiYWlsUkUiLCJSZWdFeHAiLCJfaXNTZXJ2ZXIiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJpc0ZGIiwibWF0Y2giLCJuYXRpdmVXYXRjaCIsIndhdGNoIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpc1NlcnZlclJlbmRlcmluZyIsImdsb2JhbCIsImVudiIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiX1NldCIsImhhc1N5bWJvbCIsIlJlZmxlY3QiLCJvd25LZXlzIiwiU2V0Iiwic2V0IiwiaGFzIiwiY2xlYXIiLCJ3YXJuIiwidWlkIiwiRGVwIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsIm5vdGlmeSIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsInBvcCIsIlZOb2RlIiwidGFnIiwiY2hpbGRyZW4iLCJ0ZXh0IiwiZWxtIiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImNvbXBvbmVudEluc3RhbmNlIiwicmF3IiwiaXNTdGF0aWMiLCJpc1Jvb3RJbnNlcnQiLCJpc0NvbW1lbnQiLCJpc0Nsb25lZCIsImlzT25jZSIsImFzeW5jTWV0YSIsImlzQXN5bmNQbGFjZWhvbGRlciIsInByb3RvdHlwZUFjY2Vzc29ycyIsImNoaWxkIiwiZGVmaW5lUHJvcGVydGllcyIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm1ldGhvZCIsIm9yaWdpbmFsIiwiYXJncyIsImluc2VydGVkIiwib2IiLCJfX29iX18iLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJhcnJheUtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsIk9ic2VydmVyIiwidm1Db3VudCIsIl9fcHJvdG9fXyIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiX2lzVnVlIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwic2V0dGVyIiwiY2hpbGRPYiIsImRlcGVuZEFycmF5IiwibmV3VmFsIiwibWF4IiwiZGVsIiwiaXRlbXMiLCJzdHJhdHMiLCJtZXJnZURhdGEiLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJ2bSIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiaG9va3MiLCJkZWR1cGVIb29rcyIsIm1lcmdlQXNzZXRzIiwidHlwZSIsImtleSQxIiwicHJvcHMiLCJtZXRob2RzIiwiaW5qZWN0IiwiY29tcHV0ZWQiLCJwcm92aWRlIiwiZGVmYXVsdFN0cmF0IiwibWVyZ2VPcHRpb25zIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVkIiwibm9ybWFsaXplSW5qZWN0IiwiZGlycyIsImRpcmVjdGl2ZXMiLCJkZWYkJDEiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiX2Jhc2UiLCJleHRlbmRzIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcHNEYXRhIiwicHJvcCIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiZGVmYXVsdCIsIl9wcm9wcyIsImdldFR5cGUiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJpc1NhbWVUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsImhhbmRsZUVycm9yIiwiaW5mbyIsImN1ciIsIiRwYXJlbnQiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJpbnZva2VXaXRoRXJyb3JIYW5kbGluZyIsImhhbmRsZXIiLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwiY29uc29sZSIsImVycm9yIiwidGltZXJGdW5jIiwiaXNVc2luZ01pY3JvVGFzayIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJzZXRJbW1lZGlhdGUiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImNoYXJhY3RlckRhdGEiLCJuZXh0VGljayIsImNiIiwiX3Jlc29sdmUiLCJzZWVuT2JqZWN0cyIsInRyYXZlcnNlIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJvbmNlJCQxIiwiY2FwdHVyZSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJldmVudCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImNoZWNrUHJvcCIsImhhc2giLCJhbHRLZXkiLCJwcmVzZXJ2ZSIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsIm5lc3RlZEluZGV4IiwibGFzdEluZGV4IiwibGFzdCIsImlzVGV4dE5vZGUiLCJzaGlmdCIsIl9pc1ZMaXN0IiwicmVzb2x2ZUluamVjdCIsInByb3ZpZGVLZXkiLCJfcHJvdmlkZWQiLCJwcm92aWRlRGVmYXVsdCIsInJlc29sdmVTbG90cyIsInNsb3RzIiwic2xvdCIsIm5hbWUkMSIsImlzV2hpdGVzcGFjZSIsIm5vcm1hbGl6ZVNjb3BlZFNsb3RzIiwibm9ybWFsU2xvdHMiLCJwcmV2U2xvdHMiLCJoYXNOb3JtYWxTbG90cyIsImlzU3RhYmxlIiwiJHN0YWJsZSIsIiRrZXkiLCJfbm9ybWFsaXplZCIsIiRoYXNOb3JtYWwiLCJub3JtYWxpemVTY29wZWRTbG90Iiwia2V5JDIiLCJwcm94eU5vcm1hbFNsb3QiLCJwcm94eSIsInJlbmRlckxpc3QiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwibm9kZXMiLCJzY29wZWRTbG90Rm4iLCIkc2NvcGVkU2xvdHMiLCIkc2xvdHMiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImxvb3AiLCJkb21Qcm9wcyIsImNhbWVsaXplZEtleSIsImh5cGhlbmF0ZWRLZXkiLCIkZXZlbnQiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwidHJlZSIsIm1hcmtTdGF0aWMiLCJfcmVuZGVyUHJveHkiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsIm91cnMiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljS2V5cyIsImNvbnRlbnRIYXNoS2V5IiwiYmluZER5bmFtaWNLZXlzIiwiYmFzZU9iaiIsInZhbHVlcyIsInByZXBlbmRNb2RpZmllciIsInN5bWJvbCIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbCIsIl90IiwiX3EiLCJfZiIsIl9rIiwiX2IiLCJfdSIsIl9nIiwiX3AiLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsInRoaXMkMSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImxpc3RlbmVycyIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJyZW5kZXJDb250ZXh0IiwiY2xvbmUiLCJtZXJnZVByb3BzIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImluaXQiLCJoeWRyYXRpbmciLCJfaXNEZXN0cm95ZWQiLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwiX2lzQ29tcG9uZW50IiwiX3BhcmVudFZub2RlIiwiaW5saW5lVGVtcGxhdGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJvbGRWbm9kZSIsInBhcmVudFZub2RlIiwicmVuZGVyQ2hpbGRyZW4iLCJuZXdTY29wZWRTbG90cyIsIm9sZFNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY1Njb3BlZFNsb3QiLCJuZWVkc0ZvcmNlVXBkYXRlIiwiX3JlbmRlckNoaWxkcmVuIiwiX3Zub2RlIiwiJGF0dHJzIiwiJGxpc3RlbmVycyIsInByb3BLZXlzIiwiX3Byb3BLZXlzIiwib2xkTGlzdGVuZXJzIiwiX3BhcmVudExpc3RlbmVycyIsInVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyIsIiRmb3JjZVVwZGF0ZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwiX2luYWN0aXZlIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRpcmVjdCIsIl9kaXJlY3RJbmFjdGl2ZSIsImlzSW5JbmFjdGl2ZVRyZWUiLCIkY2hpbGRyZW4iLCIkZGVzdHJveSIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwiY2lkIiwiZmFjdG9yeSIsImVycm9yQ29tcCIsInJlc29sdmVkIiwib3duZXIiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJvd25lcnMiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCJjbGVhclRpbWVvdXQiLCJlbnN1cmVDdG9yIiwicmVqZWN0IiwicmVhc29uIiwiZGVsYXkiLCJ0aW1lb3V0IiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsImNhbGxiYWNrIiwidHJhbnNmb3JtTW9kZWwiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwidm5vZGVzIiwiY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm5hdGl2ZU9uIiwiYWJzdHJhY3QiLCJ0b01lcmdlIiwiX21lcmdlZCIsIm1lcmdlSG9vayQxIiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwiZjEiLCJmMiIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiaXMiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsInByZSIsImFwcGx5TlMiLCJmb3JjZSIsImNsYXNzIiwicmVnaXN0ZXJEZWVwQmluZGluZ3MiLCJfY3JlYXRlRWxlbWVudCIsImNvbXAiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwicmVtb3ZlJDEiLCIkb2ZmIiwiX3RhcmdldCIsIm9uY2VIYW5kbGVyIiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJoYW5kbGVycyIsImoiLCJfaGFzSG9va0V2ZW50IiwiJGVtaXQiLCJxdWV1ZSIsIndhaXRpbmciLCJmbHVzaGluZyIsImN1cnJlbnRGbHVzaFRpbWVzdGFtcCIsImdldE5vdyIsIm5vdyIsImNyZWF0ZUV2ZW50IiwidGltZVN0YW1wIiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJzb3J0IiwiYmVmb3JlIiwicnVuIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJfd2F0Y2hlciIsImNhbGxVcGRhdGVkSG9va3MiLCJlbWl0IiwidWlkJDIiLCJXYXRjaGVyIiwiZXhwT3JGbiIsImlzUmVuZGVyV2F0Y2hlciIsIl93YXRjaGVycyIsImRlZXAiLCJ1c2VyIiwibGF6eSIsImFjdGl2ZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJleHByZXNzaW9uIiwicGF0aCIsInNlZ21lbnRzIiwicGFyc2VQYXRoIiwiY2xlYW51cERlcHMiLCJ0bXAiLCJxdWV1ZVdhdGNoZXIiLCJvbGRWYWx1ZSIsImV2YWx1YXRlIiwidGVhcmRvd24iLCJfaXNCZWluZ0Rlc3Ryb3llZCIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInNvdXJjZUtleSIsImluaXRTdGF0ZSIsInByb3BzT3B0aW9ucyIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiX2RhdGEiLCJnZXREYXRhIiwiaW5pdERhdGEiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImRlZmluZUNvbXB1dGVkIiwiaW5pdENvbXB1dGVkIiwiY3JlYXRlV2F0Y2hlciIsImluaXRXYXRjaCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiJHdhdGNoIiwidWlkJDMiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0Iiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsInJlc29sdmVNb2RpZmllZE9wdGlvbnMiLCJleHRlbmRPcHRpb25zIiwiY29tcG9uZW50cyIsIlZ1ZSIsIl9pbml0IiwiaW5pdEV4dGVuZCIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJDb21wIiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsIm1peGluIiwidXNlIiwiZ2V0Q29tcG9uZW50TmFtZSIsIm1hdGNoZXMiLCJwYXR0ZXJuIiwicHJ1bmVDYWNoZSIsImtlZXBBbGl2ZUluc3RhbmNlIiwiY2FjaGVkTm9kZSIsInBydW5lQ2FjaGVFbnRyeSIsImN1cnJlbnQiLCJjYWNoZWQkJDEiLCJfdWlkIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwiX2NvbXBvbmVudFRhZyIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsIiRyZWZzIiwiaW5pdExpZmVjeWNsZSIsIl9ldmVudHMiLCJpbml0RXZlbnRzIiwicGFyZW50RGF0YSIsImluaXRSZW5kZXIiLCJpbml0SW5qZWN0aW9ucyIsImluaXRQcm92aWRlIiwiZWwiLCJpbml0TWl4aW4iLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInN0YXRlTWl4aW4iLCJob29rUkUiLCIkb25jZSIsImkkMSIsImNicyIsImV2ZW50c01peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInJlc3RvcmVBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJsaWZlY3ljbGVNaXhpbiIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZWYiLCJyZW5kZXJNaXhpbiIsInBhdHRlcm5UeXBlcyIsImJ1aWx0SW5Db21wb25lbnRzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJOdW1iZXIiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwibW91bnRlZCIsInBhcnNlSW50IiwiY29uZmlnRGVmIiwidXRpbCIsImRlZmluZVJlYWN0aXZlIiwiZGVsZXRlIiwib2JzZXJ2YWJsZSIsInBsdWdpbiIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsInVuc2hpZnQiLCJpbnN0YWxsIiwiaW5pdFVzZSIsImluaXRNaXhpbiQxIiwiZGVmaW5pdGlvbiIsImluaXRBc3NldFJlZ2lzdGVycyIsImluaXRHbG9iYWxBUEkiLCJ2ZXJzaW9uIiwiYWNjZXB0VmFsdWUiLCJhdHRyIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImlzRmFsc3lBdHRyVmFsdWUiLCJnZW5DbGFzc0ZvclZub2RlIiwiY2hpbGROb2RlIiwibWVyZ2VDbGFzc0RhdGEiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInJlbmRlckNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJxdWVyeSIsInNlbGVjdGVkIiwibm9kZU9wcyIsInRhZ05hbWUiLCJtdWx0aXBsZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZSIsImNyZWF0ZUNvbW1lbnQiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZnMiLCJyZWZJbkZvciIsImVtcHR5Tm9kZSIsInNhbWVWbm9kZSIsInR5cGVBIiwidHlwZUIiLCJzYW1lSW5wdXRUeXBlIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsInVwZGF0ZURpcmVjdGl2ZXMiLCJvbGREaXIiLCJkaXIiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZEFyZyIsImFyZyIsImNhbGxIb29rJDEiLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJiYXNlU2V0QXR0ciIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJzZXRBdHRyaWJ1dGVOUyIsIl9faWVwaCIsImJsb2NrZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXBkYXRlQ2xhc3MiLCJvbGREYXRhIiwiY2xzIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsImNociIsImluZGV4JDEiLCJleHByZXNzaW9uUG9zIiwiZXhwcmVzc2lvbkVuZFBvcyIsImtsYXNzIiwidmFsaWREaXZpc2lvbkNoYXJSRSIsInBhcnNlRmlsdGVycyIsImV4cCIsInByZXYiLCJmaWx0ZXJzIiwiaW5TaW5nbGUiLCJpbkRvdWJsZSIsImluVGVtcGxhdGVTdHJpbmciLCJpblJlZ2V4IiwiY3VybHkiLCJzcXVhcmUiLCJwYXJlbiIsImxhc3RGaWx0ZXJJbmRleCIsInRyaW0iLCJwdXNoRmlsdGVyIiwid3JhcEZpbHRlciIsImJhc2VXYXJuIiwibXNnIiwicmFuZ2UiLCJwbHVja01vZHVsZUZ1bmN0aW9uIiwiYWRkUHJvcCIsImR5bmFtaWMiLCJyYW5nZVNldEl0ZW0iLCJwbGFpbiIsImFkZEF0dHIiLCJkeW5hbWljQXR0cnMiLCJhZGRSYXdBdHRyIiwiYXR0cnNNYXAiLCJhdHRyc0xpc3QiLCJhZGREaXJlY3RpdmUiLCJpc0R5bmFtaWNBcmciLCJwcmVwZW5kTW9kaWZpZXJNYXJrZXIiLCJhZGRIYW5kbGVyIiwiaW1wb3J0YW50IiwiZXZlbnRzIiwicmlnaHQiLCJtaWRkbGUiLCJuYXRpdmUiLCJuYXRpdmVFdmVudHMiLCJuZXdIYW5kbGVyIiwiZ2V0QmluZGluZ0F0dHIiLCJnZXRTdGF0aWMiLCJkeW5hbWljVmFsdWUiLCJnZXRBbmRSZW1vdmVBdHRyIiwic3RhdGljVmFsdWUiLCJyZW1vdmVGcm9tTWFwIiwiZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXgiLCJlbmQiLCJnZW5Db21wb25lbnRNb2RlbCIsIm51bWJlciIsInZhbHVlRXhwcmVzc2lvbiIsImFzc2lnbm1lbnQiLCJnZW5Bc3NpZ25tZW50Q29kZSIsImxhc3RJbmRleE9mIiwiZW9mIiwiaXNTdHJpbmdTdGFydCIsInBhcnNlU3RyaW5nIiwicGFyc2VCcmFja2V0IiwicGFyc2VNb2RlbCIsImluQnJhY2tldCIsInN0cmluZ1F1b3RlIiwidGFyZ2V0JDEiLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJjdXJyZW50VGFyZ2V0Iiwib3duZXJEb2N1bWVudCIsInVwZGF0ZURPTUxpc3RlbmVycyIsImNoYW5nZSIsIm5vcm1hbGl6ZUV2ZW50cyIsInN2Z0NvbnRhaW5lciIsInVwZGF0ZURPTVByb3BzIiwib2xkUHJvcHMiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImlubmVySFRNTCIsImNoZWNrVmFsIiwiY29tcG9zaW5nIiwibm90SW5Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsIl92TW9kaWZpZXJzIiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJlbXB0eVN0eWxlIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZWROYW1lIiwibm9ybWFsaXplIiwidmVuZG9yTmFtZXMiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiZ2V0U3R5bGUiLCJ3aGl0ZXNwYWNlUkUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJleHBlY3RlZFR5cGUiLCJnZXRUcmFuc2l0aW9uSW5mbyIsInByb3BDb3VudCIsImVuZGVkIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiX2xlYXZlQ2IiLCJjYW5jZWxsZWQiLCJ0cmFuc2l0aW9uIiwiX2VudGVyQ2IiLCJub2RlVHlwZSIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJybSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwYXRjaCIsImJhY2tlbmQiLCJyZW1vdmVOb2RlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwiaW5uZXJOb2RlIiwiYWN0aXZhdGUiLCJyZWFjdGl2YXRlQ29tcG9uZW50Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwicmVmJCQxIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwiY2hpbGRFbG0iLCJjcmVhdGVSbUNiIiwiZmluZElkeEluT2xkIiwib2xkQ2giLCJwYXRjaFZub2RlIiwicmVtb3ZlT25seSIsImh5ZHJhdGUiLCJuZXdDaCIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwidXBkYXRlQ2hpbGRyZW4iLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaW5pdGlhbCIsImlzUmVuZGVyZWRNb2R1bGUiLCJpblZQcmUiLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGRyZW5NYXRjaCIsImZ1bGxJbnZva2UiLCJpc0luaXRpYWxQYXRjaCIsImlzUmVhbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJvbGRFbG0iLCJwYXRjaGFibGUiLCJpJDIiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsImJpbmRpbmciLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsInNvbWUiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJvcHRpb24iLCJzZWxlY3RlZEluZGV4IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImxvY2F0ZU5vZGUiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uJCQxIiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwiZGlzcGxheSIsInVuYmluZCIsInRyYW5zaXRpb25Qcm9wcyIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicGxhY2Vob2xkZXIiLCJyYXdDaGlsZCIsImlzTm90VGV4dE5vZGUiLCJpc1ZTaG93RGlyZWN0aXZlIiwiVHJhbnNpdGlvbiIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwib2xkQ2hpbGQiLCJpc1NhbWVDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsImNhbGxQZW5kaW5nQ2JzIiwiX21vdmVDYiIsInJlY29yZFBvc2l0aW9uIiwibmV3UG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYXBwbHlUcmFuc2xhdGlvbiIsIm9sZFBvcyIsInBvcyIsImR4IiwibGVmdCIsImR5IiwidG9wIiwibW92ZWQiLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJUcmFuc2l0aW9uR3JvdXAiLCJiZWZvcmVNb3VudCIsImtlcHQiLCJwcmV2Q2hpbGRyZW4iLCJyYXdDaGlsZHJlbiIsInRyYW5zaXRpb25EYXRhIiwicmVtb3ZlZCIsImMkMSIsInVwZGF0ZWQiLCJoYXNNb3ZlIiwiX3JlZmxvdyIsImJvZHkiLCJvZmZzZXRIZWlnaHQiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsImNsb25lTm9kZSIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidXBkYXRlQ29tcG9uZW50IiwibW91bnRDb21wb25lbnQiLCJkZWZhdWx0VGFnUkUiLCJyZWdleEVzY2FwZVJFIiwiYnVpbGRSZWdleCIsImRlbGltaXRlcnMiLCJvcGVuIiwiY2xvc2UiLCJrbGFzcyQxIiwic3RhdGljS2V5cyIsInRyYW5zZm9ybU5vZGUiLCJjbGFzc0JpbmRpbmciLCJnZW5EYXRhIiwiZGVjb2RlciIsInN0eWxlJDEiLCJzdHlsZUJpbmRpbmciLCJoZSIsImh0bWwiLCJpc1VuYXJ5VGFnIiwiY2FuQmVMZWZ0T3BlblRhZyIsImlzTm9uUGhyYXNpbmdUYWciLCJhdHRyaWJ1dGUiLCJkeW5hbWljQXJnQXR0cmlidXRlIiwibmNuYW1lIiwicW5hbWVDYXB0dXJlIiwic3RhcnRUYWdPcGVuIiwic3RhcnRUYWdDbG9zZSIsImVuZFRhZyIsImRvY3R5cGUiLCJjb21tZW50IiwiY29uZGl0aW9uYWxDb21tZW50IiwiaXNQbGFpblRleHRFbGVtZW50IiwicmVDYWNoZSIsImRlY29kaW5nTWFwIiwiZW5jb2RlZEF0dHIiLCJlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyIsImlzSWdub3JlTmV3bGluZVRhZyIsInNob3VsZElnbm9yZUZpcnN0TmV3bGluZSIsImRlY29kZUF0dHIiLCJzaG91bGREZWNvZGVOZXdsaW5lcyIsInJlIiwid2FybiQyIiwidHJhbnNmb3JtcyIsInByZVRyYW5zZm9ybXMiLCJwb3N0VHJhbnNmb3JtcyIsInBsYXRmb3JtSXNQcmVUYWciLCJwbGF0Zm9ybU11c3RVc2VQcm9wIiwicGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UiLCJvblJFIiwiZGlyUkUiLCJmb3JBbGlhc1JFIiwiZm9ySXRlcmF0b3JSRSIsInN0cmlwUGFyZW5zUkUiLCJkeW5hbWljQXJnUkUiLCJhcmdSRSIsImJpbmRSRSIsIm1vZGlmaWVyUkUiLCJzbG90UkUiLCJsaW5lQnJlYWtSRSIsIndoaXRlc3BhY2VSRSQxIiwiZGVjb2RlSFRNTENhY2hlZCIsImNyZWF0ZUFTVEVsZW1lbnQiLCJtYWtlQXR0cnNNYXAiLCJyYXdBdHRyc01hcCIsInBhcnNlIiwidGVtcGxhdGUiLCJpc1ByZVRhZyIsInJvb3QiLCJjdXJyZW50UGFyZW50Iiwic3RhY2siLCJwcmVzZXJ2ZVdoaXRlc3BhY2UiLCJ3aGl0ZXNwYWNlT3B0aW9uIiwid2hpdGVzcGFjZSIsImluUHJlIiwiY2xvc2VFbGVtZW50IiwiZWxlbWVudCIsInRyaW1FbmRpbmdXaGl0ZXNwYWNlIiwicHJvY2Vzc2VkIiwicHJvY2Vzc0VsZW1lbnQiLCJpZiIsImVsc2VpZiIsImVsc2UiLCJhZGRJZkNvbmRpdGlvbiIsImJsb2NrIiwiZm9yYmlkZGVuIiwiZmluZFByZXZFbGVtZW50Iiwic2xvdFNjb3BlIiwic2xvdFRhcmdldCIsImxhc3ROb2RlIiwibGFzdFRhZyIsImV4cGVjdEhUTUwiLCJpc1VuYXJ5VGFnJCQxIiwiY2FuQmVMZWZ0T3BlblRhZyQkMSIsImVuZFRhZ0xlbmd0aCIsInN0YWNrZWRUYWciLCJyZVN0YWNrZWRUYWciLCJyZXN0JDEiLCJjaGFycyIsInBhcnNlRW5kVGFnIiwidGV4dEVuZCIsImNvbW1lbnRFbmQiLCJzaG91bGRLZWVwQ29tbWVudCIsInN1YnN0cmluZyIsImFkdmFuY2UiLCJjb25kaXRpb25hbEVuZCIsImRvY3R5cGVNYXRjaCIsImVuZFRhZ01hdGNoIiwiY3VySW5kZXgiLCJzdGFydFRhZ01hdGNoIiwicGFyc2VTdGFydFRhZyIsImhhbmRsZVN0YXJ0VGFnIiwicmVzdCIsInVuYXJ5U2xhc2giLCJ1bmFyeSIsInNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZiIsImxvd2VyQ2FzZWRUYWciLCJsb3dlckNhc2VkVGFnTmFtZSIsInBhcnNlSFRNTCIsImNvbW1lbnRzIiwib3V0cHV0U291cmNlUmFuZ2UiLCJzdGFydCQxIiwiaWVOU0J1ZyIsImllTlNQcmVmaXgiLCJndWFyZElFU1ZHQnVnIiwicHJvY2Vzc1ByZSIsInByb2Nlc3NSYXdBdHRycyIsInByb2Nlc3NGb3IiLCJwcm9jZXNzSWYiLCJwcm9jZXNzT25jZSIsImVuZCQxIiwidGFnUkUiLCJ0b2tlblZhbHVlIiwidG9rZW5zIiwicmF3VG9rZW5zIiwiZXhlYyIsInBhcnNlVGV4dCIsInByb2Nlc3NLZXkiLCJmb3IiLCJjaGVja0luRm9yIiwicHJvY2Vzc1JlZiIsInNsb3RUYXJnZXREeW5hbWljIiwiZ2V0UmF3QmluZGluZ0F0dHIiLCJzbG90QmluZGluZyIsImdldFNsb3ROYW1lIiwic2xvdEJpbmRpbmckMSIsInJlZiQxIiwiZHluYW1pYyQxIiwic2xvdENvbnRhaW5lciIsInByb2Nlc3NTbG90Q29udGVudCIsInNsb3ROYW1lIiwicHJvY2Vzc0NvbXBvbmVudCIsInN5bmNHZW4iLCJpc0R5bmFtaWMiLCJoYXNCaW5kaW5ncyIsInBhcnNlTW9kaWZpZXJzIiwiY2FtZWwiLCJhcmdNYXRjaCIsInByb2Nlc3NBdHRycyIsImluTWF0Y2giLCJhbGlhcyIsIml0ZXJhdG9yTWF0Y2giLCJpdGVyYXRvcjEiLCJpdGVyYXRvcjIiLCJwYXJzZUZvciIsImNvbmRpdGlvbiIsImlmQ29uZGl0aW9ucyIsImNsb25lQVNURWxlbWVudCIsIm1vZHVsZXMkMSIsInByZVRyYW5zZm9ybU5vZGUiLCJ0eXBlQmluZGluZyIsImlmQ29uZGl0aW9uIiwiaWZDb25kaXRpb25FeHRyYSIsImhhc0Vsc2UiLCJlbHNlSWZDb25kaXRpb24iLCJicmFuY2gwIiwiYnJhbmNoMSIsImJyYW5jaDIiLCJpc1N0YXRpY0tleSIsImlzUGxhdGZvcm1SZXNlcnZlZFRhZyIsImJhc2VPcHRpb25zIiwiX3dhcm4iLCJjb2RlIiwiZ2VuU2VsZWN0IiwidmFsdWVCaW5kaW5nIiwidHJ1ZVZhbHVlQmluZGluZyIsImZhbHNlVmFsdWVCaW5kaW5nIiwiZ2VuQ2hlY2tib3hNb2RlbCIsImdlblJhZGlvTW9kZWwiLCJuZWVkQ29tcG9zaXRpb25HdWFyZCIsImdlbkRlZmF1bHRNb2RlbCIsInJlZHVjZSIsImdlblN0YXRpY0tleXMiLCJnZW5TdGF0aWNLZXlzQ2FjaGVkIiwib3B0aW1pemUiLCJtYXJrU3RhdGljJDEiLCJzdGF0aWMiLCJpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciIsImwkMSIsIm1hcmtTdGF0aWNSb290cyIsInN0YXRpY0luRm9yIiwic3RhdGljUm9vdCIsImZuRXhwUkUiLCJmbkludm9rZVJFIiwic2ltcGxlUGF0aFJFIiwiZXNjIiwidGFiIiwic3BhY2UiLCJ1cCIsImRvd24iLCJrZXlOYW1lcyIsImdlbkd1YXJkIiwibW9kaWZpZXJDb2RlIiwic3RvcCIsInByZXZlbnQiLCJzZWxmIiwiY3RybCIsIm1ldGEiLCJnZW5IYW5kbGVycyIsInByZWZpeCIsInN0YXRpY0hhbmRsZXJzIiwiZHluYW1pY0hhbmRsZXJzIiwiaGFuZGxlckNvZGUiLCJnZW5IYW5kbGVyIiwiaXNNZXRob2RQYXRoIiwiaXNGdW5jdGlvbkV4cHJlc3Npb24iLCJpc0Z1bmN0aW9uSW52b2NhdGlvbiIsImdlbk1vZGlmaWVyQ29kZSIsImtleU1vZGlmaWVyIiwiZ2VuRmlsdGVyQ29kZSIsImdlbktleUZpbHRlciIsImtleVZhbCIsImtleUNvZGUiLCJrZXlOYW1lIiwiYmFzZURpcmVjdGl2ZXMiLCJ3cmFwTGlzdGVuZXJzIiwid3JhcERhdGEiLCJjbG9hayIsIkNvZGVnZW5TdGF0ZSIsImRhdGFHZW5GbnMiLCJtYXliZUNvbXBvbmVudCIsIm9uY2VJZCIsImdlbmVyYXRlIiwiYXN0Iiwic3RhdGUiLCJnZW5FbGVtZW50Iiwic3RhdGljUHJvY2Vzc2VkIiwiZ2VuU3RhdGljIiwib25jZVByb2Nlc3NlZCIsImdlbk9uY2UiLCJmb3JQcm9jZXNzZWQiLCJnZW5Gb3IiLCJpZlByb2Nlc3NlZCIsImdlbklmIiwiZ2VuQ2hpbGRyZW4iLCJnZW5Qcm9wcyIsImJpbmQkJDEiLCJnZW5TbG90IiwiY29tcG9uZW50TmFtZSIsImdlbkRhdGEkMiIsImdlbkNvbXBvbmVudCIsIm9yaWdpbmFsUHJlU3RhdGUiLCJhbHRHZW4iLCJhbHRFbXB0eSIsImdlbklmQ29uZGl0aW9ucyIsImNvbmRpdGlvbnMiLCJnZW5UZXJuYXJ5RXhwIiwiYWx0SGVscGVyIiwibmVlZFJ1bnRpbWUiLCJoYXNSdW50aW1lIiwiZ2VuIiwiZ2VuRGlyZWN0aXZlcyIsImNvbnRhaW5zU2xvdENoaWxkIiwibmVlZHNLZXkiLCJnZW5lcmF0ZWRTbG90cyIsImdlblNjb3BlZFNsb3QiLCJpbmxpbmVSZW5kZXJGbnMiLCJnZW5JbmxpbmVUZW1wbGF0ZSIsImlzTGVnYWN5U3ludGF4IiwicmV2ZXJzZVByb3h5IiwiY2hlY2tTa2lwIiwiYWx0R2VuRWxlbWVudCIsImFsdEdlbk5vZGUiLCJlbCQxIiwibm9ybWFsaXphdGlvblR5cGUkMSIsIm5lZWRzTm9ybWFsaXphdGlvbiIsImdldE5vcm1hbGl6YXRpb25UeXBlIiwiZ2VuTm9kZSIsImdlbkNvbW1lbnQiLCJ0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMiLCJnZW5UZXh0Iiwic3RhdGljUHJvcHMiLCJkeW5hbWljUHJvcHMiLCJjcmVhdGVGdW5jdGlvbiIsImVycm9ycyIsImNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4iLCJjb21waWxlIiwiY29tcGlsZWQiLCJmbkdlbkVycm9ycyIsImJhc2VDb21waWxlIiwiZGl2IiwiZmluYWxPcHRpb25zIiwidGlwcyIsInRpcCIsImNvbXBpbGVUb0Z1bmN0aW9ucyIsImdldFNob3VsZERlY29kZSIsImlkVG9UZW1wbGF0ZSIsIm1vdW50IiwiZG9jdW1lbnRFbGVtZW50Iiwib3V0ZXJIVE1MIiwiY29udGFpbmVyIiwiZ2V0T3V0ZXJIVE1MIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJtb3VzZWVudGVyIiwiY2hhbmdlRG93biIsIm1vdXNlbGVhdmUiLCJjaGFuZ2VVcCIsImhpZGUiLCJjaGFuZ2VEb3duT25lIiwiY2hhbmdlVXBPbmUiLCJjaGFuZ2VEb3duVHdvIiwiY2hhbmdlVXBUd28iLCJzaG93RG93biIsImNoYW5nZURvd25UaHJlZSIsImNoYW5nZVVwVGhyZWUiLCJzaG93VXAiLCJhYm91dCIsInN1cHBvc2UiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJ0aXRsZSIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2NvcGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1bnJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsIl9vblRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwiZ2V0UHJvdG90eXBlT2YiLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyYW5kb20iLCJhdHRhY2hFdmVudCIsInRhc2siLCJoZWFkZXJzIiwiZm9vdGVycyIsInByb2R1Y3RzIiwiY29udGVudHNpbmRleCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEs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IG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYxKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicHJvZHVjdHMgcHJvZHVjdFwiIH0sIFtcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInByby1jb2xcIiwgYXR0cnM6IHsgXCJkYXRhLXYtMGVmMzE1MGVcIjogXCJcIiB9IH0sIFtcbiAgICAgIF9jKFxuICAgICAgICBcImg0XCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwicHJvLWdyb3VwLXRpdGxlXCIsIGF0dHJzOiB7IFwiZGF0YS12LTBlZjMxNTBlXCI6IFwiXCIgfSB9LFxuICAgICAgICBbX3ZtLl92KFwi5pm66IO955So5ZOBXCIpXVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBzdGF0aWNDbGFzczogXCJmbGV4LXJvdyBwcm8tYmxvY2tcIiwgYXR0cnM6IHsgXCJkYXRhLXYtMGVmMzE1MGVcIjogXCJcIiB9IH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJwcm8tdGh1bWJcIixcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIFwiZGF0YS12LTBlZjMxNTBlXCI6IFwiXCIsXG4gICAgICAgICAgICAgIHNyYzogXCIvaW1nLzE1NDUxMDAxNTZfYmNkN2NmNGNmZGVhZThiOGRmNDNkZWEzNmE1MmIzYzkucG5nXCIsXG4gICAgICAgICAgICAgIGFsdDogXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBhdHRyczogeyBcImRhdGEtdi0wZWYzMTUwZVwiOiBcIlwiIH0sIG9uOiB7IGNsaWNrOiBfdm0ucHJvIH0gfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJoNVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInByby10aXRsZSBwcm8taDVcIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IFwiZGF0YS12LTBlZjMxNTBlXCI6IFwiXCIgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcIuWuoOeJqemlruawtOaculwiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwicHJvLXN1bW1hcnkga2FpdGlcIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IFwiZGF0YS12LTBlZjMxNTBlXCI6IFwiXCIgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcIuWRteaKpOeIseWuoCDlgaXlurfppa7msLRcIildXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF1cbiAgICAgICAgICApXG4gICAgICAgIF1cbiAgICAgICksXG4gICAgICBfYyhcImJyXCIpLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5fbSgwKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX3ZtLl9tKDEpLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX3ZtLl9tKDIpXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcImZsZXgtcm93IHByby1ibG9ja1wiLCBhdHRyczogeyBcImRhdGEtdi0wZWYzMTUwZVwiOiBcIlwiIH0gfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInByby10aHVtYlwiLFxuICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICBcImRhdGEtdi0wZWYzMTUwZVwiOiBcIlwiLFxuICAgICAgICAgICAgc3JjOiBcIi9pbWcvMTU2OTU2Njc0MV81YzNkNDc3ZjkyOTMxMDhkMTA1Y2MxNGZhYmEyZDliMi5wbmdcIixcbiAgICAgICAgICAgIGFsdDogXCJcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgYXR0cnM6IHsgXCJkYXRhLXYtMGVmMzE1MGVcIjogXCJcIiB9IH0sIFtcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwiaDVcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwicHJvLXRpdGxlIHByby1oNVwiLFxuICAgICAgICAgICAgICBhdHRyczogeyBcImRhdGEtdi0wZWYzMTUwZVwiOiBcIlwiIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbX3ZtLl92KFwi5pm66IO95a6g54mp6Zu26aOf5py6XCIpXVxuICAgICAgICAgICksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJwcm8tc3VtbWFyeSBrYWl0aVwiLFxuICAgICAgICAgICAgICBhdHRyczogeyBcImRhdGEtdi0wZWYzMTUwZVwiOiBcIlwiIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbX3ZtLl92KFwi5pm66IO94oCc6YCX54yr4oCdIOi/nOeoi+KAnOmBm+eLl+KAnVwiKV1cbiAgICAgICAgICApXG4gICAgICAgIF0pXG4gICAgICBdXG4gICAgKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInByby1jb2xcIiwgYXR0cnM6IHsgXCJkYXRhLXYtMGVmMzE1MGVcIjogXCJcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiaDRcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcInByby1ncm91cC10aXRsZVwiLCBhdHRyczogeyBcImRhdGEtdi0wZWYzMTUwZVwiOiBcIlwiIH0gfSxcbiAgICAgICAgICBbX3ZtLl92KFwi5riF5rSBXCIpXVxuICAgICAgICApXG4gICAgICBdXG4gICAgKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInByby1jb2xcIiwgYXR0cnM6IHsgXCJkYXRhLXYtMGVmMzE1MGVcIjogXCJcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiaDRcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcInByby1ncm91cC10aXRsZVwiLCBhdHRyczogeyBcImRhdGEtdi0wZWYzMTUwZVwiOiBcIlwiIH0gfSxcbiAgICAgICAgICBbX3ZtLl92KFwi6YWN5Lu2XCIpXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZsZXgtcm93IHByby1ibG9ja1wiLFxuICAgICAgICAgICAgYXR0cnM6IHsgXCJkYXRhLXYtMGVmMzE1MGVcIjogXCJcIiB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInByby10aHVtYlwiLFxuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIFwiZGF0YS12LTBlZjMxNTBlXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgc3JjOiBcIi9pbWcvMTU0NTEwMDc3OV81YmZiMGQ1ZmEwNDY1MTFhNjRkYzdjYWQ5Y2ZmOGQzNC5wbmdcIixcbiAgICAgICAgICAgICAgICBhbHQ6IFwiXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBhdHRyczogeyBcImRhdGEtdi0wZWYzMTUwZVwiOiBcIlwiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImg1XCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwicHJvLXRpdGxlIHByby1oNVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgXCJkYXRhLXYtMGVmMzE1MGVcIjogXCJcIiB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwi5a6g54mp6aWu5rC05py65ruk6IqvXCIpXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJwcm8tc3VtbWFyeSBrYWl0aVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgXCJkYXRhLXYtMGVmMzE1MGVcIjogXCJcIiB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwi5LyY6LSo5ruk5p2QIOWbm+mHjei/h+a7pFwiKV1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF9jKFwiYnJcIilcbiAgICAgIF1cbiAgICApXG4gIH1cbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gIDxkaXYgY2xhc3M9XCJwcm9kdWN0cyBwcm9kdWN0XCI+XHJcbiAgICAgPGRpdiBkYXRhLXYtMGVmMzE1MGU9XCJcIiBjbGFzcz1cInByby1jb2xcIj5cclxuICAgICAgIDxoNCBkYXRhLXYtMGVmMzE1MGU9XCJcIiBjbGFzcz1cInByby1ncm91cC10aXRsZVwiPuaZuuiDveeUqOWTgTwvaDQ+XHJcbiAgICAgICA8ZGl2IGRhdGEtdi0wZWYzMTUwZT1cIlwiIGNsYXNzPVwiZmxleC1yb3cgcHJvLWJsb2NrXCI+XHJcbiAgICAgICAgIDxpbWcgZGF0YS12LTBlZjMxNTBlPVwiXCIgc3JjPVwiL2ltZy8xNTQ1MTAwMTU2X2JjZDdjZjRjZmRlYWU4YjhkZjQzZGVhMzZhNTJiM2M5LnBuZ1wiIGFsdD1cIlwiIGNsYXNzPVwicHJvLXRodW1iXCI+XHJcbiAgICAgICAgIDxkaXYgZGF0YS12LTBlZjMxNTBlPVwiXCIgIEBjbGljaz1cInByb1wiPlxyXG4gICAgICAgICAgIDxoNSBkYXRhLXYtMGVmMzE1MGU9XCJcIiBjbGFzcz1cInByby10aXRsZSBwcm8taDVcIj7lrqDnianppa7msLTmnLo8L2g1PlxyXG4gICAgICAgICAgIDxwIGRhdGEtdi0wZWYzMTUwZT1cIlwiIGNsYXNzPVwicHJvLXN1bW1hcnkga2FpdGlcIj7lkbXmiqTniLHlrqAg5YGl5bq36aWu5rC0PC9wPlxyXG4gICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgIDwvZGl2Pjxicj5cclxuICAgICAgICAgICA8ZGl2IGRhdGEtdi0wZWYzMTUwZT1cIlwiIGNsYXNzPVwiZmxleC1yb3cgcHJvLWJsb2NrXCI+XHJcbiAgICAgICAgICAgICA8aW1nIGRhdGEtdi0wZWYzMTUwZT1cIlwiIHNyYz1cIi9pbWcvMTU2OTU2Njc0MV81YzNkNDc3ZjkyOTMxMDhkMTA1Y2MxNGZhYmEyZDliMi5wbmdcIiBhbHQ9XCJcIiBjbGFzcz1cInByby10aHVtYlwiPlxyXG4gICAgICAgICAgICAgPGRpdiBkYXRhLXYtMGVmMzE1MGU9XCJcIj5cclxuICAgICAgICAgICAgICAgPGg1IGRhdGEtdi0wZWYzMTUwZT1cIlwiIGNsYXNzPVwicHJvLXRpdGxlIHByby1oNVwiPuaZuuiDveWuoOeJqembtumjn+acujwvaDU+XHJcbiAgICAgICAgICAgICAgIDxwIGRhdGEtdi0wZWYzMTUwZT1cIlwiIGNsYXNzPVwicHJvLXN1bW1hcnkga2FpdGlcIj7mmbrog73igJzpgJfnjKvigJ0g6L+c56iL4oCc6YGb54uX4oCdPC9wPlxyXG4gICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBkYXRhLXYtMGVmMzE1MGU9XCJcIiBjbGFzcz1cInByby1jb2xcIj5cclxuICAgICAgICAgICAgPGg0IGRhdGEtdi0wZWYzMTUwZT1cIlwiIGNsYXNzPVwicHJvLWdyb3VwLXRpdGxlXCI+5riF5rSBPC9oND5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgZGF0YS12LTBlZjMxNTBlPVwiXCIgY2xhc3M9XCJwcm8tY29sXCI+XHJcbiAgICAgICA8aDQgZGF0YS12LTBlZjMxNTBlPVwiXCIgY2xhc3M9XCJwcm8tZ3JvdXAtdGl0bGVcIj7phY3ku7Y8L2g0PlxyXG4gICAgICAgPGRpdiBkYXRhLXYtMGVmMzE1MGU9XCJcIiBjbGFzcz1cImZsZXgtcm93IHByby1ibG9ja1wiPlxyXG4gICAgICAgICA8aW1nIGRhdGEtdi0wZWYzMTUwZT1cIlwiIHNyYz1cIi9pbWcvMTU0NTEwMDc3OV81YmZiMGQ1ZmEwNDY1MTFhNjRkYzdjYWQ5Y2ZmOGQzNC5wbmdcIiBhbHQ9XCJcIiBjbGFzcz1cInByby10aHVtYlwiPlxyXG4gICAgICAgICA8ZGl2IGRhdGEtdi0wZWYzMTUwZT1cIlwiPlxyXG4gICAgICAgICAgIDxoNSBkYXRhLXYtMGVmMzE1MGU9XCJcIiBjbGFzcz1cInByby10aXRsZSBwcm8taDVcIj7lrqDnianppa7msLTmnLrmu6Toiq88L2g1PlxyXG4gICAgICAgICAgIDxwIGRhdGEtdi0wZWYzMTUwZT1cIlwiIGNsYXNzPVwicHJvLXN1bW1hcnkga2FpdGlcIj7kvJjotKjmu6TmnZAg5Zub6YeN6L+H5rukPC9wPlxyXG4gICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgIDwvZGl2Pjxicj5cclxuICAgICAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIG5hbWU6XCJwcm9kdWN0c1wiLFxyXG4gZGF0YSgpe1xyXG4gICByZXR1cm57fVxyXG4gfSAsXHJcbiAgIG1ldGhvZHM6e1xyXG4gICAgcHJvKCl7XHJcbiAgICAgIGxvY2F0aW9uLmhyZWY9XCJwcm9kdWN0Lmh0bWxcIlxyXG4gICAgfVxyXG4gIH0sXHJcbiBtb3VudGVkKCl7XHJcblxyXG4gfVxyXG59XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgc2NvcGVkPlxyXG5kaXZ7XHJcbiAgZmxvYXQ6IGxlZnQ7XHJcbn1cclxuLnByb2R1Y3Rze1xyXG4gIHdpZHRoOiA4MCU7XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbiAgcGFkZGluZzogMzBweCAxMCUgMzBweDtcclxuICBiYWNrZ3JvdW5kOiByZ2IoODksIDg5LCA4OSk7XHJcbn1cclxuLnByby1jb2x7XHJcbiAgd2lkdGg6IDI1JTtcclxuICBtYXJnaW4tcmlnaHQ6IDMycHg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbn1cclxuLnByby1ncm91cC10aXRsZXtcclxuICBmb250LXNpemU6IDE4cHg7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICAgIHBhZGRpbmc6IDE1cHggMDtcclxuICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XHJcbiAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGxpbmUtaGVpZ2h0OiAyOHB4O1xyXG4gICAgZm9udC1mYW1pbHk6IOW+rui9r+mbhem7kTtcclxufVxyXG4ucHJvLWdyb3VwLXRpdGxlOjphZnRlcntcclxuICBjb250ZW50OiBcIiBcIjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICBib3R0b206IDA7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMXB4O1xyXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM5YjllYTQ7XHJcbiAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDAgMDtcclxuICAgIHRyYW5zZm9ybS1vcmlnaW46IDAgMDtcclxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZVkoLjUpO1xyXG4gICAgdHJhbnNmb3JtOiBzY2FsZVkoLjUpO1xyXG59XHJcbi5wcm8tYmxvY2tbZGF0YS12LTBlZjMxNTBlXSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcbi5wcm8tdGh1bWJbZGF0YS12LTBlZjMxNTBlXSB7XHJcbiAgICB3aWR0aDogNTJweDtcclxuICAgIGhlaWdodDogNTJweDtcclxuICAgIG1hcmdpbi1yaWdodDogMjBweDtcclxuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XHJcbiAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGZsb2F0OiBsZWZ0O1xyXG59XHJcbi5wcm8tdGl0bGVbZGF0YS12LTBlZjMxNTBlXSB7XHJcbiAgICBjb2xvcjogI2VhZWFlYTtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgbGluZS1oZWlnaHQ6IDIycHg7XHJcbiAgICBtYXJnaW4tdG9wOiA4cHg7XHJcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG59XHJcbi5wcm8tc3VtbWFyeVtkYXRhLXYtMGVmMzE1MGVdIHtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgIGNvbG9yOiAjY2FjZWQ0O1xyXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG59XHJcbi5rYWl0aSB7XHJcbiAgICBmb250LWZhbWlseTogS2FpVGk7XHJcbn1cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcHJvZHVjdHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcHJvZHVjdHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcHJvZHVjdHMudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9YThlNjFhNjImc2NvcGVkPXRydWUmbGFuZz1jc3MmXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9wcm9kdWN0cy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YThlNjFhNjImc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vcHJvZHVjdHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9wcm9kdWN0cy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vcHJvZHVjdHMudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9YThlNjFhNjImc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcImE4ZTYxYTYyXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcTGlua1xcXFx3ZWJcXFxc54yr54yr54uX54uX56eR5oqAXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJ2E4ZTYxYTYyJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJ2E4ZTYxYTYyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJ2E4ZTYxYTYyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9wcm9kdWN0cy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YThlNjFhNjImc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignYThlNjFhNjInLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9jb21wb25lbnQvcHJvZHVjdHMudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyohXG4gKiBWdWUuanMgdjIuNi4xMFxuICogKGMpIDIwMTQtMjAxOSBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgc3RyaW5nIGNvbnRhaW5pbmcgc3RhdGljIGtleXMgZnJvbSBjb21waWxlciBtb2R1bGVzLlxuICovXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzIChtb2R1bGVzKSB7XG4gIHJldHVybiBtb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAoa2V5cywgbSkge1xuICAgIHJldHVybiBrZXlzLmNvbmNhdChtLnN0YXRpY0tleXMgfHwgW10pXG4gIH0sIFtdKS5qb2luKCcsJylcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xuICAgICAgdmFyIGlzQXJyYXlCID0gQXJyYXkuaXNBcnJheShiKTtcbiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICogZm91bmQgaW4gdGhlIGFycmF5IChpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgdGhlIGFycmF5IG11c3RcbiAqIGNvbnRhaW4gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHNoYXBlKSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAnc2VydmVyUHJlZmV0Y2gnXG5dO1xuXG4vKiAgKi9cblxuXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdXBkYXRlcyBhc3luY2hyb25vdXNseS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBWdWUgVGVzdCBVdGlsc1xuICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxuICAgKi9cbiAgYXN5bmM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG4vKipcbiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAqIHVzaW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTMvc2VtYW50aWNzLXNjcmlwdGluZy5odG1sI3BvdGVudGlhbGN1c3RvbWVsZW1lbnRuYW1lXG4gKiBza2lwcGluZyBcXHUxMDAwMC1cXHVFRkZGRiBkdWUgdG8gaXQgZnJlZXppbmcgdXAgUGhhbnRvbUpTXG4gKi9cbnZhciB1bmljb2RlUmVnRXhwID0gL2EtekEtWlxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDNGLVxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkQvO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICovXG5mdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcbiAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAqL1xudmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoKFwiW15cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIi4kX1xcXFxkXVwiKSk7XG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqKSB7IHJldHVybiB9XG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cbi8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xudmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XG5cbi8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xudmFyIHdlZXhQbGF0Zm9ybSA9IGluV2VleCAmJiBXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7XG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG52YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbnZhciBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbnZhciBpc0lPUyA9IChVQSAmJiAvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpKSB8fCAod2VleFBsYXRmb3JtID09PSAnaW9zJyk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcbnZhciBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xudmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgIC8vIHdlIG5lZWQgdG8gc29ydCB0aGVtIG5vdyB0byBtYWtlIHN1cmUgdGhleSBmaXJlIGluIGNvcnJlY3RcbiAgICAvLyBvcmRlclxuICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXJcbi8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7XG4gIHRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgdGFyZ2V0U3RhY2sucG9wKCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGggLSAxXTtcbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zLFxuICBhc3luY0ZhY3Rvcnlcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuU2NvcGVJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIGNyZWF0ZUVtcHR5Vk5vZGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICBpZiAoIHRleHQgPT09IHZvaWQgMCApIHRleHQgPSAnJztcblxuICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSB0ZXh0O1xuICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gIHJldHVybiBub2RlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxufVxuXG4vLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG4vLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHtcbiAgdmFyIGNsb25lZCA9IG5ldyBWTm9kZShcbiAgICB2bm9kZS50YWcsXG4gICAgdm5vZGUuZGF0YSxcbiAgICAvLyAjNzk3NVxuICAgIC8vIGNsb25lIGNoaWxkcmVuIGFycmF5IHRvIGF2b2lkIG11dGF0aW5nIG9yaWdpbmFsIGluIGNhc2Ugb2YgY2xvbmluZ1xuICAgIC8vIGEgY2hpbGQuXG4gICAgdm5vZGUuY2hpbGRyZW4gJiYgdm5vZGUuY2hpbGRyZW4uc2xpY2UoKSxcbiAgICB2bm9kZS50ZXh0LFxuICAgIHZub2RlLmVsbSxcbiAgICB2bm9kZS5jb250ZXh0LFxuICAgIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsXG4gICAgdm5vZGUuYXN5bmNGYWN0b3J5XG4gICk7XG4gIGNsb25lZC5ucyA9IHZub2RlLm5zO1xuICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYztcbiAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcbiAgY2xvbmVkLmlzQ29tbWVudCA9IHZub2RlLmlzQ29tbWVudDtcbiAgY2xvbmVkLmZuQ29udGV4dCA9IHZub2RlLmZuQ29udGV4dDtcbiAgY2xvbmVkLmZuT3B0aW9ucyA9IHZub2RlLmZuT3B0aW9ucztcbiAgY2xvbmVkLmZuU2NvcGVJZCA9IHZub2RlLmZuU2NvcGVJZDtcbiAgY2xvbmVkLmFzeW5jTWV0YSA9IHZub2RlLmFzeW5jTWV0YTtcbiAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTtcbiAgcmV0dXJuIGNsb25lZFxufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1xuXG52YXIgbWV0aG9kc1RvUGF0Y2ggPSBbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dO1xuXG4vKipcbiAqIEludGVyY2VwdCBtdXRhdGluZyBtZXRob2RzIGFuZCBlbWl0IGV2ZW50c1xuICovXG5tZXRob2RzVG9QYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgdmFyIGluc2VydGVkO1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdwdXNoJzpcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBJbiBzb21lIGNhc2VzIHdlIG1heSB3YW50IHRvIGRpc2FibGUgb2JzZXJ2YXRpb24gaW5zaWRlIGEgY29tcG9uZW50J3NcbiAqIHVwZGF0ZSBjb21wdXRhdGlvbi5cbiAqL1xudmFyIHNob3VsZE9ic2VydmUgPSB0cnVlO1xuXG5mdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcgKHZhbHVlKSB7XG4gIHNob3VsZE9ic2VydmUgPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGlzIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRoZSB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2ggdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBpZiAoaGFzUHJvdG8pIHtcbiAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29weUF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICovXG5mdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIHNob3VsZE9ic2VydmUgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG4gIGlmICgoIWdldHRlciB8fCBzZXR0ZXIpICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YWwgPSBvYmpba2V5XTtcbiAgfVxuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgLy8gIzc5ODE6IGZvciBhY2Nlc3NvciBwcm9wZXJ0aWVzIHdpdGhvdXQgc2V0dGVyXG4gICAgICBpZiAoZ2V0dGVyICYmICFzZXR0ZXIpIHsgcmV0dXJuIH1cbiAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gbmV3VmFsO1xuICAgICAgfVxuICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTtcbiAgICAgIGRlcC5ub3RpZnkoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBzZXQgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5sZW5ndGggPSBNYXRoLm1heCh0YXJnZXQubGVuZ3RoLCBrZXkpO1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoa2V5IGluIHRhcmdldCAmJiAhKGtleSBpbiBPYmplY3QucHJvdG90eXBlKSkge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBkZWxldGUgdGFyZ2V0W2tleV07XG4gIGlmICghb2IpIHtcbiAgICByZXR1cm5cbiAgfVxuICBvYi5kZXAubm90aWZ5KCk7XG59XG5cbi8qKlxuICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLlxuICovXG5mdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcbiAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGUgPSB2YWx1ZVtpXTtcbiAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgZGVwZW5kQXJyYXkoZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIE9wdGlvbiBvdmVyd3JpdGluZyBzdHJhdGVnaWVzIGFyZSBmdW5jdGlvbnMgdGhhdCBoYW5kbGVcbiAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cbiAqL1xudmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG5cbi8qKlxuICogT3B0aW9ucyB3aXRoIHJlc3RyaWN0aW9uc1xuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXG4gICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbClcbiAgfVxuXG4gIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlSG9vayAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWxcbikge1xuICB2YXIgcmVzID0gY2hpbGRWYWxcbiAgICA/IHBhcmVudFZhbFxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICA/IGNoaWxkVmFsXG4gICAgICAgIDogW2NoaWxkVmFsXVxuICAgIDogcGFyZW50VmFsO1xuICByZXR1cm4gcmVzXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgOiByZXNcbn1cblxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XG4gICAgICByZXMucHVzaChob29rc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIW5ldyBSZWdFeHAoKFwiXlthLXpBLVpdW1xcXFwtXFxcXC4wLTlfXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiQkMSA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmJCQxLCB1cGRhdGU6IGRlZiQkMSB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gIC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucyxcbiAgLy8gYnV0IG9ubHkgaWYgaXQgaXMgYSByYXcgb3B0aW9ucyBvYmplY3QgdGhhdCBpc24ndFxuICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS5cbiAgaWYgKCFjaGlsZC5fYmFzZSkge1xuICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgfVxuICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAga2V5LFxuICBwcm9wT3B0aW9ucyxcbiAgcHJvcHNEYXRhLFxuICB2bVxuKSB7XG4gIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgdmFyIGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xuICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gIHZhciBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcbiAgaWYgKGJvb2xlYW5JbmRleCA+IC0xKSB7XG4gICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSB7XG4gICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWZcbiAgICAgIC8vIGJvb2xlYW4gaGFzIGhpZ2hlciBwcmlvcml0eVxuICAgICAgdmFyIHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcbiAgICAgIGlmIChzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZE9ic2VydmUgPSBzaG91bGRPYnNlcnZlO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICB0b2dnbGVPYnNlcnZpbmcocHJldlNob3VsZE9ic2VydmUpO1xuICB9XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgLy8gc2tpcCB2YWxpZGF0aW9uIGZvciB3ZWV4IHJlY3ljbGUtbGlzdCBjaGlsZCBjb21wb25lbnQgcHJvcHNcbiAgICAhKGZhbHNlKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgdmFyIGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIGV4cGVjdGVkVmFsdWU7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIHJlY2VpdmVkVmFsdWUgKyBcIi5cIjtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUgKHZhbHVlKSB7XG4gIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLlxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbi8vIEhvd2V2ZXIsIGl0IGhhcyBzdWJ0bGUgcHJvYmxlbXMgd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50XG4vLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuLy8gdGhhdCBjYW5ub3QgYmUgY2lyY3VtdmVudGVkIChlLmcuICM3MTA5LCAjNzE1MywgIzc1NDYsICM3ODM0LCAjODEwOSkuXG4vLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Ncbi8vIHdoZXJlIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKVxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG52YXIgdGltZXJGdW5jO1xuXG4vLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4vLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuXG4gIC8vIFRlY2hpbmljYWxseSBpdCBsZXZlcmFnZXMgdGhlIChtYWNybykgdGFzayBxdWV1ZSxcbiAgLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayAoY2IsIGN0eCkge1xuICB2YXIgX3Jlc29sdmU7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9yZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZShjdHgpO1xuICAgIH1cbiAgfSk7XG4gIGlmICghcGVuZGluZykge1xuICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgIHRpbWVyRnVuYygpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgIH07XG4gIH1cbn1cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIiArIGtleSArIFwiXFxcIiBiZWNhdXNlIFwiICtcbiAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWljYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nICE9PSB0b01lcmdlICYmICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX21lcmdlZCkpIHtcbiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChmMSwgZjIpIHtcbiAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgIGYxKGEsIGIpO1xuICAgIGYyKGEsIGIpO1xuICB9O1xuICBtZXJnZWQuX21lcmdlZCA9IHRydWU7XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0J1xuICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgdmFyIGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XG4gICAgaWYgKFxuICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgPyBleGlzdGluZy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTFcbiAgICAgICAgOiBleGlzdGluZyAhPT0gY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVlcyBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHRoaXMudm0sIChcImNhbGxiYWNrIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyB0eXBlIFxcXCJcIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArIFwiXFxcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgKFwiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjEwJztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNQcmVUYWcgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiB0YWcgPT09ICdwcmUnOyB9O1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICB0YWdOYW1lOiB0YWdOYW1lLFxuICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+XG4gICAgLy8gdG8gZW5zdXJlIHJlbW92ZWQgZWxlbWVudHMgc3RheSBpbiBjb3JyZWN0IHJlbGF0aXZlIHBvc2l0aW9uc1xuICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgdmFyIGNhbk1vdmUgPSAhcmVtb3ZlT25seTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0R1cGxpY2F0ZUtleXMobmV3Q2gpO1xuICAgIH1cblxuICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICBpZiAoaXNVbmRlZihvbGRTdGFydFZub2RlKSkge1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnRcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSlcbiAgICAgICAgICA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XVxuICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGVUb01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgaWYgKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCB2bm9kZVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoXG4gICAgb2xkVm5vZGUsXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXgsXG4gICAgcmVtb3ZlT25seVxuICApIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgW29sZFZub2RlXSwgMCwgMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaXNJbml0aWFsUGF0Y2gpO1xuICAgIHJldHVybiB2bm9kZS5lbG1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRpcmVjdGl2ZXMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICBkZXN0cm95OiBmdW5jdGlvbiB1bmJpbmREaXJlY3RpdmVzICh2bm9kZSkge1xuICAgIHVwZGF0ZURpcmVjdGl2ZXModm5vZGUsIGVtcHR5Tm9kZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgZGlyLm9sZEFyZyA9IG9sZERpci5hcmc7XG4gICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aEluc2VydC5sZW5ndGgpIHtcbiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbEluc2VydCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpIHtcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwgJ2NvbXBvbmVudFVwZGF0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFpc0NyZWF0ZSkge1xuICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG4gICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmRcbiAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBlbXB0eU1vZGlmaWVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gIGRpcnMsXG4gIHZtXG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghZGlycykge1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHJldHVybiByZXNcbiAgfVxuICB2YXIgaSwgZGlyO1xuICBmb3IgKGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcbiAgICB9XG4gICAgcmVzW2dldFJhd0Rpck5hbWUoZGlyKV0gPSBkaXI7XG4gICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7XG4gIHJldHVybiBkaXIucmF3TmFtZSB8fCAoKGRpci5uYW1lKSArIFwiLlwiICsgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMgfHwge30pLmpvaW4oJy4nKSkpXG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rJDEgKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHtcbiAgdmFyIGZuID0gZGlyLmRlZiAmJiBkaXIuZGVmW2hvb2tdO1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bm9kZS5jb250ZXh0LCAoXCJkaXJlY3RpdmUgXCIgKyAoZGlyLm5hbWUpICsgXCIgXCIgKyBob29rICsgXCIgaG9va1wiKSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBiYXNlTW9kdWxlcyA9IFtcbiAgcmVmLFxuICBkaXJlY3RpdmVzXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoZWwudGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGVjaG5pY2FsbHkgYWxsb3dmdWxsc2NyZWVuIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgZm9yIDxpZnJhbWU+LFxuICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcbiAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDoga2V5O1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSwgdmFsdWUpKTtcbiAgfSBlbHNlIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlU2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gIzcxMzg6IElFMTAgJiAxMSBmaXJlcyBpbnB1dCBldmVudCB3aGVuIHNldHRpbmcgcGxhY2Vob2xkZXIgb25cbiAgICAvLyA8dGV4dGFyZWE+Li4uIGJsb2NrIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhbmQgcmVtb3ZlIHRoZSBibG9ja2VyXG4gICAgLy8gaW1tZWRpYXRlbHkuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKFxuICAgICAgaXNJRSAmJiAhaXNJRTkgJiZcbiAgICAgIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgJiZcbiAgICAgIGtleSA9PT0gJ3BsYWNlaG9sZGVyJyAmJiB2YWx1ZSAhPT0gJycgJiYgIWVsLl9faWVwaFxuICAgICkge1xuICAgICAgdmFyIGJsb2NrZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgfTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGVsLl9faWVwaCA9IHRydWU7IC8qIElFIHBsYWNlaG9sZGVyIHBhdGNoZWQgKi9cbiAgICB9XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICB9XG59XG5cbnZhciBhdHRycyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVBdHRycyxcbiAgdXBkYXRlOiB1cGRhdGVBdHRyc1xufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59O1xuXG4vKiAgKi9cblxudmFyIHZhbGlkRGl2aXNpb25DaGFyUkUgPSAvW1xcdykuK1xcLV8kXFxdXS87XG5cbmZ1bmN0aW9uIHBhcnNlRmlsdGVycyAoZXhwKSB7XG4gIHZhciBpblNpbmdsZSA9IGZhbHNlO1xuICB2YXIgaW5Eb3VibGUgPSBmYWxzZTtcbiAgdmFyIGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTtcbiAgdmFyIGluUmVnZXggPSBmYWxzZTtcbiAgdmFyIGN1cmx5ID0gMDtcbiAgdmFyIHNxdWFyZSA9IDA7XG4gIHZhciBwYXJlbiA9IDA7XG4gIHZhciBsYXN0RmlsdGVySW5kZXggPSAwO1xuICB2YXIgYywgcHJldiwgaSwgZXhwcmVzc2lvbiwgZmlsdGVycztcblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwLmxlbmd0aDsgaSsrKSB7XG4gICAgcHJldiA9IGM7XG4gICAgYyA9IGV4cC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChpblNpbmdsZSkge1xuICAgICAgaWYgKGMgPT09IDB4MjcgJiYgcHJldiAhPT0gMHg1QykgeyBpblNpbmdsZSA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpbkRvdWJsZSkge1xuICAgICAgaWYgKGMgPT09IDB4MjIgJiYgcHJldiAhPT0gMHg1QykgeyBpbkRvdWJsZSA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChpblRlbXBsYXRlU3RyaW5nKSB7XG4gICAgICBpZiAoYyA9PT0gMHg2MCAmJiBwcmV2ICE9PSAweDVDKSB7IGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5SZWdleCkge1xuICAgICAgaWYgKGMgPT09IDB4MmYgJiYgcHJldiAhPT0gMHg1QykgeyBpblJlZ2V4ID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgYyA9PT0gMHg3QyAmJiAvLyBwaXBlXG4gICAgICBleHAuY2hhckNvZGVBdChpICsgMSkgIT09IDB4N0MgJiZcbiAgICAgIGV4cC5jaGFyQ29kZUF0KGkgLSAxKSAhPT0gMHg3QyAmJlxuICAgICAgIWN1cmx5ICYmICFzcXVhcmUgJiYgIXBhcmVuXG4gICAgKSB7XG4gICAgICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIGZpcnN0IGZpbHRlciwgZW5kIG9mIGV4cHJlc3Npb25cbiAgICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gICAgICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaEZpbHRlcigpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSAweDIyOiBpbkRvdWJsZSA9IHRydWU7IGJyZWFrICAgICAgICAgLy8gXCJcbiAgICAgICAgY2FzZSAweDI3OiBpblNpbmdsZSA9IHRydWU7IGJyZWFrICAgICAgICAgLy8gJ1xuICAgICAgICBjYXNlIDB4NjA6IGluVGVtcGxhdGVTdHJpbmcgPSB0cnVlOyBicmVhayAvLyBgXG4gICAgICAgIGNhc2UgMHgyODogcGFyZW4rKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIChcbiAgICAgICAgY2FzZSAweDI5OiBwYXJlbi0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKVxuICAgICAgICBjYXNlIDB4NUI6IHNxdWFyZSsrOyBicmVhayAgICAgICAgICAgICAgICAvLyBbXG4gICAgICAgIGNhc2UgMHg1RDogc3F1YXJlLS07IGJyZWFrICAgICAgICAgICAgICAgIC8vIF1cbiAgICAgICAgY2FzZSAweDdCOiBjdXJseSsrOyBicmVhayAgICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICBjYXNlIDB4N0Q6IGN1cmx5LS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICB9XG4gICAgICBpZiAoYyA9PT0gMHgyZikgeyAvLyAvXG4gICAgICAgIHZhciBqID0gaSAtIDE7XG4gICAgICAgIHZhciBwID0gKHZvaWQgMCk7XG4gICAgICAgIC8vIGZpbmQgZmlyc3Qgbm9uLXdoaXRlc3BhY2UgcHJldiBjaGFyXG4gICAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICAgIHAgPSBleHAuY2hhckF0KGopO1xuICAgICAgICAgIGlmIChwICE9PSAnICcpIHsgYnJlYWsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcCB8fCAhdmFsaWREaXZpc2lvbkNoYXJSRS50ZXN0KHApKSB7XG4gICAgICAgICAgaW5SZWdleCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gIH0gZWxzZSBpZiAobGFzdEZpbHRlckluZGV4ICE9PSAwKSB7XG4gICAgcHVzaEZpbHRlcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaEZpbHRlciAoKSB7XG4gICAgKGZpbHRlcnMgfHwgKGZpbHRlcnMgPSBbXSkpLnB1c2goZXhwLnNsaWNlKGxhc3RGaWx0ZXJJbmRleCwgaSkudHJpbSgpKTtcbiAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJzKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGZpbHRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGV4cHJlc3Npb24gPSB3cmFwRmlsdGVyKGV4cHJlc3Npb24sIGZpbHRlcnNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHByZXNzaW9uXG59XG5cbmZ1bmN0aW9uIHdyYXBGaWx0ZXIgKGV4cCwgZmlsdGVyKSB7XG4gIHZhciBpID0gZmlsdGVyLmluZGV4T2YoJygnKTtcbiAgaWYgKGkgPCAwKSB7XG4gICAgLy8gX2Y6IHJlc29sdmVGaWx0ZXJcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgZmlsdGVyICsgXCJcXFwiKShcIiArIGV4cCArIFwiKVwiKVxuICB9IGVsc2Uge1xuICAgIHZhciBuYW1lID0gZmlsdGVyLnNsaWNlKDAsIGkpO1xuICAgIHZhciBhcmdzID0gZmlsdGVyLnNsaWNlKGkgKyAxKTtcbiAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgbmFtZSArIFwiXFxcIikoXCIgKyBleHAgKyAoYXJncyAhPT0gJyknID8gJywnICsgYXJncyA6IGFyZ3MpKVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmZ1bmN0aW9uIGJhc2VXYXJuIChtc2csIHJhbmdlKSB7XG4gIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSBjb21waWxlcl06IFwiICsgbXNnKSk7XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbmZ1bmN0aW9uIHBsdWNrTW9kdWxlRnVuY3Rpb24gKFxuICBtb2R1bGVzLFxuICBrZXlcbikge1xuICByZXR1cm4gbW9kdWxlc1xuICAgID8gbW9kdWxlcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG1ba2V5XTsgfSkuZmlsdGVyKGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9KVxuICAgIDogW11cbn1cblxuZnVuY3Rpb24gYWRkUHJvcCAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSwgZHluYW1pYykge1xuICAoZWwucHJvcHMgfHwgKGVsLnByb3BzID0gW10pKS5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSwgZHluYW1pYzogZHluYW1pYyB9LCByYW5nZSkpO1xuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRyIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlLCBkeW5hbWljKSB7XG4gIHZhciBhdHRycyA9IGR5bmFtaWNcbiAgICA/IChlbC5keW5hbWljQXR0cnMgfHwgKGVsLmR5bmFtaWNBdHRycyA9IFtdKSlcbiAgICA6IChlbC5hdHRycyB8fCAoZWwuYXR0cnMgPSBbXSkpO1xuICBhdHRycy5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSwgZHluYW1pYzogZHluYW1pYyB9LCByYW5nZSkpO1xuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG4vLyBhZGQgYSByYXcgYXR0ciAodXNlIHRoaXMgaW4gcHJlVHJhbnNmb3JtcylcbmZ1bmN0aW9uIGFkZFJhd0F0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UpIHtcbiAgZWwuYXR0cnNNYXBbbmFtZV0gPSB2YWx1ZTtcbiAgZWwuYXR0cnNMaXN0LnB1c2gocmFuZ2VTZXRJdGVtKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0sIHJhbmdlKSk7XG59XG5cbmZ1bmN0aW9uIGFkZERpcmVjdGl2ZSAoXG4gIGVsLFxuICBuYW1lLFxuICByYXdOYW1lLFxuICB2YWx1ZSxcbiAgYXJnLFxuICBpc0R5bmFtaWNBcmcsXG4gIG1vZGlmaWVycyxcbiAgcmFuZ2Vcbikge1xuICAoZWwuZGlyZWN0aXZlcyB8fCAoZWwuZGlyZWN0aXZlcyA9IFtdKSkucHVzaChyYW5nZVNldEl0ZW0oe1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3TmFtZTogcmF3TmFtZSxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgYXJnOiBhcmcsXG4gICAgaXNEeW5hbWljQXJnOiBpc0R5bmFtaWNBcmcsXG4gICAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbiAgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyTWFya2VyIChzeW1ib2wsIG5hbWUsIGR5bmFtaWMpIHtcbiAgcmV0dXJuIGR5bmFtaWNcbiAgICA/IChcIl9wKFwiICsgbmFtZSArIFwiLFxcXCJcIiArIHN5bWJvbCArIFwiXFxcIilcIilcbiAgICA6IHN5bWJvbCArIG5hbWUgLy8gbWFyayB0aGUgZXZlbnQgYXMgY2FwdHVyZWRcbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlciAoXG4gIGVsLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzLFxuICBpbXBvcnRhbnQsXG4gIHdhcm4sXG4gIHJhbmdlLFxuICBkeW5hbWljXG4pIHtcbiAgbW9kaWZpZXJzID0gbW9kaWZpZXJzIHx8IGVtcHR5T2JqZWN0O1xuICAvLyB3YXJuIHByZXZlbnQgYW5kIHBhc3NpdmUgbW9kaWZpZXJcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4gJiZcbiAgICBtb2RpZmllcnMucHJldmVudCAmJiBtb2RpZmllcnMucGFzc2l2ZVxuICApIHtcbiAgICB3YXJuKFxuICAgICAgJ3Bhc3NpdmUgYW5kIHByZXZlbnQgY2FuXFwndCBiZSB1c2VkIHRvZ2V0aGVyLiAnICtcbiAgICAgICdQYXNzaXZlIGhhbmRsZXIgY2FuXFwndCBwcmV2ZW50IGRlZmF1bHQgZXZlbnQuJyxcbiAgICAgIHJhbmdlXG4gICAgKTtcbiAgfVxuXG4gIC8vIG5vcm1hbGl6ZSBjbGljay5yaWdodCBhbmQgY2xpY2subWlkZGxlIHNpbmNlIHRoZXkgZG9uJ3QgYWN0dWFsbHkgZmlyZVxuICAvLyB0aGlzIGlzIHRlY2huaWNhbGx5IGJyb3dzZXItc3BlY2lmaWMsIGJ1dCBhdCBsZWFzdCBmb3Igbm93IGJyb3dzZXJzIGFyZVxuICAvLyB0aGUgb25seSB0YXJnZXQgZW52cyB0aGF0IGhhdmUgcmlnaHQvbWlkZGxlIGNsaWNrcy5cbiAgaWYgKG1vZGlmaWVycy5yaWdodCkge1xuICAgIGlmIChkeW5hbWljKSB7XG4gICAgICBuYW1lID0gXCIoXCIgKyBuYW1lICsgXCIpPT09J2NsaWNrJz8nY29udGV4dG1lbnUnOihcIiArIG5hbWUgKyBcIilcIjtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgIG5hbWUgPSAnY29udGV4dG1lbnUnO1xuICAgICAgZGVsZXRlIG1vZGlmaWVycy5yaWdodDtcbiAgICB9XG4gIH0gZWxzZSBpZiAobW9kaWZpZXJzLm1pZGRsZSkge1xuICAgIGlmIChkeW5hbWljKSB7XG4gICAgICBuYW1lID0gXCIoXCIgKyBuYW1lICsgXCIpPT09J2NsaWNrJz8nbW91c2V1cCc6KFwiICsgbmFtZSArIFwiKVwiO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2NsaWNrJykge1xuICAgICAgbmFtZSA9ICdtb3VzZXVwJztcbiAgICB9XG4gIH1cblxuICAvLyBjaGVjayBjYXB0dXJlIG1vZGlmaWVyXG4gIGlmIChtb2RpZmllcnMuY2FwdHVyZSkge1xuICAgIGRlbGV0ZSBtb2RpZmllcnMuY2FwdHVyZTtcbiAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCchJywgbmFtZSwgZHluYW1pYyk7XG4gIH1cbiAgaWYgKG1vZGlmaWVycy5vbmNlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5vbmNlO1xuICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJ34nLCBuYW1lLCBkeW5hbWljKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKG1vZGlmaWVycy5wYXNzaXZlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5wYXNzaXZlO1xuICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJyYnLCBuYW1lLCBkeW5hbWljKTtcbiAgfVxuXG4gIHZhciBldmVudHM7XG4gIGlmIChtb2RpZmllcnMubmF0aXZlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5uYXRpdmU7XG4gICAgZXZlbnRzID0gZWwubmF0aXZlRXZlbnRzIHx8IChlbC5uYXRpdmVFdmVudHMgPSB7fSk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzID0gZWwuZXZlbnRzIHx8IChlbC5ldmVudHMgPSB7fSk7XG4gIH1cblxuICB2YXIgbmV3SGFuZGxlciA9IHJhbmdlU2V0SXRlbSh7IHZhbHVlOiB2YWx1ZS50cmltKCksIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpO1xuICBpZiAobW9kaWZpZXJzICE9PSBlbXB0eU9iamVjdCkge1xuICAgIG5ld0hhbmRsZXIubW9kaWZpZXJzID0gbW9kaWZpZXJzO1xuICB9XG5cbiAgdmFyIGhhbmRsZXJzID0gZXZlbnRzW25hbWVdO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcnMpKSB7XG4gICAgaW1wb3J0YW50ID8gaGFuZGxlcnMudW5zaGlmdChuZXdIYW5kbGVyKSA6IGhhbmRsZXJzLnB1c2gobmV3SGFuZGxlcik7XG4gIH0gZWxzZSBpZiAoaGFuZGxlcnMpIHtcbiAgICBldmVudHNbbmFtZV0gPSBpbXBvcnRhbnQgPyBbbmV3SGFuZGxlciwgaGFuZGxlcnNdIDogW2hhbmRsZXJzLCBuZXdIYW5kbGVyXTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHNbbmFtZV0gPSBuZXdIYW5kbGVyO1xuICB9XG5cbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0UmF3QmluZGluZ0F0dHIgKFxuICBlbCxcbiAgbmFtZVxuKSB7XG4gIHJldHVybiBlbC5yYXdBdHRyc01hcFsnOicgKyBuYW1lXSB8fFxuICAgIGVsLnJhd0F0dHJzTWFwWyd2LWJpbmQ6JyArIG5hbWVdIHx8XG4gICAgZWwucmF3QXR0cnNNYXBbbmFtZV1cbn1cblxuZnVuY3Rpb24gZ2V0QmluZGluZ0F0dHIgKFxuICBlbCxcbiAgbmFtZSxcbiAgZ2V0U3RhdGljXG4pIHtcbiAgdmFyIGR5bmFtaWNWYWx1ZSA9XG4gICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJzonICsgbmFtZSkgfHxcbiAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1iaW5kOicgKyBuYW1lKTtcbiAgaWYgKGR5bmFtaWNWYWx1ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHBhcnNlRmlsdGVycyhkeW5hbWljVmFsdWUpXG4gIH0gZWxzZSBpZiAoZ2V0U3RhdGljICE9PSBmYWxzZSkge1xuICAgIHZhciBzdGF0aWNWYWx1ZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsIG5hbWUpO1xuICAgIGlmIChzdGF0aWNWYWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RhdGljVmFsdWUpXG4gICAgfVxuICB9XG59XG5cbi8vIG5vdGU6IHRoaXMgb25seSByZW1vdmVzIHRoZSBhdHRyIGZyb20gdGhlIEFycmF5IChhdHRyc0xpc3QpIHNvIHRoYXQgaXRcbi8vIGRvZXNuJ3QgZ2V0IHByb2Nlc3NlZCBieSBwcm9jZXNzQXR0cnMuXG4vLyBCeSBkZWZhdWx0IGl0IGRvZXMgTk9UIHJlbW92ZSBpdCBmcm9tIHRoZSBtYXAgKGF0dHJzTWFwKSBiZWNhdXNlIHRoZSBtYXAgaXNcbi8vIG5lZWRlZCBkdXJpbmcgY29kZWdlbi5cbmZ1bmN0aW9uIGdldEFuZFJlbW92ZUF0dHIgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmVtb3ZlRnJvbU1hcFxuKSB7XG4gIHZhciB2YWw7XG4gIGlmICgodmFsID0gZWwuYXR0cnNNYXBbbmFtZV0pICE9IG51bGwpIHtcbiAgICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAobGlzdFtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAocmVtb3ZlRnJvbU1hcCkge1xuICAgIGRlbGV0ZSBlbC5hdHRyc01hcFtuYW1lXTtcbiAgfVxuICByZXR1cm4gdmFsXG59XG5cbmZ1bmN0aW9uIGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4IChcbiAgZWwsXG4gIG5hbWVcbikge1xuICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBhdHRyID0gbGlzdFtpXTtcbiAgICBpZiAobmFtZS50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgcmV0dXJuIGF0dHJcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmFuZ2VTZXRJdGVtIChcbiAgaXRlbSxcbiAgcmFuZ2Vcbikge1xuICBpZiAocmFuZ2UpIHtcbiAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCkge1xuICAgICAgaXRlbS5zdGFydCA9IHJhbmdlLnN0YXJ0O1xuICAgIH1cbiAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwpIHtcbiAgICAgIGl0ZW0uZW5kID0gcmFuZ2UuZW5kO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaXRlbVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlIGdlbmVyYXRpb24gZm9yIGNvbXBvbmVudCB2LW1vZGVsXG4gKi9cbmZ1bmN0aW9uIGdlbkNvbXBvbmVudE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICB2YXIgbnVtYmVyID0gcmVmLm51bWJlcjtcbiAgdmFyIHRyaW0gPSByZWYudHJpbTtcblxuICB2YXIgYmFzZVZhbHVlRXhwcmVzc2lvbiA9ICckJHYnO1xuICB2YXIgdmFsdWVFeHByZXNzaW9uID0gYmFzZVZhbHVlRXhwcmVzc2lvbjtcbiAgaWYgKHRyaW0pIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPVxuICAgICAgXCIodHlwZW9mIFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiID09PSAnc3RyaW5nJ1wiICtcbiAgICAgIFwiPyBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIi50cmltKClcIiArXG4gICAgICBcIjogXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gIH1cbiAgaWYgKG51bWJlcikge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuICB2YXIgYXNzaWdubWVudCA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUV4cHJlc3Npb24pO1xuXG4gIGVsLm1vZGVsID0ge1xuICAgIHZhbHVlOiAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSxcbiAgICBleHByZXNzaW9uOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSksXG4gICAgY2FsbGJhY2s6IChcImZ1bmN0aW9uIChcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIikge1wiICsgYXNzaWdubWVudCArIFwifVwiKVxuICB9O1xufVxuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGVnZW4gaGVscGVyIGZvciBnZW5lcmF0aW5nIHYtbW9kZWwgdmFsdWUgYXNzaWdubWVudCBjb2RlLlxuICovXG5mdW5jdGlvbiBnZW5Bc3NpZ25tZW50Q29kZSAoXG4gIHZhbHVlLFxuICBhc3NpZ25tZW50XG4pIHtcbiAgdmFyIHJlcyA9IHBhcnNlTW9kZWwodmFsdWUpO1xuICBpZiAocmVzLmtleSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAodmFsdWUgKyBcIj1cIiArIGFzc2lnbm1lbnQpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIiRzZXQoXCIgKyAocmVzLmV4cCkgKyBcIiwgXCIgKyAocmVzLmtleSkgKyBcIiwgXCIgKyBhc3NpZ25tZW50ICsgXCIpXCIpXG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhIHYtbW9kZWwgZXhwcmVzc2lvbiBpbnRvIGEgYmFzZSBwYXRoIGFuZCBhIGZpbmFsIGtleSBzZWdtZW50LlxuICogSGFuZGxlcyBib3RoIGRvdC1wYXRoIGFuZCBwb3NzaWJsZSBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogUG9zc2libGUgY2FzZXM6XG4gKlxuICogLSB0ZXN0XG4gKiAtIHRlc3Rba2V5XVxuICogLSB0ZXN0W3Rlc3QxW2tleV1dXG4gKiAtIHRlc3RbXCJhXCJdW2tleV1cbiAqIC0geHh4LnRlc3RbYVthXS50ZXN0MVtrZXldXVxuICogLSB0ZXN0Lnh4eC5hW1wiYXNhXCJdW3Rlc3QxW2tleV1dXG4gKlxuICovXG5cbnZhciBsZW4sIHN0ciwgY2hyLCBpbmRleCQxLCBleHByZXNzaW9uUG9zLCBleHByZXNzaW9uRW5kUG9zO1xuXG5cblxuZnVuY3Rpb24gcGFyc2VNb2RlbCAodmFsKSB7XG4gIC8vIEZpeCBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlL3B1bGwvNzczMFxuICAvLyBhbGxvdyB2LW1vZGVsPVwib2JqLnZhbCBcIiAodHJhaWxpbmcgd2hpdGVzcGFjZSlcbiAgdmFsID0gdmFsLnRyaW0oKTtcbiAgbGVuID0gdmFsLmxlbmd0aDtcblxuICBpZiAodmFsLmluZGV4T2YoJ1snKSA8IDAgfHwgdmFsLmxhc3RJbmRleE9mKCddJykgPCBsZW4gLSAxKSB7XG4gICAgaW5kZXgkMSA9IHZhbC5sYXN0SW5kZXhPZignLicpO1xuICAgIGlmIChpbmRleCQxID4gLTEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4cDogdmFsLnNsaWNlKDAsIGluZGV4JDEpLFxuICAgICAgICBrZXk6ICdcIicgKyB2YWwuc2xpY2UoaW5kZXgkMSArIDEpICsgJ1wiJ1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBleHA6IHZhbCxcbiAgICAgICAga2V5OiBudWxsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RyID0gdmFsO1xuICBpbmRleCQxID0gZXhwcmVzc2lvblBvcyA9IGV4cHJlc3Npb25FbmRQb3MgPSAwO1xuXG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gMHg1Qikge1xuICAgICAgcGFyc2VCcmFja2V0KGNocik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHA6IHZhbC5zbGljZSgwLCBleHByZXNzaW9uUG9zKSxcbiAgICBrZXk6IHZhbC5zbGljZShleHByZXNzaW9uUG9zICsgMSwgZXhwcmVzc2lvbkVuZFBvcylcbiAgfVxufVxuXG5mdW5jdGlvbiBuZXh0ICgpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KCsraW5kZXgkMSlcbn1cblxuZnVuY3Rpb24gZW9mICgpIHtcbiAgcmV0dXJuIGluZGV4JDEgPj0gbGVuXG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nU3RhcnQgKGNocikge1xuICByZXR1cm4gY2hyID09PSAweDIyIHx8IGNociA9PT0gMHgyN1xufVxuXG5mdW5jdGlvbiBwYXJzZUJyYWNrZXQgKGNocikge1xuICB2YXIgaW5CcmFja2V0ID0gMTtcbiAgZXhwcmVzc2lvblBvcyA9IGluZGV4JDE7XG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChjaHIgPT09IDB4NUIpIHsgaW5CcmFja2V0Kys7IH1cbiAgICBpZiAoY2hyID09PSAweDVEKSB7IGluQnJhY2tldC0tOyB9XG4gICAgaWYgKGluQnJhY2tldCA9PT0gMCkge1xuICAgICAgZXhwcmVzc2lvbkVuZFBvcyA9IGluZGV4JDE7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZVN0cmluZyAoY2hyKSB7XG4gIHZhciBzdHJpbmdRdW90ZSA9IGNocjtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoY2hyID09PSBzdHJpbmdRdW90ZSkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciB3YXJuJDE7XG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcbi8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG52YXIgUkFOR0VfVE9LRU4gPSAnX19yJztcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG5mdW5jdGlvbiBtb2RlbCAoXG4gIGVsLFxuICBkaXIsXG4gIF93YXJuXG4pIHtcbiAgd2FybiQxID0gX3dhcm47XG4gIHZhciB2YWx1ZSA9IGRpci52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGRpci5tb2RpZmllcnM7XG4gIHZhciB0YWcgPSBlbC50YWc7XG4gIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGlucHV0cyB3aXRoIHR5cGU9XCJmaWxlXCIgYXJlIHJlYWQgb25seSBhbmQgc2V0dGluZyB0aGUgaW5wdXQnc1xuICAgIC8vIHZhbHVlIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAnZmlsZScpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgdHlwZT1cXFwiZmlsZVxcXCI+OlxcblwiICtcbiAgICAgICAgXCJGaWxlIGlucHV0cyBhcmUgcmVhZCBvbmx5LiBVc2UgYSB2LW9uOmNoYW5nZSBsaXN0ZW5lciBpbnN0ZWFkLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1tb2RlbCddXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICBnZW5Db21wb25lbnRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gICAgLy8gY29tcG9uZW50IHYtbW9kZWwgZG9lc24ndCBuZWVkIGV4dHJhIHJ1bnRpbWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgZ2VuU2VsZWN0KGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgIGdlbkNoZWNrYm94TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAncmFkaW8nKSB7XG4gICAgZ2VuUmFkaW9Nb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnIHx8IHRhZyA9PT0gJ3RleHRhcmVhJykge1xuICAgIGdlbkRlZmF1bHRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAoIWNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICBnZW5Db21wb25lbnRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gICAgLy8gY29tcG9uZW50IHYtbW9kZWwgZG9lc24ndCBuZWVkIGV4dHJhIHJ1bnRpbWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybiQxKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OiBcIiArXG4gICAgICBcInYtbW9kZWwgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGVsZW1lbnQgdHlwZS4gXCIgK1xuICAgICAgJ0lmIHlvdSBhcmUgd29ya2luZyB3aXRoIGNvbnRlbnRlZGl0YWJsZSwgaXRcXCdzIHJlY29tbWVuZGVkIHRvICcgK1xuICAgICAgJ3dyYXAgYSBsaWJyYXJ5IGRlZGljYXRlZCBmb3IgdGhhdCBwdXJwb3NlIGluc2lkZSBhIGN1c3RvbSBjb21wb25lbnQuJyxcbiAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICApO1xuICB9XG5cbiAgLy8gZW5zdXJlIHJ1bnRpbWUgZGlyZWN0aXZlIG1ldGFkYXRhXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGdlbkNoZWNrYm94TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gIHZhciB0cnVlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd0cnVlLXZhbHVlJykgfHwgJ3RydWUnO1xuICB2YXIgZmFsc2VWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2ZhbHNlLXZhbHVlJykgfHwgJ2ZhbHNlJztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLFxuICAgIFwiQXJyYXkuaXNBcnJheShcIiArIHZhbHVlICsgXCIpXCIgK1xuICAgIFwiP19pKFwiICsgdmFsdWUgKyBcIixcIiArIHZhbHVlQmluZGluZyArIFwiKT4tMVwiICsgKFxuICAgICAgdHJ1ZVZhbHVlQmluZGluZyA9PT0gJ3RydWUnXG4gICAgICAgID8gKFwiOihcIiArIHZhbHVlICsgXCIpXCIpXG4gICAgICAgIDogKFwiOl9xKFwiICsgdmFsdWUgKyBcIixcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIilcIilcbiAgICApXG4gICk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLFxuICAgIFwidmFyICQkYT1cIiArIHZhbHVlICsgXCIsXCIgK1xuICAgICAgICAnJCRlbD0kZXZlbnQudGFyZ2V0LCcgK1xuICAgICAgICBcIiQkYz0kJGVsLmNoZWNrZWQ/KFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKTooXCIgKyBmYWxzZVZhbHVlQmluZGluZyArIFwiKTtcIiArXG4gICAgJ2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7JyArXG4gICAgICBcInZhciAkJHY9XCIgKyAobnVtYmVyID8gJ19uKCcgKyB2YWx1ZUJpbmRpbmcgKyAnKScgOiB2YWx1ZUJpbmRpbmcpICsgXCIsXCIgK1xuICAgICAgICAgICckJGk9X2koJCRhLCQkdik7JyArXG4gICAgICBcImlmKCQkZWwuY2hlY2tlZCl7JCRpPDAmJihcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYS5jb25jYXQoWyQkdl0pJykpICsgXCIpfVwiICtcbiAgICAgIFwiZWxzZXskJGk+LTEmJihcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpJykpICsgXCIpfVwiICtcbiAgICBcIn1lbHNle1wiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRjJykpICsgXCJ9XCIsXG4gICAgbnVsbCwgdHJ1ZVxuICApO1xufVxuXG5mdW5jdGlvbiBnZW5SYWRpb01vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuICB2YWx1ZUJpbmRpbmcgPSBudW1iZXIgPyAoXCJfbihcIiArIHZhbHVlQmluZGluZyArIFwiKVwiKSA6IHZhbHVlQmluZGluZztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLCAoXCJfcShcIiArIHZhbHVlICsgXCIsXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIilcIikpO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlQmluZGluZyksIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5TZWxlY3QgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHNlbGVjdGVkVmFsID0gXCJBcnJheS5wcm90b3R5cGUuZmlsdGVyXCIgK1xuICAgIFwiLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSlcIiArXG4gICAgXCIubWFwKGZ1bmN0aW9uKG8pe3ZhciB2YWwgPSBcXFwiX3ZhbHVlXFxcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlO1wiICtcbiAgICBcInJldHVybiBcIiArIChudW1iZXIgPyAnX24odmFsKScgOiAndmFsJykgKyBcIn0pXCI7XG5cbiAgdmFyIGFzc2lnbm1lbnQgPSAnJGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdJztcbiAgdmFyIGNvZGUgPSBcInZhciAkJHNlbGVjdGVkVmFsID0gXCIgKyBzZWxlY3RlZFZhbCArIFwiO1wiO1xuICBjb2RlID0gY29kZSArIFwiIFwiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBhc3NpZ25tZW50KSk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLCBjb2RlLCBudWxsLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZ2VuRGVmYXVsdE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgdHlwZSA9IGVsLmF0dHJzTWFwLnR5cGU7XG5cbiAgLy8gd2FybiBpZiB2LWJpbmQ6dmFsdWUgY29uZmxpY3RzIHdpdGggdi1tb2RlbFxuICAvLyBleGNlcHQgZm9yIGlucHV0cyB3aXRoIHYtYmluZDp0eXBlXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHZhbHVlJDEgPSBlbC5hdHRyc01hcFsndi1iaW5kOnZhbHVlJ10gfHwgZWwuYXR0cnNNYXBbJzp2YWx1ZSddO1xuICAgIHZhciB0eXBlQmluZGluZyA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dHlwZSddIHx8IGVsLmF0dHJzTWFwWyc6dHlwZSddO1xuICAgIGlmICh2YWx1ZSQxICYmICF0eXBlQmluZGluZykge1xuICAgICAgdmFyIGJpbmRpbmcgPSBlbC5hdHRyc01hcFsndi1iaW5kOnZhbHVlJ10gPyAndi1iaW5kOnZhbHVlJyA6ICc6dmFsdWUnO1xuICAgICAgd2FybiQxKFxuICAgICAgICBiaW5kaW5nICsgXCI9XFxcIlwiICsgdmFsdWUkMSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCB2LW1vZGVsIG9uIHRoZSBzYW1lIGVsZW1lbnQgXCIgK1xuICAgICAgICAnYmVjYXVzZSB0aGUgbGF0dGVyIGFscmVhZHkgZXhwYW5kcyB0byBhIHZhbHVlIGJpbmRpbmcgaW50ZXJuYWxseScsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwW2JpbmRpbmddXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZWYgPSBtb2RpZmllcnMgfHwge307XG4gIHZhciBsYXp5ID0gcmVmLmxhenk7XG4gIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICB2YXIgdHJpbSA9IHJlZi50cmltO1xuICB2YXIgbmVlZENvbXBvc2l0aW9uR3VhcmQgPSAhbGF6eSAmJiB0eXBlICE9PSAncmFuZ2UnO1xuICB2YXIgZXZlbnQgPSBsYXp5XG4gICAgPyAnY2hhbmdlJ1xuICAgIDogdHlwZSA9PT0gJ3JhbmdlJ1xuICAgICAgPyBSQU5HRV9UT0tFTlxuICAgICAgOiAnaW5wdXQnO1xuXG4gIHZhciB2YWx1ZUV4cHJlc3Npb24gPSAnJGV2ZW50LnRhcmdldC52YWx1ZSc7XG4gIGlmICh0cmltKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCIkZXZlbnQudGFyZ2V0LnZhbHVlLnRyaW0oKVwiO1xuICB9XG4gIGlmIChudW1iZXIpIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBcIl9uKFwiICsgdmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gIH1cblxuICB2YXIgY29kZSA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUV4cHJlc3Npb24pO1xuICBpZiAobmVlZENvbXBvc2l0aW9uR3VhcmQpIHtcbiAgICBjb2RlID0gXCJpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZylyZXR1cm47XCIgKyBjb2RlO1xuICB9XG5cbiAgYWRkUHJvcChlbCwgJ3ZhbHVlJywgKFwiKFwiICsgdmFsdWUgKyBcIilcIikpO1xuICBhZGRIYW5kbGVyKGVsLCBldmVudCwgY29kZSwgbnVsbCwgdHJ1ZSk7XG4gIGlmICh0cmltIHx8IG51bWJlcikge1xuICAgIGFkZEhhbmRsZXIoZWwsICdibHVyJywgJyRmb3JjZVVwZGF0ZSgpJyk7XG4gIH1cbn1cblxuLyogICovXG5cbi8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2Vcbi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmVcbi8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMgKG9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgIC8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbiAgICB2YXIgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTtcbiAgfVxuICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAvLyBhZnRlciAyLjUuIEtlZXBpbmcgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBnZW5lcmF0ZWQgY29kZSBmcm9tIDwgMi40XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgIG9uLmNoYW5nZSA9IFtdLmNvbmNhdChvbltDSEVDS0JPWF9SQURJT19UT0tFTl0sIG9uLmNoYW5nZSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICByZW1vdmUkMihldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgIH1cbiAgfVxufVxuXG4vLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcFxuLy8gaW1wbGVtZW50YXRpb24gYW5kIGRvZXMgbm90IGZpcmUgbWljcm90YXNrcyBpbiBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLCBzb1xuLy8gc2FmZSB0byBleGNsdWRlLlxudmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgcGFzc2l2ZVxuKSB7XG4gIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcbiAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcbiAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcbiAgLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZFxuICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXG4gIGlmICh1c2VNaWNyb3Rhc2tGaXgpIHtcbiAgICB2YXIgYXR0YWNoZWRUaW1lc3RhbXAgPSBjdXJyZW50Rmx1c2hUaW1lc3RhbXA7XG4gICAgdmFyIG9yaWdpbmFsID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gb3JpZ2luYWwuX3dyYXBwZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKFxuICAgICAgICAvLyBubyBidWJibGluZywgc2hvdWxkIGFsd2F5cyBmaXJlLlxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYSBzYWZldHkgbmV0IGluIGNhc2UgZXZlbnQudGltZVN0YW1wIGlzIHVucmVsaWFibGUgaW5cbiAgICAgICAgLy8gY2VydGFpbiB3ZWlyZCBlbnZpcm9ubWVudHMuLi5cbiAgICAgICAgZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fFxuICAgICAgICAvLyBldmVudCBpcyBmaXJlZCBhZnRlciBoYW5kbGVyIGF0dGFjaG1lbnRcbiAgICAgICAgZS50aW1lU3RhbXAgPj0gYXR0YWNoZWRUaW1lc3RhbXAgfHxcbiAgICAgICAgLy8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXG4gICAgICAgIC8vICM5NDYyIGlPUyA5IGJ1ZzogZXZlbnQudGltZVN0YW1wIGlzIDAgYWZ0ZXIgaGlzdG9yeS5wdXNoU3RhdGVcbiAgICAgICAgLy8gIzk2ODEgUXRXZWJFbmdpbmUgZXZlbnQudGltZVN0YW1wIGlzIG5lZ2F0aXZlIHZhbHVlXG4gICAgICAgIGUudGltZVN0YW1wIDw9IDAgfHxcbiAgICAgICAgLy8gIzk0NDggYmFpbCBpZiBldmVudCBpcyBmaXJlZCBpbiBhbm90aGVyIGRvY3VtZW50IGluIGEgbXVsdGktcGFnZVxuICAgICAgICAvLyBlbGVjdHJvbi9udy5qcyBhcHAsIHNpbmNlIGV2ZW50LnRpbWVTdGFtcCB3aWxsIGJlIHVzaW5nIGEgZGlmZmVyZW50XG4gICAgICAgIC8vIHN0YXJ0aW5nIHJlZmVyZW5jZVxuICAgICAgICBlLnRhcmdldC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBzdXBwb3J0c1Bhc3NpdmVcbiAgICAgID8geyBjYXB0dXJlOiBjYXB0dXJlLCBwYXNzaXZlOiBwYXNzaXZlIH1cbiAgICAgIDogY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIuX3dyYXBwZXIgfHwgaGFuZGxlcixcbiAgICBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCBjcmVhdGVPbmNlSGFuZGxlciQxLCB2bm9kZS5jb250ZXh0KTtcbiAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufTtcblxuLyogICovXG5cbnZhciBzdmdDb250YWluZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG5cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5XG4gICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJiBlbG0udGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBpc1VuZGVmKGN1cikgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmIGlzU1ZHKGVsbS50YWdOYW1lKSAmJiBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XG4gICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHNcbiAgICAgIHN2Z0NvbnRhaW5lciA9IHN2Z0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIgKyBjdXIgKyBcIjwvc3ZnPlwiO1xuICAgICAgdmFyIHN2ZyA9IHN2Z0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGVsbS5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoc3ZnLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgICAvLyBgdmFsdWVgIGlzIGhhbmRsZWQgc2VwYXJhdGVseSBiZWNhdXNlIHRoZSBET00gdmFsdWUgbWF5IGJlIHRlbXBvcmFyaWx5XG4gICAgICAvLyBvdXQgb2Ygc3luYyB3aXRoIFZET00gc3RhdGUgZHVlIHRvIGZvY3VzLCBjb21wb3NpdGlvbiBhbmQgbW9kaWZpZXJzLlxuICAgICAgLy8gVGhpcyAgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNhcnJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgICBjdXIgIT09IG9sZFByb3BzW2tleV1cbiAgICApIHtcbiAgICAgIC8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbiAgICAgIC8vIGUuZy4gYHZhbHVlYCBvbiA8cHJvZ3Jlc3M+IHcvIG5vbi1maW5pdGUgdmFsdWVcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG52YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG4gIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEgKGRhdGEpIHtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBzdHlsZURhdGE7XG5cbiAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChcbiAgICAgICAgY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhICYmXG4gICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKVxuICAgICAgKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgfVxuXG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xuICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGNzc1ZhclJFID0gL14tLS87XG52YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbnZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUobmFtZSksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4vLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duIChpLmUuIGFjdGluZ1xuLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdyAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZVxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbiAodmFsLCBuYW1lLCB2bm9kZSkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gXCIgK1xuICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgTmFOIC0gXCIgK1xuICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZER1cmF0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gKiAtIGEgbWVyZ2VkIGhvb2sgKGludm9rZXIpIHdpdGggdGhlIG9yaWdpbmFsIGluIC5mbnNcbiAqIC0gYSB3cmFwcGVkIGNvbXBvbmVudCBtZXRob2QgKGNoZWNrIC5fbGVuZ3RoKVxuICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICovXG5mdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoIChmbikge1xuICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7XG4gICAgLy8gaW52b2tlclxuICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKVxuICAgICAgICA/IGludm9rZXJGbnNbMF1cbiAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlJCQxICh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICAgIGxlYXZlKHZub2RlLCBybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgfVxuICB9XG59IDoge307XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl07XG5cbi8qICAqL1xuXG4vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcbi8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkaXJlY3RpdmUgPSB7XG4gIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAvLyAjNjkwM1xuICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBpc1RleHRJbnB1dFR5cGUoZWwudHlwZSkpIHtcbiAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGF0IHRoZSB2YWx1ZSBpcyBvdXQtb2Ytc3luYyB3aXRoIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cbiAgICAgIHZhciBwcmV2T3B0aW9ucyA9IGVsLl92T3B0aW9ucztcbiAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZShmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOyB9KSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCBpZlxuICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zKTsgfSlcbiAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgdmFsdWUpOyB9KVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKSB7IHJldHVybiB9XG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBkaXJlY3RpdmUsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcblxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiAgICAgICEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UgJiYgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudClcbiAgICApIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTtcbiAgICB0aGlzLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHRoaXMkMSk7XG4gICAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgICB0aGlzJDEuX19wYXRjaF9fKFxuICAgICAgICB0aGlzJDEuX3Zub2RlLFxuICAgICAgICB0aGlzJDEua2VwdCxcbiAgICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICk7XG4gICAgICB0aGlzJDEuX3Zub2RlID0gdGhpcyQxLmtlcHQ7XG4gICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgIHVwZGF0ZS5jYWxsKHRoaXMkMSwgdm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLl9yZWZsb3cgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCdcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbnZhciBkZWZhdWx0VGFnUkUgPSAvXFx7XFx7KCg/Oi58XFxyP1xcbikrPylcXH1cXH0vZztcbnZhciByZWdleEVzY2FwZVJFID0gL1stLiorP14ke30oKXxbXFxdXFwvXFxcXF0vZztcblxudmFyIGJ1aWxkUmVnZXggPSBjYWNoZWQoZnVuY3Rpb24gKGRlbGltaXRlcnMpIHtcbiAgdmFyIG9wZW4gPSBkZWxpbWl0ZXJzWzBdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICB2YXIgY2xvc2UgPSBkZWxpbWl0ZXJzWzFdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICByZXR1cm4gbmV3IFJlZ0V4cChvcGVuICsgJygoPzoufFxcXFxuKSs/KScgKyBjbG9zZSwgJ2cnKVxufSk7XG5cblxuXG5mdW5jdGlvbiBwYXJzZVRleHQgKFxuICB0ZXh0LFxuICBkZWxpbWl0ZXJzXG4pIHtcbiAgdmFyIHRhZ1JFID0gZGVsaW1pdGVycyA/IGJ1aWxkUmVnZXgoZGVsaW1pdGVycykgOiBkZWZhdWx0VGFnUkU7XG4gIGlmICghdGFnUkUudGVzdCh0ZXh0KSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0b2tlbnMgPSBbXTtcbiAgdmFyIHJhd1Rva2VucyA9IFtdO1xuICB2YXIgbGFzdEluZGV4ID0gdGFnUkUubGFzdEluZGV4ID0gMDtcbiAgdmFyIG1hdGNoLCBpbmRleCwgdG9rZW5WYWx1ZTtcbiAgd2hpbGUgKChtYXRjaCA9IHRhZ1JFLmV4ZWModGV4dCkpKSB7XG4gICAgaW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAvLyBwdXNoIHRleHQgdG9rZW5cbiAgICBpZiAoaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpKTtcbiAgICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRva2VuVmFsdWUpKTtcbiAgICB9XG4gICAgLy8gdGFnIHRva2VuXG4gICAgdmFyIGV4cCA9IHBhcnNlRmlsdGVycyhtYXRjaFsxXS50cmltKCkpO1xuICAgIHRva2Vucy5wdXNoKChcIl9zKFwiICsgZXhwICsgXCIpXCIpKTtcbiAgICByYXdUb2tlbnMucHVzaCh7ICdAYmluZGluZyc6IGV4cCB9KTtcbiAgICBsYXN0SW5kZXggPSBpbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgfVxuICBpZiAobGFzdEluZGV4IDwgdGV4dC5sZW5ndGgpIHtcbiAgICByYXdUb2tlbnMucHVzaCh0b2tlblZhbHVlID0gdGV4dC5zbGljZShsYXN0SW5kZXgpKTtcbiAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0b2tlblZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBleHByZXNzaW9uOiB0b2tlbnMuam9pbignKycpLFxuICAgIHRva2VuczogcmF3VG9rZW5zXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gIHZhciB3YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB2YXIgc3RhdGljQ2xhc3MgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnY2xhc3MnKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RhdGljQ2xhc3MpIHtcbiAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHN0YXRpY0NsYXNzLCBvcHRpb25zLmRlbGltaXRlcnMpO1xuICAgIGlmIChyZXMpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiY2xhc3M9XFxcIlwiICsgc3RhdGljQ2xhc3MgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGNsYXNzPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6Y2xhc3M9XCJ2YWxcIj4uJyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ2NsYXNzJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChzdGF0aWNDbGFzcykge1xuICAgIGVsLnN0YXRpY0NsYXNzID0gSlNPTi5zdHJpbmdpZnkoc3RhdGljQ2xhc3MpO1xuICB9XG4gIHZhciBjbGFzc0JpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2NsYXNzJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKGNsYXNzQmluZGluZykge1xuICAgIGVsLmNsYXNzQmluZGluZyA9IGNsYXNzQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhIChlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljQ2xhc3MpIHtcbiAgICBkYXRhICs9IFwic3RhdGljQ2xhc3M6XCIgKyAoZWwuc3RhdGljQ2xhc3MpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLmNsYXNzQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJjbGFzczpcIiArIChlbC5jbGFzc0JpbmRpbmcpICsgXCIsXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxudmFyIGtsYXNzJDEgPSB7XG4gIHN0YXRpY0tleXM6IFsnc3RhdGljQ2xhc3MnXSxcbiAgdHJhbnNmb3JtTm9kZTogdHJhbnNmb3JtTm9kZSxcbiAgZ2VuRGF0YTogZ2VuRGF0YVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUkMSAoZWwsIG9wdGlvbnMpIHtcbiAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHZhciBzdGF0aWNTdHlsZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzdHlsZScpO1xuICBpZiAoc3RhdGljU3R5bGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHJlcyA9IHBhcnNlVGV4dChzdGF0aWNTdHlsZSwgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcInN0eWxlPVxcXCJcIiArIHN0YXRpY1N0eWxlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBzdHlsZT1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOnN0eWxlPVwidmFsXCI+LicsXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3N0eWxlJ11cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWwuc3RhdGljU3R5bGUgPSBKU09OLnN0cmluZ2lmeShwYXJzZVN0eWxlVGV4dChzdGF0aWNTdHlsZSkpO1xuICB9XG5cbiAgdmFyIHN0eWxlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnc3R5bGUnLCBmYWxzZSAvKiBnZXRTdGF0aWMgKi8pO1xuICBpZiAoc3R5bGVCaW5kaW5nKSB7XG4gICAgZWwuc3R5bGVCaW5kaW5nID0gc3R5bGVCaW5kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMSAoZWwpIHtcbiAgdmFyIGRhdGEgPSAnJztcbiAgaWYgKGVsLnN0YXRpY1N0eWxlKSB7XG4gICAgZGF0YSArPSBcInN0YXRpY1N0eWxlOlwiICsgKGVsLnN0YXRpY1N0eWxlKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5zdHlsZUJpbmRpbmcpIHtcbiAgICBkYXRhICs9IFwic3R5bGU6KFwiICsgKGVsLnN0eWxlQmluZGluZykgKyBcIiksXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxudmFyIHN0eWxlJDEgPSB7XG4gIHN0YXRpY0tleXM6IFsnc3RhdGljU3R5bGUnXSxcbiAgdHJhbnNmb3JtTm9kZTogdHJhbnNmb3JtTm9kZSQxLFxuICBnZW5EYXRhOiBnZW5EYXRhJDFcbn07XG5cbi8qICAqL1xuXG52YXIgZGVjb2RlcjtcblxudmFyIGhlID0ge1xuICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZSAoaHRtbCkge1xuICAgIGRlY29kZXIgPSBkZWNvZGVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRlY29kZXIuaW5uZXJIVE1MID0gaHRtbDtcbiAgICByZXR1cm4gZGVjb2Rlci50ZXh0Q29udGVudFxuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIGlzVW5hcnlUYWcgPSBtYWtlTWFwKFxuICAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxmcmFtZSxocixpbWcsaW5wdXQsaXNpbmRleCxrZXlnZW4sJyArXG4gICdsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicidcbik7XG5cbi8vIEVsZW1lbnRzIHRoYXQgeW91IGNhbiwgaW50ZW50aW9uYWxseSwgbGVhdmUgb3BlblxuLy8gKGFuZCB3aGljaCBjbG9zZSB0aGVtc2VsdmVzKVxudmFyIGNhbkJlTGVmdE9wZW5UYWcgPSBtYWtlTWFwKFxuICAnY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZSdcbik7XG5cbi8vIEhUTUw1IHRhZ3MgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sI2VsZW1lbnRzLTNcbi8vIFBocmFzaW5nIENvbnRlbnQgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZG9tLmh0bWwjcGhyYXNpbmctY29udGVudFxudmFyIGlzTm9uUGhyYXNpbmdUYWcgPSBtYWtlTWFwKFxuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGJhc2UsYmxvY2txdW90ZSxib2R5LGNhcHRpb24sY29sLGNvbGdyb3VwLGRkLCcgK1xuICAnZGV0YWlscyxkaWFsb2csZGl2LGRsLGR0LGZpZWxkc2V0LGZpZ2NhcHRpb24sZmlndXJlLGZvb3Rlcixmb3JtLCcgK1xuICAnaDEsaDIsaDMsaDQsaDUsaDYsaGVhZCxoZWFkZXIsaGdyb3VwLGhyLGh0bWwsbGVnZW5kLGxpLG1lbnVpdGVtLG1ldGEsJyArXG4gICdvcHRncm91cCxvcHRpb24scGFyYW0scnAscnQsc291cmNlLHN0eWxlLHN1bW1hcnksdGJvZHksdGQsdGZvb3QsdGgsdGhlYWQsJyArXG4gICd0aXRsZSx0cix0cmFjaydcbik7XG5cbi8qKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgaXQncyBtb3N0bHkgdmVuZG9yIGNvZGUuXG4gKi9cblxuLy8gUmVndWxhciBFeHByZXNzaW9ucyBmb3IgcGFyc2luZyB0YWdzIGFuZCBhdHRyaWJ1dGVzXG52YXIgYXR0cmlidXRlID0gL15cXHMqKFteXFxzXCInPD5cXC89XSspKD86XFxzKig9KVxccyooPzpcIihbXlwiXSopXCIrfCcoW14nXSopJyt8KFteXFxzXCInPTw+YF0rKSkpPy87XG52YXIgZHluYW1pY0FyZ0F0dHJpYnV0ZSA9IC9eXFxzKigoPzp2LVtcXHctXSs6fEB8OnwjKVxcW1tePV0rXFxdW15cXHNcIic8PlxcLz1dKikoPzpcXHMqKD0pXFxzKig/OlwiKFteXCJdKilcIit8JyhbXiddKiknK3woW15cXHNcIic9PD5gXSspKSk/LztcbnZhciBuY25hbWUgPSBcIlthLXpBLVpfXVtcXFxcLVxcXFwuMC05X2EtekEtWlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSpcIjtcbnZhciBxbmFtZUNhcHR1cmUgPSBcIigoPzpcIiArIG5jbmFtZSArIFwiXFxcXDopP1wiICsgbmNuYW1lICsgXCIpXCI7XG52YXIgc3RhcnRUYWdPcGVuID0gbmV3IFJlZ0V4cCgoXCJePFwiICsgcW5hbWVDYXB0dXJlKSk7XG52YXIgc3RhcnRUYWdDbG9zZSA9IC9eXFxzKihcXC8/KT4vO1xudmFyIGVuZFRhZyA9IG5ldyBSZWdFeHAoKFwiXjxcXFxcL1wiICsgcW5hbWVDYXB0dXJlICsgXCJbXj5dKj5cIikpO1xudmFyIGRvY3R5cGUgPSAvXjwhRE9DVFlQRSBbXj5dKz4vaTtcbi8vICM3Mjk4OiBlc2NhcGUgLSB0byBhdm9pZCBiZWluZyBwYXNlZCBhcyBIVE1MIGNvbW1lbnQgd2hlbiBpbmxpbmVkIGluIHBhZ2VcbnZhciBjb21tZW50ID0gL148IVxcLS0vO1xudmFyIGNvbmRpdGlvbmFsQ29tbWVudCA9IC9ePCFcXFsvO1xuXG4vLyBTcGVjaWFsIEVsZW1lbnRzIChjYW4gY29udGFpbiBhbnl0aGluZylcbnZhciBpc1BsYWluVGV4dEVsZW1lbnQgPSBtYWtlTWFwKCdzY3JpcHQsc3R5bGUsdGV4dGFyZWEnLCB0cnVlKTtcbnZhciByZUNhY2hlID0ge307XG5cbnZhciBkZWNvZGluZ01hcCA9IHtcbiAgJyZsdDsnOiAnPCcsXG4gICcmZ3Q7JzogJz4nLFxuICAnJnF1b3Q7JzogJ1wiJyxcbiAgJyZhbXA7JzogJyYnLFxuICAnJiMxMDsnOiAnXFxuJyxcbiAgJyYjOTsnOiAnXFx0JyxcbiAgJyYjMzk7JzogXCInXCJcbn07XG52YXIgZW5jb2RlZEF0dHIgPSAvJig/Omx0fGd0fHF1b3R8YW1wfCMzOSk7L2c7XG52YXIgZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMgPSAvJig/Omx0fGd0fHF1b3R8YW1wfCMzOXwjMTB8IzkpOy9nO1xuXG4vLyAjNTk5MlxudmFyIGlzSWdub3JlTmV3bGluZVRhZyA9IG1ha2VNYXAoJ3ByZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHNob3VsZElnbm9yZUZpcnN0TmV3bGluZSA9IGZ1bmN0aW9uICh0YWcsIGh0bWwpIHsgcmV0dXJuIHRhZyAmJiBpc0lnbm9yZU5ld2xpbmVUYWcodGFnKSAmJiBodG1sWzBdID09PSAnXFxuJzsgfTtcblxuZnVuY3Rpb24gZGVjb2RlQXR0ciAodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKSB7XG4gIHZhciByZSA9IHNob3VsZERlY29kZU5ld2xpbmVzID8gZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMgOiBlbmNvZGVkQXR0cjtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UocmUsIGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gZGVjb2RpbmdNYXBbbWF0Y2hdOyB9KVxufVxuXG5mdW5jdGlvbiBwYXJzZUhUTUwgKGh0bWwsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBleHBlY3RIVE1MID0gb3B0aW9ucy5leHBlY3RIVE1MO1xuICB2YXIgaXNVbmFyeVRhZyQkMSA9IG9wdGlvbnMuaXNVbmFyeVRhZyB8fCBubztcbiAgdmFyIGNhbkJlTGVmdE9wZW5UYWckJDEgPSBvcHRpb25zLmNhbkJlTGVmdE9wZW5UYWcgfHwgbm87XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0LCBsYXN0VGFnO1xuICB3aGlsZSAoaHRtbCkge1xuICAgIGxhc3QgPSBodG1sO1xuICAgIC8vIE1ha2Ugc3VyZSB3ZSdyZSBub3QgaW4gYSBwbGFpbnRleHQgY29udGVudCBlbGVtZW50IGxpa2Ugc2NyaXB0L3N0eWxlXG4gICAgaWYgKCFsYXN0VGFnIHx8ICFpc1BsYWluVGV4dEVsZW1lbnQobGFzdFRhZykpIHtcbiAgICAgIHZhciB0ZXh0RW5kID0gaHRtbC5pbmRleE9mKCc8Jyk7XG4gICAgICBpZiAodGV4dEVuZCA9PT0gMCkge1xuICAgICAgICAvLyBDb21tZW50OlxuICAgICAgICBpZiAoY29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbW1lbnRFbmQgPSBodG1sLmluZGV4T2YoJy0tPicpO1xuXG4gICAgICAgICAgaWYgKGNvbW1lbnRFbmQgPj0gMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvdWxkS2VlcENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5jb21tZW50KGh0bWwuc3Vic3RyaW5nKDQsIGNvbW1lbnRFbmQpLCBpbmRleCwgaW5kZXggKyBjb21tZW50RW5kICsgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZHZhbmNlKGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25kaXRpb25hbF9jb21tZW50I0Rvd25sZXZlbC1yZXZlYWxlZF9jb25kaXRpb25hbF9jb21tZW50XG4gICAgICAgIGlmIChjb25kaXRpb25hbENvbW1lbnQudGVzdChodG1sKSkge1xuICAgICAgICAgIHZhciBjb25kaXRpb25hbEVuZCA9IGh0bWwuaW5kZXhPZignXT4nKTtcblxuICAgICAgICAgIGlmIChjb25kaXRpb25hbEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBhZHZhbmNlKGNvbmRpdGlvbmFsRW5kICsgMik7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvY3R5cGU6XG4gICAgICAgIHZhciBkb2N0eXBlTWF0Y2ggPSBodG1sLm1hdGNoKGRvY3R5cGUpO1xuICAgICAgICBpZiAoZG9jdHlwZU1hdGNoKSB7XG4gICAgICAgICAgYWR2YW5jZShkb2N0eXBlTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5kIHRhZzpcbiAgICAgICAgdmFyIGVuZFRhZ01hdGNoID0gaHRtbC5tYXRjaChlbmRUYWcpO1xuICAgICAgICBpZiAoZW5kVGFnTWF0Y2gpIHtcbiAgICAgICAgICB2YXIgY3VySW5kZXggPSBpbmRleDtcbiAgICAgICAgICBhZHZhbmNlKGVuZFRhZ01hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgcGFyc2VFbmRUYWcoZW5kVGFnTWF0Y2hbMV0sIGN1ckluZGV4LCBpbmRleCk7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0YXJ0IHRhZzpcbiAgICAgICAgdmFyIHN0YXJ0VGFnTWF0Y2ggPSBwYXJzZVN0YXJ0VGFnKCk7XG4gICAgICAgIGlmIChzdGFydFRhZ01hdGNoKSB7XG4gICAgICAgICAgaGFuZGxlU3RhcnRUYWcoc3RhcnRUYWdNYXRjaCk7XG4gICAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFydFRhZ01hdGNoLnRhZ05hbWUsIGh0bWwpKSB7XG4gICAgICAgICAgICBhZHZhbmNlKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZXh0ID0gKHZvaWQgMCksIHJlc3QgPSAodm9pZCAwKSwgbmV4dCA9ICh2b2lkIDApO1xuICAgICAgaWYgKHRleHRFbmQgPj0gMCkge1xuICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICFlbmRUYWcudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFzdGFydFRhZ09wZW4udGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb21tZW50LnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAhY29uZGl0aW9uYWxDb21tZW50LnRlc3QocmVzdClcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gPCBpbiBwbGFpbiB0ZXh0LCBiZSBmb3JnaXZpbmcgYW5kIHRyZWF0IGl0IGFzIHRleHRcbiAgICAgICAgICBuZXh0ID0gcmVzdC5pbmRleE9mKCc8JywgMSk7XG4gICAgICAgICAgaWYgKG5leHQgPCAwKSB7IGJyZWFrIH1cbiAgICAgICAgICB0ZXh0RW5kICs9IG5leHQ7XG4gICAgICAgICAgcmVzdCA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IGh0bWwuc3Vic3RyaW5nKDAsIHRleHRFbmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dEVuZCA8IDApIHtcbiAgICAgICAgdGV4dCA9IGh0bWw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIGFkdmFuY2UodGV4dC5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5jaGFycyAmJiB0ZXh0KSB7XG4gICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCwgaW5kZXggLSB0ZXh0Lmxlbmd0aCwgaW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZW5kVGFnTGVuZ3RoID0gMDtcbiAgICAgIHZhciBzdGFja2VkVGFnID0gbGFzdFRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHJlU3RhY2tlZFRhZyA9IHJlQ2FjaGVbc3RhY2tlZFRhZ10gfHwgKHJlQ2FjaGVbc3RhY2tlZFRhZ10gPSBuZXcgUmVnRXhwKCcoW1xcXFxzXFxcXFNdKj8pKDwvJyArIHN0YWNrZWRUYWcgKyAnW14+XSo+KScsICdpJykpO1xuICAgICAgdmFyIHJlc3QkMSA9IGh0bWwucmVwbGFjZShyZVN0YWNrZWRUYWcsIGZ1bmN0aW9uIChhbGwsIHRleHQsIGVuZFRhZykge1xuICAgICAgICBlbmRUYWdMZW5ndGggPSBlbmRUYWcubGVuZ3RoO1xuICAgICAgICBpZiAoIWlzUGxhaW5UZXh0RWxlbWVudChzdGFja2VkVGFnKSAmJiBzdGFja2VkVGFnICE9PSAnbm9zY3JpcHQnKSB7XG4gICAgICAgICAgdGV4dCA9IHRleHRcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcLS0oW1xcc1xcU10qPyktLT4vZywgJyQxJykgLy8gIzcyOThcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcW0NEQVRBXFxbKFtcXHNcXFNdKj8pXV0+L2csICckMScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUoc3RhY2tlZFRhZywgdGV4dCkpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jaGFycykge1xuICAgICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnXG4gICAgICB9KTtcbiAgICAgIGluZGV4ICs9IGh0bWwubGVuZ3RoIC0gcmVzdCQxLmxlbmd0aDtcbiAgICAgIGh0bWwgPSByZXN0JDE7XG4gICAgICBwYXJzZUVuZFRhZyhzdGFja2VkVGFnLCBpbmRleCAtIGVuZFRhZ0xlbmd0aCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChodG1sID09PSBsYXN0KSB7XG4gICAgICBvcHRpb25zLmNoYXJzICYmIG9wdGlvbnMuY2hhcnMoaHRtbCk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RhY2subGVuZ3RoICYmIG9wdGlvbnMud2Fybikge1xuICAgICAgICBvcHRpb25zLndhcm4oKFwiTWFsLWZvcm1hdHRlZCB0YWcgYXQgZW5kIG9mIHRlbXBsYXRlOiBcXFwiXCIgKyBodG1sICsgXCJcXFwiXCIpLCB7IHN0YXJ0OiBpbmRleCArIGh0bWwubGVuZ3RoIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyBDbGVhbiB1cCBhbnkgcmVtYWluaW5nIHRhZ3NcbiAgcGFyc2VFbmRUYWcoKTtcblxuICBmdW5jdGlvbiBhZHZhbmNlIChuKSB7XG4gICAgaW5kZXggKz0gbjtcbiAgICBodG1sID0gaHRtbC5zdWJzdHJpbmcobik7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVN0YXJ0VGFnICgpIHtcbiAgICB2YXIgc3RhcnQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnT3Blbik7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB7XG4gICAgICAgIHRhZ05hbWU6IHN0YXJ0WzFdLFxuICAgICAgICBhdHRyczogW10sXG4gICAgICAgIHN0YXJ0OiBpbmRleFxuICAgICAgfTtcbiAgICAgIGFkdmFuY2Uoc3RhcnRbMF0ubGVuZ3RoKTtcbiAgICAgIHZhciBlbmQsIGF0dHI7XG4gICAgICB3aGlsZSAoIShlbmQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnQ2xvc2UpKSAmJiAoYXR0ciA9IGh0bWwubWF0Y2goZHluYW1pY0FyZ0F0dHJpYnV0ZSkgfHwgaHRtbC5tYXRjaChhdHRyaWJ1dGUpKSkge1xuICAgICAgICBhdHRyLnN0YXJ0ID0gaW5kZXg7XG4gICAgICAgIGFkdmFuY2UoYXR0clswXS5sZW5ndGgpO1xuICAgICAgICBhdHRyLmVuZCA9IGluZGV4O1xuICAgICAgICBtYXRjaC5hdHRycy5wdXNoKGF0dHIpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCkge1xuICAgICAgICBtYXRjaC51bmFyeVNsYXNoID0gZW5kWzFdO1xuICAgICAgICBhZHZhbmNlKGVuZFswXS5sZW5ndGgpO1xuICAgICAgICBtYXRjaC5lbmQgPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIG1hdGNoXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3RhcnRUYWcgKG1hdGNoKSB7XG4gICAgdmFyIHRhZ05hbWUgPSBtYXRjaC50YWdOYW1lO1xuICAgIHZhciB1bmFyeVNsYXNoID0gbWF0Y2gudW5hcnlTbGFzaDtcblxuICAgIGlmIChleHBlY3RIVE1MKSB7XG4gICAgICBpZiAobGFzdFRhZyA9PT0gJ3AnICYmIGlzTm9uUGhyYXNpbmdUYWcodGFnTmFtZSkpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcobGFzdFRhZyk7XG4gICAgICB9XG4gICAgICBpZiAoY2FuQmVMZWZ0T3BlblRhZyQkMSh0YWdOYW1lKSAmJiBsYXN0VGFnID09PSB0YWdOYW1lKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKHRhZ05hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1bmFyeSA9IGlzVW5hcnlUYWckJDEodGFnTmFtZSkgfHwgISF1bmFyeVNsYXNoO1xuXG4gICAgdmFyIGwgPSBtYXRjaC5hdHRycy5sZW5ndGg7XG4gICAgdmFyIGF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYXJncyA9IG1hdGNoLmF0dHJzW2ldO1xuICAgICAgdmFyIHZhbHVlID0gYXJnc1szXSB8fCBhcmdzWzRdIHx8IGFyZ3NbNV0gfHwgJyc7XG4gICAgICB2YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSB0YWdOYW1lID09PSAnYScgJiYgYXJnc1sxXSA9PT0gJ2hyZWYnXG4gICAgICAgID8gb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWZcbiAgICAgICAgOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzO1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGFyZ3NbMV0sXG4gICAgICAgIHZhbHVlOiBkZWNvZGVBdHRyKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcylcbiAgICAgIH07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgIGF0dHJzW2ldLnN0YXJ0ID0gYXJncy5zdGFydCArIGFyZ3NbMF0ubWF0Y2goL15cXHMqLykubGVuZ3RoO1xuICAgICAgICBhdHRyc1tpXS5lbmQgPSBhcmdzLmVuZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICBzdGFjay5wdXNoKHsgdGFnOiB0YWdOYW1lLCBsb3dlckNhc2VkVGFnOiB0YWdOYW1lLnRvTG93ZXJDYXNlKCksIGF0dHJzOiBhdHRycywgc3RhcnQ6IG1hdGNoLnN0YXJ0LCBlbmQ6IG1hdGNoLmVuZCB9KTtcbiAgICAgIGxhc3RUYWcgPSB0YWdOYW1lO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIGF0dHJzLCB1bmFyeSwgbWF0Y2guc3RhcnQsIG1hdGNoLmVuZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VFbmRUYWcgKHRhZ05hbWUsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgcG9zLCBsb3dlckNhc2VkVGFnTmFtZTtcbiAgICBpZiAoc3RhcnQgPT0gbnVsbCkgeyBzdGFydCA9IGluZGV4OyB9XG4gICAgaWYgKGVuZCA9PSBudWxsKSB7IGVuZCA9IGluZGV4OyB9XG5cbiAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IG9wZW5lZCB0YWcgb2YgdGhlIHNhbWUgdHlwZVxuICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICBsb3dlckNhc2VkVGFnTmFtZSA9IHRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGZvciAocG9zID0gc3RhY2subGVuZ3RoIC0gMTsgcG9zID49IDA7IHBvcy0tKSB7XG4gICAgICAgIGlmIChzdGFja1twb3NdLmxvd2VyQ2FzZWRUYWcgPT09IGxvd2VyQ2FzZWRUYWdOYW1lKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBubyB0YWcgbmFtZSBpcyBwcm92aWRlZCwgY2xlYW4gc2hvcFxuICAgICAgcG9zID0gMDtcbiAgICB9XG5cbiAgICBpZiAocG9zID49IDApIHtcbiAgICAgIC8vIENsb3NlIGFsbCB0aGUgb3BlbiBlbGVtZW50cywgdXAgdGhlIHN0YWNrXG4gICAgICBmb3IgKHZhciBpID0gc3RhY2subGVuZ3RoIC0gMTsgaSA+PSBwb3M7IGktLSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgIChpID4gcG9zIHx8ICF0YWdOYW1lKSAmJlxuICAgICAgICAgIG9wdGlvbnMud2FyblxuICAgICAgICApIHtcbiAgICAgICAgICBvcHRpb25zLndhcm4oXG4gICAgICAgICAgICAoXCJ0YWcgPFwiICsgKHN0YWNrW2ldLnRhZykgKyBcIj4gaGFzIG5vIG1hdGNoaW5nIGVuZCB0YWcuXCIpLFxuICAgICAgICAgICAgeyBzdGFydDogc3RhY2tbaV0uc3RhcnQsIGVuZDogc3RhY2tbaV0uZW5kIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICAgIG9wdGlvbnMuZW5kKHN0YWNrW2ldLnRhZywgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICBsYXN0VGFnID0gcG9zICYmIHN0YWNrW3BvcyAtIDFdLnRhZztcbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAnYnInKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCB0cnVlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAncCcpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIGZhbHNlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICBvcHRpb25zLmVuZCh0YWdOYW1lLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBvblJFID0gL15AfF52LW9uOi87XG52YXIgZGlyUkUgPSAvXnYtfF5AfF46LztcbnZhciBmb3JBbGlhc1JFID0gLyhbXFxzXFxTXSo/KVxccysoPzppbnxvZilcXHMrKFtcXHNcXFNdKikvO1xudmFyIGZvckl0ZXJhdG9yUkUgPSAvLChbXixcXH1cXF1dKikoPzosKFteLFxcfVxcXV0qKSk/JC87XG52YXIgc3RyaXBQYXJlbnNSRSA9IC9eXFwofFxcKSQvZztcbnZhciBkeW5hbWljQXJnUkUgPSAvXlxcWy4qXFxdJC87XG5cbnZhciBhcmdSRSA9IC86KC4qKSQvO1xudmFyIGJpbmRSRSA9IC9eOnxeXFwufF52LWJpbmQ6LztcbnZhciBtb2RpZmllclJFID0gL1xcLlteLlxcXV0rKD89W15cXF1dKiQpL2c7XG5cbnZhciBzbG90UkUgPSAvXnYtc2xvdCg6fCQpfF4jLztcblxudmFyIGxpbmVCcmVha1JFID0gL1tcXHJcXG5dLztcbnZhciB3aGl0ZXNwYWNlUkUkMSA9IC9cXHMrL2c7XG5cbnZhciBpbnZhbGlkQXR0cmlidXRlUkUgPSAvW1xcc1wiJzw+XFwvPV0vO1xuXG52YXIgZGVjb2RlSFRNTENhY2hlZCA9IGNhY2hlZChoZS5kZWNvZGUpO1xuXG52YXIgZW1wdHlTbG90U2NvcGVUb2tlbiA9IFwiX2VtcHR5X1wiO1xuXG4vLyBjb25maWd1cmFibGUgc3RhdGVcbnZhciB3YXJuJDI7XG52YXIgZGVsaW1pdGVycztcbnZhciB0cmFuc2Zvcm1zO1xudmFyIHByZVRyYW5zZm9ybXM7XG52YXIgcG9zdFRyYW5zZm9ybXM7XG52YXIgcGxhdGZvcm1Jc1ByZVRhZztcbnZhciBwbGF0Zm9ybU11c3RVc2VQcm9wO1xudmFyIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlO1xudmFyIG1heWJlQ29tcG9uZW50O1xuXG5mdW5jdGlvbiBjcmVhdGVBU1RFbGVtZW50IChcbiAgdGFnLFxuICBhdHRycyxcbiAgcGFyZW50XG4pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxLFxuICAgIHRhZzogdGFnLFxuICAgIGF0dHJzTGlzdDogYXR0cnMsXG4gICAgYXR0cnNNYXA6IG1ha2VBdHRyc01hcChhdHRycyksXG4gICAgcmF3QXR0cnNNYXA6IHt9LFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIGNoaWxkcmVuOiBbXVxuICB9XG59XG5cbi8qKlxuICogQ29udmVydCBIVE1MIHN0cmluZyB0byBBU1QuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICB3YXJuJDIgPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG5cbiAgcGxhdGZvcm1Jc1ByZVRhZyA9IG9wdGlvbnMuaXNQcmVUYWcgfHwgbm87XG4gIHBsYXRmb3JtTXVzdFVzZVByb3AgPSBvcHRpb25zLm11c3RVc2VQcm9wIHx8IG5vO1xuICBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSA9IG9wdGlvbnMuZ2V0VGFnTmFtZXNwYWNlIHx8IG5vO1xuICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgbWF5YmVDb21wb25lbnQgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICEhZWwuY29tcG9uZW50IHx8ICFpc1Jlc2VydmVkVGFnKGVsLnRhZyk7IH07XG5cbiAgdHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtTm9kZScpO1xuICBwcmVUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwcmVUcmFuc2Zvcm1Ob2RlJyk7XG4gIHBvc3RUcmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdwb3N0VHJhbnNmb3JtTm9kZScpO1xuXG4gIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnM7XG5cbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBwcmVzZXJ2ZVdoaXRlc3BhY2UgPSBvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSAhPT0gZmFsc2U7XG4gIHZhciB3aGl0ZXNwYWNlT3B0aW9uID0gb3B0aW9ucy53aGl0ZXNwYWNlO1xuICB2YXIgcm9vdDtcbiAgdmFyIGN1cnJlbnRQYXJlbnQ7XG4gIHZhciBpblZQcmUgPSBmYWxzZTtcbiAgdmFyIGluUHJlID0gZmFsc2U7XG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiB3YXJuT25jZSAobXNnLCByYW5nZSkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgd2FybiQyKG1zZywgcmFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlRWxlbWVudCAoZWxlbWVudCkge1xuICAgIHRyaW1FbmRpbmdXaGl0ZXNwYWNlKGVsZW1lbnQpO1xuICAgIGlmICghaW5WUHJlICYmICFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgZWxlbWVudCA9IHByb2Nlc3NFbGVtZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyB0cmVlIG1hbmFnZW1lbnRcbiAgICBpZiAoIXN0YWNrLmxlbmd0aCAmJiBlbGVtZW50ICE9PSByb290KSB7XG4gICAgICAvLyBhbGxvdyByb290IGVsZW1lbnRzIHdpdGggdi1pZiwgdi1lbHNlLWlmIGFuZCB2LWVsc2VcbiAgICAgIGlmIChyb290LmlmICYmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY2hlY2tSb290Q29uc3RyYWludHMoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSWZDb25kaXRpb24ocm9vdCwge1xuICAgICAgICAgIGV4cDogZWxlbWVudC5lbHNlaWYsXG4gICAgICAgICAgYmxvY2s6IGVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgXCJDb21wb25lbnQgdGVtcGxhdGUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiBcIiArXG4gICAgICAgICAgXCJJZiB5b3UgYXJlIHVzaW5nIHYtaWYgb24gbXVsdGlwbGUgZWxlbWVudHMsIFwiICtcbiAgICAgICAgICBcInVzZSB2LWVsc2UtaWYgdG8gY2hhaW4gdGhlbSBpbnN0ZWFkLlwiLFxuICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3VycmVudFBhcmVudCAmJiAhZWxlbWVudC5mb3JiaWRkZW4pIHtcbiAgICAgIGlmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpIHtcbiAgICAgICAgcHJvY2Vzc0lmQ29uZGl0aW9ucyhlbGVtZW50LCBjdXJyZW50UGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50LnNsb3RTY29wZSkge1xuICAgICAgICAgIC8vIHNjb3BlZCBzbG90XG4gICAgICAgICAgLy8ga2VlcCBpdCBpbiB0aGUgY2hpbGRyZW4gbGlzdCBzbyB0aGF0IHYtZWxzZSgtaWYpIGNvbmRpdGlvbnMgY2FuXG4gICAgICAgICAgLy8gZmluZCBpdCBhcyB0aGUgcHJldiBub2RlLlxuICAgICAgICAgIHZhciBuYW1lID0gZWxlbWVudC5zbG90VGFyZ2V0IHx8ICdcImRlZmF1bHRcIidcbiAgICAgICAgICA7KGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgfHwgKGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgPSB7fSkpW25hbWVdID0gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goZWxlbWVudCk7XG4gICAgICAgIGVsZW1lbnQucGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaW5hbCBjaGlsZHJlbiBjbGVhbnVwXG4gICAgLy8gZmlsdGVyIG91dCBzY29wZWQgc2xvdHNcbiAgICBlbGVtZW50LmNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuICEoYykuc2xvdFNjb3BlOyB9KTtcbiAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlIGFnYWluXG4gICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG5cbiAgICAvLyBjaGVjayBwcmUgc3RhdGVcbiAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgIGluVlByZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgIGluUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIC8vIGFwcGx5IHBvc3QtdHJhbnNmb3Jtc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zdFRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBvc3RUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaW1FbmRpbmdXaGl0ZXNwYWNlIChlbCkge1xuICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGVcbiAgICBpZiAoIWluUHJlKSB7XG4gICAgICB2YXIgbGFzdE5vZGU7XG4gICAgICB3aGlsZSAoXG4gICAgICAgIChsYXN0Tm9kZSA9IGVsLmNoaWxkcmVuW2VsLmNoaWxkcmVuLmxlbmd0aCAtIDFdKSAmJlxuICAgICAgICBsYXN0Tm9kZS50eXBlID09PSAzICYmXG4gICAgICAgIGxhc3ROb2RlLnRleHQgPT09ICcgJ1xuICAgICAgKSB7XG4gICAgICAgIGVsLmNoaWxkcmVuLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrUm9vdENvbnN0cmFpbnRzIChlbCkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90JyB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHdhcm5PbmNlKFxuICAgICAgICBcIkNhbm5vdCB1c2UgPFwiICsgKGVsLnRhZykgKyBcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIiArXG4gICAgICAgICdjb250YWluIG11bHRpcGxlIG5vZGVzLicsXG4gICAgICAgIHsgc3RhcnQ6IGVsLnN0YXJ0IH1cbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChlbC5hdHRyc01hcC5oYXNPd25Qcm9wZXJ0eSgndi1mb3InKSkge1xuICAgICAgd2Fybk9uY2UoXG4gICAgICAgICdDYW5ub3QgdXNlIHYtZm9yIG9uIHN0YXRlZnVsIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSAnICtcbiAgICAgICAgJ2l0IHJlbmRlcnMgbXVsdGlwbGUgZWxlbWVudHMuJyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcGFyc2VIVE1MKHRlbXBsYXRlLCB7XG4gICAgd2Fybjogd2FybiQyLFxuICAgIGV4cGVjdEhUTUw6IG9wdGlvbnMuZXhwZWN0SFRNTCxcbiAgICBpc1VuYXJ5VGFnOiBvcHRpb25zLmlzVW5hcnlUYWcsXG4gICAgY2FuQmVMZWZ0T3BlblRhZzogb3B0aW9ucy5jYW5CZUxlZnRPcGVuVGFnLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgIHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYsXG4gICAgc2hvdWxkS2VlcENvbW1lbnQ6IG9wdGlvbnMuY29tbWVudHMsXG4gICAgb3V0cHV0U291cmNlUmFuZ2U6IG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0ICh0YWcsIGF0dHJzLCB1bmFyeSwgc3RhcnQkMSwgZW5kKSB7XG4gICAgICAvLyBjaGVjayBuYW1lc3BhY2UuXG4gICAgICAvLyBpbmhlcml0IHBhcmVudCBucyBpZiB0aGVyZSBpcyBvbmVcbiAgICAgIHZhciBucyA9IChjdXJyZW50UGFyZW50ICYmIGN1cnJlbnRQYXJlbnQubnMpIHx8IHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlKHRhZyk7XG5cbiAgICAgIC8vIGhhbmRsZSBJRSBzdmcgYnVnXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc0lFICYmIG5zID09PSAnc3ZnJykge1xuICAgICAgICBhdHRycyA9IGd1YXJkSUVTVkdCdWcoYXR0cnMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudCA9IGNyZWF0ZUFTVEVsZW1lbnQodGFnLCBhdHRycywgY3VycmVudFBhcmVudCk7XG4gICAgICBpZiAobnMpIHtcbiAgICAgICAgZWxlbWVudC5ucyA9IG5zO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGVsZW1lbnQuc3RhcnQgPSBzdGFydCQxO1xuICAgICAgICAgIGVsZW1lbnQuZW5kID0gZW5kO1xuICAgICAgICAgIGVsZW1lbnQucmF3QXR0cnNNYXAgPSBlbGVtZW50LmF0dHJzTGlzdC5yZWR1Y2UoZnVuY3Rpb24gKGN1bXVsYXRlZCwgYXR0cikge1xuICAgICAgICAgICAgY3VtdWxhdGVkW2F0dHIubmFtZV0gPSBhdHRyO1xuICAgICAgICAgICAgcmV0dXJuIGN1bXVsYXRlZFxuICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgaWYgKGludmFsaWRBdHRyaWJ1dGVSRS50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJJbnZhbGlkIGR5bmFtaWMgYXJndW1lbnQgZXhwcmVzc2lvbjogYXR0cmlidXRlIG5hbWVzIGNhbm5vdCBjb250YWluIFwiICtcbiAgICAgICAgICAgICAgXCJzcGFjZXMsIHF1b3RlcywgPCwgPiwgLyBvciA9LlwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGF0dHIuc3RhcnQgKyBhdHRyLm5hbWUuaW5kZXhPZihcIltcIiksXG4gICAgICAgICAgICAgICAgZW5kOiBhdHRyLnN0YXJ0ICsgYXR0ci5uYW1lLmxlbmd0aFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0ZvcmJpZGRlblRhZyhlbGVtZW50KSAmJiAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSkge1xuICAgICAgICBlbGVtZW50LmZvcmJpZGRlbiA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiQyKFxuICAgICAgICAgICdUZW1wbGF0ZXMgc2hvdWxkIG9ubHkgYmUgcmVzcG9uc2libGUgZm9yIG1hcHBpbmcgdGhlIHN0YXRlIHRvIHRoZSAnICtcbiAgICAgICAgICAnVUkuIEF2b2lkIHBsYWNpbmcgdGFncyB3aXRoIHNpZGUtZWZmZWN0cyBpbiB5b3VyIHRlbXBsYXRlcywgc3VjaCBhcyAnICtcbiAgICAgICAgICBcIjxcIiArIHRhZyArIFwiPlwiICsgJywgYXMgdGhleSB3aWxsIG5vdCBiZSBwYXJzZWQuJyxcbiAgICAgICAgICB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0IH1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgcHJlLXRyYW5zZm9ybXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlVHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbGVtZW50ID0gcHJlVHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWluVlByZSkge1xuICAgICAgICBwcm9jZXNzUHJlKGVsZW1lbnQpO1xuICAgICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgICBpblZQcmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgICAgaW5QcmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGluVlByZSkge1xuICAgICAgICBwcm9jZXNzUmF3QXR0cnMoZWxlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKCFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgICAvLyBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZXNcbiAgICAgICAgcHJvY2Vzc0ZvcihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc0lmKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzT25jZShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJvb3QgPSBlbGVtZW50O1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKHJvb3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdW5hcnkpIHtcbiAgICAgICAgY3VycmVudFBhcmVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHN0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGVuZDogZnVuY3Rpb24gZW5kICh0YWcsIHN0YXJ0LCBlbmQkMSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIC8vIHBvcCBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoIC09IDE7XG4gICAgICBjdXJyZW50UGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgIGVsZW1lbnQuZW5kID0gZW5kJDE7XG4gICAgICB9XG4gICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgfSxcblxuICAgIGNoYXJzOiBmdW5jdGlvbiBjaGFycyAodGV4dCwgc3RhcnQsIGVuZCkge1xuICAgICAgaWYgKCFjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRleHQgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgJ0NvbXBvbmVudCB0ZW1wbGF0ZSByZXF1aXJlcyBhIHJvb3QgZWxlbWVudCwgcmF0aGVyIHRoYW4ganVzdCB0ZXh0LicsXG4gICAgICAgICAgICAgIHsgc3RhcnQ6IHN0YXJ0IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmICgodGV4dCA9IHRleHQudHJpbSgpKSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgIChcInRleHQgXFxcIlwiICsgdGV4dCArIFwiXFxcIiBvdXRzaWRlIHJvb3QgZWxlbWVudCB3aWxsIGJlIGlnbm9yZWQuXCIpLFxuICAgICAgICAgICAgICB7IHN0YXJ0OiBzdGFydCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LnRhZyA9PT0gJ3RleHRhcmVhJyAmJlxuICAgICAgICBjdXJyZW50UGFyZW50LmF0dHJzTWFwLnBsYWNlaG9sZGVyID09PSB0ZXh0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW4gPSBjdXJyZW50UGFyZW50LmNoaWxkcmVuO1xuICAgICAgaWYgKGluUHJlIHx8IHRleHQudHJpbSgpKSB7XG4gICAgICAgIHRleHQgPSBpc1RleHRUYWcoY3VycmVudFBhcmVudCkgPyB0ZXh0IDogZGVjb2RlSFRNTENhY2hlZCh0ZXh0KTtcbiAgICAgIH0gZWxzZSBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAvLyByZW1vdmUgdGhlIHdoaXRlc3BhY2Utb25seSBub2RlIHJpZ2h0IGFmdGVyIGFuIG9wZW5pbmcgdGFnXG4gICAgICAgIHRleHQgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAod2hpdGVzcGFjZU9wdGlvbikge1xuICAgICAgICBpZiAod2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgIC8vIGluIGNvbmRlbnNlIG1vZGUsIHJlbW92ZSB0aGUgd2hpdGVzcGFjZSBub2RlIGlmIGl0IGNvbnRhaW5zXG4gICAgICAgICAgLy8gbGluZSBicmVhaywgb3RoZXJ3aXNlIGNvbmRlbnNlIHRvIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgICAgdGV4dCA9IGxpbmVCcmVha1JFLnRlc3QodGV4dCkgPyAnJyA6ICcgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0ID0gJyAnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gcHJlc2VydmVXaGl0ZXNwYWNlID8gJyAnIDogJyc7XG4gICAgICB9XG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICBpZiAoIWluUHJlICYmIHdoaXRlc3BhY2VPcHRpb24gPT09ICdjb25kZW5zZScpIHtcbiAgICAgICAgICAvLyBjb25kZW5zZSBjb25zZWN1dGl2ZSB3aGl0ZXNwYWNlcyBpbnRvIHNpbmdsZSBzcGFjZVxuICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uod2hpdGVzcGFjZVJFJDEsICcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgdmFyIGNoaWxkO1xuICAgICAgICBpZiAoIWluVlByZSAmJiB0ZXh0ICE9PSAnICcgJiYgKHJlcyA9IHBhcnNlVGV4dCh0ZXh0LCBkZWxpbWl0ZXJzKSkpIHtcbiAgICAgICAgICBjaGlsZCA9IHtcbiAgICAgICAgICAgIHR5cGU6IDIsXG4gICAgICAgICAgICBleHByZXNzaW9uOiByZXMuZXhwcmVzc2lvbixcbiAgICAgICAgICAgIHRva2VuczogcmVzLnRva2VucyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHRleHQgIT09ICcgJyB8fCAhY2hpbGRyZW4ubGVuZ3RoIHx8IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnRleHQgIT09ICcgJykge1xuICAgICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICBjaGlsZC5lbmQgPSBlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb21tZW50OiBmdW5jdGlvbiBjb21tZW50ICh0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICAvLyBhZGRpbmcgYW55dGluZyBhcyBhIHNpYmxpbmcgdG8gdGhlIHJvb3Qgbm9kZSBpcyBmb3JiaWRkZW5cbiAgICAgIC8vIGNvbW1lbnRzIHNob3VsZCBzdGlsbCBiZSBhbGxvd2VkLCBidXQgaWdub3JlZFxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkID0ge1xuICAgICAgICAgIHR5cGU6IDMsXG4gICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICBpc0NvbW1lbnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgY2hpbGQuZW5kID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgaWYgKGxlbikge1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGxpc3RbaV0ubmFtZSxcbiAgICAgICAgdmFsdWU6IEpTT04uc3RyaW5naWZ5KGxpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgICAgaWYgKGxpc3RbaV0uc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGxpc3RbaV0uc3RhcnQ7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGxpc3RbaV0uZW5kO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRWxlbWVudCAoXG4gIGVsZW1lbnQsXG4gIG9wdGlvbnNcbikge1xuICBwcm9jZXNzS2V5KGVsZW1lbnQpO1xuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlc1xuICBlbGVtZW50LnBsYWluID0gKFxuICAgICFlbGVtZW50LmtleSAmJlxuICAgICFlbGVtZW50LnNjb3BlZFNsb3RzICYmXG4gICAgIWVsZW1lbnQuYXR0cnNMaXN0Lmxlbmd0aFxuICApO1xuXG4gIHByb2Nlc3NSZWYoZWxlbWVudCk7XG4gIHByb2Nlc3NTbG90Q29udGVudChlbGVtZW50KTtcbiAgcHJvY2Vzc1Nsb3RPdXRsZXQoZWxlbWVudCk7XG4gIHByb2Nlc3NDb21wb25lbnQoZWxlbWVudCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQgPSB0cmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gIH1cbiAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpO1xuICByZXR1cm4gZWxlbWVudFxufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgaWYgKGV4cCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIixcbiAgICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZWwuZm9yKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGVsLml0ZXJhdG9yMiB8fCBlbC5pdGVyYXRvcjE7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgICAgIGlmIChpdGVyYXRvciAmJiBpdGVyYXRvciA9PT0gZXhwICYmIHBhcmVudCAmJiBwYXJlbnQudGFnID09PSAndHJhbnNpdGlvbi1ncm91cCcpIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICBcIkRvIG5vdCB1c2Ugdi1mb3IgaW5kZXggYXMga2V5IG9uIDx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiwgXCIgK1xuICAgICAgICAgICAgXCJ0aGlzIGlzIHRoZSBzYW1lIGFzIG5vdCB1c2luZyBrZXlzLlwiLFxuICAgICAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKSxcbiAgICAgICAgICAgIHRydWUgLyogdGlwICovXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbC5rZXkgPSBleHA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1JlZiAoZWwpIHtcbiAgdmFyIHJlZiA9IGdldEJpbmRpbmdBdHRyKGVsLCAncmVmJyk7XG4gIGlmIChyZWYpIHtcbiAgICBlbC5yZWYgPSByZWY7XG4gICAgZWwucmVmSW5Gb3IgPSBjaGVja0luRm9yKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRm9yIChlbCkge1xuICB2YXIgZXhwO1xuICBpZiAoKGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWZvcicpKSkge1xuICAgIHZhciByZXMgPSBwYXJzZUZvcihleHApO1xuICAgIGlmIChyZXMpIHtcbiAgICAgIGV4dGVuZChlbCwgcmVzKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgKFwiSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiBcIiArIGV4cCksXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5cblxuZnVuY3Rpb24gcGFyc2VGb3IgKGV4cCkge1xuICB2YXIgaW5NYXRjaCA9IGV4cC5tYXRjaChmb3JBbGlhc1JFKTtcbiAgaWYgKCFpbk1hdGNoKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgcmVzLmZvciA9IGluTWF0Y2hbMl0udHJpbSgpO1xuICB2YXIgYWxpYXMgPSBpbk1hdGNoWzFdLnRyaW0oKS5yZXBsYWNlKHN0cmlwUGFyZW5zUkUsICcnKTtcbiAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICByZXMuYWxpYXMgPSBhbGlhcy5yZXBsYWNlKGZvckl0ZXJhdG9yUkUsICcnKS50cmltKCk7XG4gICAgcmVzLml0ZXJhdG9yMSA9IGl0ZXJhdG9yTWF0Y2hbMV0udHJpbSgpO1xuICAgIGlmIChpdGVyYXRvck1hdGNoWzJdKSB7XG4gICAgICByZXMuaXRlcmF0b3IyID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcy5hbGlhcyA9IGFsaWFzO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmIChlbCkge1xuICB2YXIgZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtaWYnKTtcbiAgaWYgKGV4cCkge1xuICAgIGVsLmlmID0gZXhwO1xuICAgIGFkZElmQ29uZGl0aW9uKGVsLCB7XG4gICAgICBleHA6IGV4cCxcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJykgIT0gbnVsbCkge1xuICAgICAgZWwuZWxzZSA9IHRydWU7XG4gICAgfVxuICAgIHZhciBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7XG4gICAgaWYgKGVsc2VpZikge1xuICAgICAgZWwuZWxzZWlmID0gZWxzZWlmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWZDb25kaXRpb25zIChlbCwgcGFyZW50KSB7XG4gIHZhciBwcmV2ID0gZmluZFByZXZFbGVtZW50KHBhcmVudC5jaGlsZHJlbik7XG4gIGlmIChwcmV2ICYmIHByZXYuaWYpIHtcbiAgICBhZGRJZkNvbmRpdGlvbihwcmV2LCB7XG4gICAgICBleHA6IGVsLmVsc2VpZixcbiAgICAgIGJsb2NrOiBlbFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuJDIoXG4gICAgICBcInYtXCIgKyAoZWwuZWxzZWlmID8gKCdlbHNlLWlmPVwiJyArIGVsLmVsc2VpZiArICdcIicpIDogJ2Vsc2UnKSArIFwiIFwiICtcbiAgICAgIFwidXNlZCBvbiBlbGVtZW50IDxcIiArIChlbC50YWcpICsgXCI+IHdpdGhvdXQgY29ycmVzcG9uZGluZyB2LWlmLlwiLFxuICAgICAgZWwucmF3QXR0cnNNYXBbZWwuZWxzZWlmID8gJ3YtZWxzZS1pZicgOiAndi1lbHNlJ11cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmV2RWxlbWVudCAoY2hpbGRyZW4pIHtcbiAgdmFyIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoY2hpbGRyZW5baV0udHlwZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgXCJ0ZXh0IFxcXCJcIiArIChjaGlsZHJlbltpXS50ZXh0LnRyaW0oKSkgKyBcIlxcXCIgYmV0d2VlbiB2LWlmIGFuZCB2LWVsc2UoLWlmKSBcIiArXG4gICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCIsXG4gICAgICAgICAgY2hpbGRyZW5baV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuLnBvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRJZkNvbmRpdGlvbiAoZWwsIGNvbmRpdGlvbikge1xuICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuICAgIGVsLmlmQ29uZGl0aW9ucyA9IFtdO1xuICB9XG4gIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NPbmNlIChlbCkge1xuICB2YXIgb25jZSQkMSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTtcbiAgaWYgKG9uY2UkJDEgIT0gbnVsbCkge1xuICAgIGVsLm9uY2UgPSB0cnVlO1xuICB9XG59XG5cbi8vIGhhbmRsZSBjb250ZW50IGJlaW5nIHBhc3NlZCB0byBhIGNvbXBvbmVudCBhcyBzbG90LFxuLy8gZS5nLiA8dGVtcGxhdGUgc2xvdD1cInh4eFwiPiwgPGRpdiBzbG90LXNjb3BlPVwieHh4XCI+XG5mdW5jdGlvbiBwcm9jZXNzU2xvdENvbnRlbnQgKGVsKSB7XG4gIHZhciBzbG90U2NvcGU7XG4gIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICBzbG90U2NvcGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2NvcGUnKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzbG90U2NvcGUpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJ0aGUgXFxcInNjb3BlXFxcIiBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBzbG90cyBoYXZlIGJlZW4gZGVwcmVjYXRlZCBhbmQgXCIgK1xuICAgICAgICBcInJlcGxhY2VkIGJ5IFxcXCJzbG90LXNjb3BlXFxcIiBzaW5jZSAyLjUuIFRoZSBuZXcgXFxcInNsb3Qtc2NvcGVcXFwiIGF0dHJpYnV0ZSBcIiArXG4gICAgICAgIFwiY2FuIGFsc28gYmUgdXNlZCBvbiBwbGFpbiBlbGVtZW50cyBpbiBhZGRpdGlvbiB0byA8dGVtcGxhdGU+IHRvIFwiICtcbiAgICAgICAgXCJkZW5vdGUgc2NvcGVkIHNsb3RzLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2NvcGUnXSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlIHx8IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJyk7XG4gIH0gZWxzZSBpZiAoKHNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJykpKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZWwuYXR0cnNNYXBbJ3YtZm9yJ10pIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJBbWJpZ3VvdXMgY29tYmluZWQgdXNhZ2Ugb2Ygc2xvdC1zY29wZSBhbmQgdi1mb3Igb24gPFwiICsgKGVsLnRhZykgKyBcIj4gXCIgK1xuICAgICAgICBcIih2LWZvciB0YWtlcyBoaWdoZXIgcHJpb3JpdHkpLiBVc2UgYSB3cmFwcGVyIDx0ZW1wbGF0ZT4gZm9yIHRoZSBcIiArXG4gICAgICAgIFwic2NvcGVkIHNsb3QgdG8gbWFrZSBpdCBjbGVhcmVyLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2xvdC1zY29wZSddLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgICBlbC5zbG90U2NvcGUgPSBzbG90U2NvcGU7XG4gIH1cblxuICAvLyBzbG90PVwieHh4XCJcbiAgdmFyIHNsb3RUYXJnZXQgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKTtcbiAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICBlbC5zbG90VGFyZ2V0ID0gc2xvdFRhcmdldCA9PT0gJ1wiXCInID8gJ1wiZGVmYXVsdFwiJyA6IHNsb3RUYXJnZXQ7XG4gICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSAhIShlbC5hdHRyc01hcFsnOnNsb3QnXSB8fCBlbC5hdHRyc01hcFsndi1iaW5kOnNsb3QnXSk7XG4gICAgLy8gcHJlc2VydmUgc2xvdCBhcyBhbiBhdHRyaWJ1dGUgZm9yIG5hdGl2ZSBzaGFkb3cgRE9NIGNvbXBhdFxuICAgIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHMuXG4gICAgaWYgKGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgICBhZGRBdHRyKGVsLCAnc2xvdCcsIHNsb3RUYXJnZXQsIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAnc2xvdCcpKTtcbiAgICB9XG4gIH1cblxuICAvLyAyLjYgdi1zbG90IHN5bnRheFxuICB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgLy8gdi1zbG90IG9uIDx0ZW1wbGF0ZT5cbiAgICAgIHZhciBzbG90QmluZGluZyA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGVsLnNsb3RUYXJnZXQgfHwgZWwuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy5cIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5wYXJlbnQgJiYgIW1heWJlQ29tcG9uZW50KGVsLnBhcmVudCkpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCI8dGVtcGxhdGUgdi1zbG90PiBjYW4gb25seSBhcHBlYXIgYXQgdGhlIHJvb3QgbGV2ZWwgaW5zaWRlIFwiICtcbiAgICAgICAgICAgICAgXCJ0aGUgcmVjZWl2aW5nIHRoZSBjb21wb25lbnRcIixcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciByZWYgPSBnZXRTbG90TmFtZShzbG90QmluZGluZyk7XG4gICAgICAgIHZhciBuYW1lID0gcmVmLm5hbWU7XG4gICAgICAgIHZhciBkeW5hbWljID0gcmVmLmR5bmFtaWM7XG4gICAgICAgIGVsLnNsb3RUYXJnZXQgPSBuYW1lO1xuICAgICAgICBlbC5zbG90VGFyZ2V0RHluYW1pYyA9IGR5bmFtaWM7XG4gICAgICAgIGVsLnNsb3RTY29wZSA9IHNsb3RCaW5kaW5nLnZhbHVlIHx8IGVtcHR5U2xvdFNjb3BlVG9rZW47IC8vIGZvcmNlIGl0IGludG8gYSBzY29wZWQgc2xvdCBmb3IgcGVyZlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB2LXNsb3Qgb24gY29tcG9uZW50LCBkZW5vdGVzIGRlZmF1bHQgc2xvdFxuICAgICAgdmFyIHNsb3RCaW5kaW5nJDEgPSBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleChlbCwgc2xvdFJFKTtcbiAgICAgIGlmIChzbG90QmluZGluZyQxKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFtYXliZUNvbXBvbmVudChlbCkpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJ2LXNsb3QgY2FuIG9ubHkgYmUgdXNlZCBvbiBjb21wb25lbnRzIG9yIDx0ZW1wbGF0ZT4uXCIsXG4gICAgICAgICAgICAgIHNsb3RCaW5kaW5nJDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5zbG90U2NvcGUgfHwgZWwuc2xvdFRhcmdldCkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIlVuZXhwZWN0ZWQgbWl4ZWQgdXNhZ2Ugb2YgZGlmZmVyZW50IHNsb3Qgc3ludGF4ZXMuXCIsXG4gICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJUbyBhdm9pZCBzY29wZSBhbWJpZ3VpdHksIHRoZSBkZWZhdWx0IHNsb3Qgc2hvdWxkIGFsc28gdXNlIFwiICtcbiAgICAgICAgICAgICAgXCI8dGVtcGxhdGU+IHN5bnRheCB3aGVuIHRoZXJlIGFyZSBvdGhlciBuYW1lZCBzbG90cy5cIixcbiAgICAgICAgICAgICAgc2xvdEJpbmRpbmckMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIHRoZSBjb21wb25lbnQncyBjaGlsZHJlbiB0byBpdHMgZGVmYXVsdCBzbG90XG4gICAgICAgIHZhciBzbG90cyA9IGVsLnNjb3BlZFNsb3RzIHx8IChlbC5zY29wZWRTbG90cyA9IHt9KTtcbiAgICAgICAgdmFyIHJlZiQxID0gZ2V0U2xvdE5hbWUoc2xvdEJpbmRpbmckMSk7XG4gICAgICAgIHZhciBuYW1lJDEgPSByZWYkMS5uYW1lO1xuICAgICAgICB2YXIgZHluYW1pYyQxID0gcmVmJDEuZHluYW1pYztcbiAgICAgICAgdmFyIHNsb3RDb250YWluZXIgPSBzbG90c1tuYW1lJDFdID0gY3JlYXRlQVNURWxlbWVudCgndGVtcGxhdGUnLCBbXSwgZWwpO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RUYXJnZXQgPSBuYW1lJDE7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljJDE7XG4gICAgICAgIHNsb3RDb250YWluZXIuY2hpbGRyZW4gPSBlbC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICBpZiAoIWMuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICBjLnBhcmVudCA9IHNsb3RDb250YWluZXI7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmckMS52YWx1ZSB8fCBlbXB0eVNsb3RTY29wZVRva2VuO1xuICAgICAgICAvLyByZW1vdmUgY2hpbGRyZW4gYXMgdGhleSBhcmUgcmV0dXJuZWQgZnJvbSBzY29wZWRTbG90cyBub3dcbiAgICAgICAgZWwuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgLy8gbWFyayBlbCBub24tcGxhaW4gc28gZGF0YSBnZXRzIGdlbmVyYXRlZFxuICAgICAgICBlbC5wbGFpbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTbG90TmFtZSAoYmluZGluZykge1xuICB2YXIgbmFtZSA9IGJpbmRpbmcubmFtZS5yZXBsYWNlKHNsb3RSRSwgJycpO1xuICBpZiAoIW5hbWUpIHtcbiAgICBpZiAoYmluZGluZy5uYW1lWzBdICE9PSAnIycpIHtcbiAgICAgIG5hbWUgPSAnZGVmYXVsdCc7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwidi1zbG90IHNob3J0aGFuZCBzeW50YXggcmVxdWlyZXMgYSBzbG90IG5hbWUuXCIsXG4gICAgICAgIGJpbmRpbmdcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkeW5hbWljQXJnUkUudGVzdChuYW1lKVxuICAgIC8vIGR5bmFtaWMgW25hbWVdXG4gICAgPyB7IG5hbWU6IG5hbWUuc2xpY2UoMSwgLTEpLCBkeW5hbWljOiB0cnVlIH1cbiAgICAvLyBzdGF0aWMgbmFtZVxuICAgIDogeyBuYW1lOiAoXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiXCIpLCBkeW5hbWljOiBmYWxzZSB9XG59XG5cbi8vIGhhbmRsZSA8c2xvdC8+IG91dGxldHNcbmZ1bmN0aW9uIHByb2Nlc3NTbG90T3V0bGV0IChlbCkge1xuICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICBlbC5zbG90TmFtZSA9IGdldEJpbmRpbmdBdHRyKGVsLCAnbmFtZScpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGVsLmtleSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBcImBrZXlgIGRvZXMgbm90IHdvcmsgb24gPHNsb3Q+IGJlY2F1c2Ugc2xvdHMgYXJlIGFic3RyYWN0IG91dGxldHMgXCIgK1xuICAgICAgICBcImFuZCBjYW4gcG9zc2libHkgZXhwYW5kIGludG8gbXVsdGlwbGUgZWxlbWVudHMuIFwiICtcbiAgICAgICAgXCJVc2UgdGhlIGtleSBvbiBhIHdyYXBwaW5nIGVsZW1lbnQgaW5zdGVhZC5cIixcbiAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0NvbXBvbmVudCAoZWwpIHtcbiAgdmFyIGJpbmRpbmc7XG4gIGlmICgoYmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnaXMnKSkpIHtcbiAgICBlbC5jb21wb25lbnQgPSBiaW5kaW5nO1xuICB9XG4gIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAnaW5saW5lLXRlbXBsYXRlJykgIT0gbnVsbCkge1xuICAgIGVsLmlubGluZVRlbXBsYXRlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQXR0cnMgKGVsKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICB2YXIgaSwgbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIG1vZGlmaWVycywgc3luY0dlbiwgaXNEeW5hbWljO1xuICBmb3IgKGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBuYW1lID0gcmF3TmFtZSA9IGxpc3RbaV0ubmFtZTtcbiAgICB2YWx1ZSA9IGxpc3RbaV0udmFsdWU7XG4gICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgIC8vIG1hcmsgZWxlbWVudCBhcyBkeW5hbWljXG4gICAgICBlbC5oYXNCaW5kaW5ncyA9IHRydWU7XG4gICAgICAvLyBtb2RpZmllcnNcbiAgICAgIG1vZGlmaWVycyA9IHBhcnNlTW9kaWZpZXJzKG5hbWUucmVwbGFjZShkaXJSRSwgJycpKTtcbiAgICAgIC8vIHN1cHBvcnQgLmZvbyBzaG9ydGhhbmQgc3ludGF4IGZvciB0aGUgLnByb3AgbW9kaWZpZXJcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShtb2RpZmllclJFLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYmluZFJFLCAnJyk7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGaWx0ZXJzKHZhbHVlKTtcbiAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICB2YWx1ZS50cmltKCkubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgIChcIlRoZSB2YWx1ZSBmb3IgYSB2LWJpbmQgZXhwcmVzc2lvbiBjYW5ub3QgYmUgZW1wdHkuIEZvdW5kIGluIFxcXCJ2LWJpbmQ6XCIgKyBuYW1lICsgXCJcXFwiXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5wcm9wICYmICFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaW5uZXJIdG1sJykgeyBuYW1lID0gJ2lubmVySFRNTCc7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5jYW1lbCAmJiAhaXNEeW5hbWljKSB7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuc3luYykge1xuICAgICAgICAgICAgc3luY0dlbiA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBcIiRldmVudFwiKTtcbiAgICAgICAgICAgIGlmICghaXNEeW5hbWljKSB7XG4gICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGNhbWVsaXplKG5hbWUpKSksXG4gICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChoeXBoZW5hdGUobmFtZSkgIT09IGNhbWVsaXplKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGh5cGhlbmF0ZShuYW1lKSkpLFxuICAgICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBoYW5kbGVyIHcvIGR5bmFtaWMgZXZlbnQgbmFtZVxuICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgIChcIlxcXCJ1cGRhdGU6XFxcIisoXCIgKyBuYW1lICsgXCIpXCIpLFxuICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YXJuJDIsXG4gICAgICAgICAgICAgICAgbGlzdFtpXSxcbiAgICAgICAgICAgICAgICB0cnVlIC8vIGR5bmFtaWNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLnByb3ApIHx8IChcbiAgICAgICAgICAhZWwuY29tcG9uZW50ICYmIHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKVxuICAgICAgICApKSB7XG4gICAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQXR0cihlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb25cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJFLCAnJyk7XG4gICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpO1xuICAgICAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIGFkZEhhbmRsZXIoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMsIGZhbHNlLCB3YXJuJDIsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICB9IGVsc2UgeyAvLyBub3JtYWwgZGlyZWN0aXZlc1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGRpclJFLCAnJyk7XG4gICAgICAgIC8vIHBhcnNlIGFyZ1xuICAgICAgICB2YXIgYXJnTWF0Y2ggPSBuYW1lLm1hdGNoKGFyZ1JFKTtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ01hdGNoICYmIGFyZ01hdGNoWzFdO1xuICAgICAgICBpc0R5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcbiAgICAgICAgICBpZiAoZHluYW1pY0FyZ1JFLnRlc3QoYXJnKSkge1xuICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgIGlzRHluYW1pYyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFkZERpcmVjdGl2ZShlbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIGFyZywgaXNEeW5hbWljLCBtb2RpZmllcnMsIGxpc3RbaV0pO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lID09PSAnbW9kZWwnKSB7XG4gICAgICAgICAgY2hlY2tGb3JBbGlhc01vZGVsKGVsLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbGl0ZXJhbCBhdHRyaWJ1dGVcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciByZXMgPSBwYXJzZVRleHQodmFsdWUsIGRlbGltaXRlcnMpO1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgbmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBpZD1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmlkPVwidmFsXCI+LicsXG4gICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWRkQXR0cihlbCwgbmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpLCBsaXN0W2ldKTtcbiAgICAgIC8vICM2ODg3IGZpcmVmb3ggZG9lc24ndCB1cGRhdGUgbXV0ZWQgc3RhdGUgaWYgc2V0IHZpYSBhdHRyaWJ1dGVcbiAgICAgIC8vIGV2ZW4gaW1tZWRpYXRlbHkgYWZ0ZXIgZWxlbWVudCBjcmVhdGlvblxuICAgICAgaWYgKCFlbC5jb21wb25lbnQgJiZcbiAgICAgICAgICBuYW1lID09PSAnbXV0ZWQnICYmXG4gICAgICAgICAgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpKSB7XG4gICAgICAgIGFkZFByb3AoZWwsIG5hbWUsICd0cnVlJywgbGlzdFtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW5Gb3IgKGVsKSB7XG4gIHZhciBwYXJlbnQgPSBlbDtcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuZm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9kaWZpZXJzIChuYW1lKSB7XG4gIHZhciBtYXRjaCA9IG5hbWUubWF0Y2gobW9kaWZpZXJSRSk7XG4gIGlmIChtYXRjaCkge1xuICAgIHZhciByZXQgPSB7fTtcbiAgICBtYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldFttLnNsaWNlKDEpXSA9IHRydWU7IH0pO1xuICAgIHJldHVybiByZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlQXR0cnNNYXAgKGF0dHJzKSB7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtYXBbYXR0cnNbaV0ubmFtZV0gJiYgIWlzSUUgJiYgIWlzRWRnZVxuICAgICkge1xuICAgICAgd2FybiQyKCdkdXBsaWNhdGUgYXR0cmlidXRlOiAnICsgYXR0cnNbaV0ubmFtZSwgYXR0cnNbaV0pO1xuICAgIH1cbiAgICBtYXBbYXR0cnNbaV0ubmFtZV0gPSBhdHRyc1tpXS52YWx1ZTtcbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbi8vIGZvciBzY3JpcHQgKGUuZy4gdHlwZT1cIngvdGVtcGxhdGVcIikgb3Igc3R5bGUsIGRvIG5vdCBkZWNvZGUgY29udGVudFxuZnVuY3Rpb24gaXNUZXh0VGFnIChlbCkge1xuICByZXR1cm4gZWwudGFnID09PSAnc2NyaXB0JyB8fCBlbC50YWcgPT09ICdzdHlsZSdcbn1cblxuZnVuY3Rpb24gaXNGb3JiaWRkZW5UYWcgKGVsKSB7XG4gIHJldHVybiAoXG4gICAgZWwudGFnID09PSAnc3R5bGUnIHx8XG4gICAgKGVsLnRhZyA9PT0gJ3NjcmlwdCcgJiYgKFxuICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHxcbiAgICAgIGVsLmF0dHJzTWFwLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgKSlcbiAgKVxufVxuXG52YXIgaWVOU0J1ZyA9IC9eeG1sbnM6TlNcXGQrLztcbnZhciBpZU5TUHJlZml4ID0gL15OU1xcZCs6LztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGd1YXJkSUVTVkdCdWcgKGF0dHJzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhdHRyID0gYXR0cnNbaV07XG4gICAgaWYgKCFpZU5TQnVnLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgYXR0ci5uYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UoaWVOU1ByZWZpeCwgJycpO1xuICAgICAgcmVzLnB1c2goYXR0cik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JBbGlhc01vZGVsIChlbCwgdmFsdWUpIHtcbiAgdmFyIF9lbCA9IGVsO1xuICB3aGlsZSAoX2VsKSB7XG4gICAgaWYgKF9lbC5mb3IgJiYgX2VsLmFsaWFzID09PSB2YWx1ZSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcbiAgICAgICAgXCJZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gXCIgK1xuICAgICAgICBcIlRoaXMgd2lsbCBub3QgYmUgYWJsZSB0byBtb2RpZnkgdGhlIHYtZm9yIHNvdXJjZSBhcnJheSBiZWNhdXNlIFwiICtcbiAgICAgICAgXCJ3cml0aW5nIHRvIHRoZSBhbGlhcyBpcyBsaWtlIG1vZGlmeWluZyBhIGZ1bmN0aW9uIGxvY2FsIHZhcmlhYmxlLiBcIiArXG4gICAgICAgIFwiQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICAgICk7XG4gICAgfVxuICAgIF9lbCA9IF9lbC5wYXJlbnQ7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHByZVRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gIGlmIChlbC50YWcgPT09ICdpbnB1dCcpIHtcbiAgICB2YXIgbWFwID0gZWwuYXR0cnNNYXA7XG4gICAgaWYgKCFtYXBbJ3YtbW9kZWwnXSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHR5cGVCaW5kaW5nO1xuICAgIGlmIChtYXBbJzp0eXBlJ10gfHwgbWFwWyd2LWJpbmQ6dHlwZSddKSB7XG4gICAgICB0eXBlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndHlwZScpO1xuICAgIH1cbiAgICBpZiAoIW1hcC50eXBlICYmICF0eXBlQmluZGluZyAmJiBtYXBbJ3YtYmluZCddKSB7XG4gICAgICB0eXBlQmluZGluZyA9IFwiKFwiICsgKG1hcFsndi1iaW5kJ10pICsgXCIpLnR5cGVcIjtcbiAgICB9XG5cbiAgICBpZiAodHlwZUJpbmRpbmcpIHtcbiAgICAgIHZhciBpZkNvbmRpdGlvbiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJywgdHJ1ZSk7XG4gICAgICB2YXIgaWZDb25kaXRpb25FeHRyYSA9IGlmQ29uZGl0aW9uID8gKFwiJiYoXCIgKyBpZkNvbmRpdGlvbiArIFwiKVwiKSA6IFwiXCI7XG4gICAgICB2YXIgaGFzRWxzZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UnLCB0cnVlKSAhPSBudWxsO1xuICAgICAgdmFyIGVsc2VJZkNvbmRpdGlvbiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UtaWYnLCB0cnVlKTtcbiAgICAgIC8vIDEuIGNoZWNrYm94XG4gICAgICB2YXIgYnJhbmNoMCA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICAvLyBwcm9jZXNzIGZvciBvbiB0aGUgbWFpbiBub2RlXG4gICAgICBwcm9jZXNzRm9yKGJyYW5jaDApO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gwLCAndHlwZScsICdjaGVja2JveCcpO1xuICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMCwgb3B0aW9ucyk7XG4gICAgICBicmFuY2gwLnByb2Nlc3NlZCA9IHRydWU7IC8vIHByZXZlbnQgaXQgZnJvbSBkb3VibGUtcHJvY2Vzc2VkXG4gICAgICBicmFuY2gwLmlmID0gXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdjaGVja2JveCdcIiArIGlmQ29uZGl0aW9uRXh0cmE7XG4gICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgIGV4cDogYnJhbmNoMC5pZixcbiAgICAgICAgYmxvY2s6IGJyYW5jaDBcbiAgICAgIH0pO1xuICAgICAgLy8gMi4gYWRkIHJhZGlvIGVsc2UtaWYgY29uZGl0aW9uXG4gICAgICB2YXIgYnJhbmNoMSA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDEsICd2LWZvcicsIHRydWUpO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gxLCAndHlwZScsICdyYWRpbycpO1xuICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMSwgb3B0aW9ucyk7XG4gICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgIGV4cDogXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdyYWRpbydcIiArIGlmQ29uZGl0aW9uRXh0cmEsXG4gICAgICAgIGJsb2NrOiBicmFuY2gxXG4gICAgICB9KTtcbiAgICAgIC8vIDMuIG90aGVyXG4gICAgICB2YXIgYnJhbmNoMiA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDIsICd2LWZvcicsIHRydWUpO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gyLCAnOnR5cGUnLCB0eXBlQmluZGluZyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gyLCBvcHRpb25zKTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBpZkNvbmRpdGlvbixcbiAgICAgICAgYmxvY2s6IGJyYW5jaDJcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaGFzRWxzZSkge1xuICAgICAgICBicmFuY2gwLmVsc2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChlbHNlSWZDb25kaXRpb24pIHtcbiAgICAgICAgYnJhbmNoMC5lbHNlaWYgPSBlbHNlSWZDb25kaXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicmFuY2gwXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQVNURWxlbWVudCAoZWwpIHtcbiAgcmV0dXJuIGNyZWF0ZUFTVEVsZW1lbnQoZWwudGFnLCBlbC5hdHRyc0xpc3Quc2xpY2UoKSwgZWwucGFyZW50KVxufVxuXG52YXIgbW9kZWwkMSA9IHtcbiAgcHJlVHJhbnNmb3JtTm9kZTogcHJlVHJhbnNmb3JtTm9kZVxufTtcblxudmFyIG1vZHVsZXMkMSA9IFtcbiAga2xhc3MkMSxcbiAgc3R5bGUkMSxcbiAgbW9kZWwkMVxuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHRleHQgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICd0ZXh0Q29udGVudCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIiksIGRpcik7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGh0bWwgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICdpbm5lckhUTUwnLCAoXCJfcyhcIiArIChkaXIudmFsdWUpICsgXCIpXCIpLCBkaXIpO1xuICB9XG59XG5cbnZhciBkaXJlY3RpdmVzJDEgPSB7XG4gIG1vZGVsOiBtb2RlbCxcbiAgdGV4dDogdGV4dCxcbiAgaHRtbDogaHRtbFxufTtcblxuLyogICovXG5cbnZhciBiYXNlT3B0aW9ucyA9IHtcbiAgZXhwZWN0SFRNTDogdHJ1ZSxcbiAgbW9kdWxlczogbW9kdWxlcyQxLFxuICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzJDEsXG4gIGlzUHJlVGFnOiBpc1ByZVRhZyxcbiAgaXNVbmFyeVRhZzogaXNVbmFyeVRhZyxcbiAgbXVzdFVzZVByb3A6IG11c3RVc2VQcm9wLFxuICBjYW5CZUxlZnRPcGVuVGFnOiBjYW5CZUxlZnRPcGVuVGFnLFxuICBpc1Jlc2VydmVkVGFnOiBpc1Jlc2VydmVkVGFnLFxuICBnZXRUYWdOYW1lc3BhY2U6IGdldFRhZ05hbWVzcGFjZSxcbiAgc3RhdGljS2V5czogZ2VuU3RhdGljS2V5cyhtb2R1bGVzJDEpXG59O1xuXG4vKiAgKi9cblxudmFyIGlzU3RhdGljS2V5O1xudmFyIGlzUGxhdGZvcm1SZXNlcnZlZFRhZztcblxudmFyIGdlblN0YXRpY0tleXNDYWNoZWQgPSBjYWNoZWQoZ2VuU3RhdGljS2V5cyQxKTtcblxuLyoqXG4gKiBHb2FsIG9mIHRoZSBvcHRpbWl6ZXI6IHdhbGsgdGhlIGdlbmVyYXRlZCB0ZW1wbGF0ZSBBU1QgdHJlZVxuICogYW5kIGRldGVjdCBzdWItdHJlZXMgdGhhdCBhcmUgcHVyZWx5IHN0YXRpYywgaS5lLiBwYXJ0cyBvZlxuICogdGhlIERPTSB0aGF0IG5ldmVyIG5lZWRzIHRvIGNoYW5nZS5cbiAqXG4gKiBPbmNlIHdlIGRldGVjdCB0aGVzZSBzdWItdHJlZXMsIHdlIGNhbjpcbiAqXG4gKiAxLiBIb2lzdCB0aGVtIGludG8gY29uc3RhbnRzLCBzbyB0aGF0IHdlIG5vIGxvbmdlciBuZWVkIHRvXG4gKiAgICBjcmVhdGUgZnJlc2ggbm9kZXMgZm9yIHRoZW0gb24gZWFjaCByZS1yZW5kZXI7XG4gKiAyLiBDb21wbGV0ZWx5IHNraXAgdGhlbSBpbiB0aGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAqL1xuZnVuY3Rpb24gb3B0aW1pemUgKHJvb3QsIG9wdGlvbnMpIHtcbiAgaWYgKCFyb290KSB7IHJldHVybiB9XG4gIGlzU3RhdGljS2V5ID0gZ2VuU3RhdGljS2V5c0NhY2hlZChvcHRpb25zLnN0YXRpY0tleXMgfHwgJycpO1xuICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIC8vIGZpcnN0IHBhc3M6IG1hcmsgYWxsIG5vbi1zdGF0aWMgbm9kZXMuXG4gIG1hcmtTdGF0aWMkMShyb290KTtcbiAgLy8gc2Vjb25kIHBhc3M6IG1hcmsgc3RhdGljIHJvb3RzLlxuICBtYXJrU3RhdGljUm9vdHMocm9vdCwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzJDEgKGtleXMpIHtcbiAgcmV0dXJuIG1ha2VNYXAoXG4gICAgJ3R5cGUsdGFnLGF0dHJzTGlzdCxhdHRyc01hcCxwbGFpbixwYXJlbnQsY2hpbGRyZW4sYXR0cnMsc3RhcnQsZW5kLHJhd0F0dHJzTWFwJyArXG4gICAgKGtleXMgPyAnLCcgKyBrZXlzIDogJycpXG4gIClcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyQxIChub2RlKSB7XG4gIG5vZGUuc3RhdGljID0gaXNTdGF0aWMobm9kZSk7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICAvLyBkbyBub3QgbWFrZSBjb21wb25lbnQgc2xvdCBjb250ZW50IHN0YXRpYy4gdGhpcyBhdm9pZHNcbiAgICAvLyAxLiBjb21wb25lbnRzIG5vdCBhYmxlIHRvIG11dGF0ZSBzbG90IG5vZGVzXG4gICAgLy8gMi4gc3RhdGljIHNsb3QgY29udGVudCBmYWlscyBmb3IgaG90LXJlbG9hZGluZ1xuICAgIGlmIChcbiAgICAgICFpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmXG4gICAgICBub2RlLnRhZyAhPT0gJ3Nsb3QnICYmXG4gICAgICBub2RlLmF0dHJzTWFwWydpbmxpbmUtdGVtcGxhdGUnXSA9PSBudWxsXG4gICAgKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIG1hcmtTdGF0aWMkMShjaGlsZCk7XG4gICAgICBpZiAoIWNoaWxkLnN0YXRpYykge1xuICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykge1xuICAgICAgICB2YXIgYmxvY2sgPSBub2RlLmlmQ29uZGl0aW9uc1tpJDFdLmJsb2NrO1xuICAgICAgICBtYXJrU3RhdGljJDEoYmxvY2spO1xuICAgICAgICBpZiAoIWJsb2NrLnN0YXRpYykge1xuICAgICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY1Jvb3RzIChub2RlLCBpc0luRm9yKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBpZiAobm9kZS5zdGF0aWMgfHwgbm9kZS5vbmNlKSB7XG4gICAgICBub2RlLnN0YXRpY0luRm9yID0gaXNJbkZvcjtcbiAgICB9XG4gICAgLy8gRm9yIGEgbm9kZSB0byBxdWFsaWZ5IGFzIGEgc3RhdGljIHJvb3QsIGl0IHNob3VsZCBoYXZlIGNoaWxkcmVuIHRoYXRcbiAgICAvLyBhcmUgbm90IGp1c3Qgc3RhdGljIHRleHQuIE90aGVyd2lzZSB0aGUgY29zdCBvZiBob2lzdGluZyBvdXQgd2lsbFxuICAgIC8vIG91dHdlaWdoIHRoZSBiZW5lZml0cyBhbmQgaXQncyBiZXR0ZXIgb2ZmIHRvIGp1c3QgYWx3YXlzIHJlbmRlciBpdCBmcmVzaC5cbiAgICBpZiAobm9kZS5zdGF0aWMgJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggJiYgIShcbiAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXG4gICAgICBub2RlLmNoaWxkcmVuWzBdLnR5cGUgPT09IDNcbiAgICApKSB7XG4gICAgICBub2RlLnN0YXRpY1Jvb3QgPSB0cnVlO1xuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5jaGlsZHJlbltpXSwgaXNJbkZvciB8fCAhIW5vZGUuZm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAxLCBsJDEgPSBub2RlLmlmQ29uZGl0aW9ucy5sZW5ndGg7IGkkMSA8IGwkMTsgaSQxKyspIHtcbiAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuaWZDb25kaXRpb25zW2kkMV0uYmxvY2ssIGlzSW5Gb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N0YXRpYyAobm9kZSkge1xuICBpZiAobm9kZS50eXBlID09PSAyKSB7IC8vIGV4cHJlc3Npb25cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAobm9kZS50eXBlID09PSAzKSB7IC8vIHRleHRcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiAhIShub2RlLnByZSB8fCAoXG4gICAgIW5vZGUuaGFzQmluZGluZ3MgJiYgLy8gbm8gZHluYW1pYyBiaW5kaW5nc1xuICAgICFub2RlLmlmICYmICFub2RlLmZvciAmJiAvLyBub3Qgdi1pZiBvciB2LWZvciBvciB2LWVsc2VcbiAgICAhaXNCdWlsdEluVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBidWlsdC1pblxuICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgY29tcG9uZW50XG4gICAgIWlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yKG5vZGUpICYmXG4gICAgT2JqZWN0LmtleXMobm9kZSkuZXZlcnkoaXNTdGF0aWNLZXkpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIChub2RlKSB7XG4gIHdoaWxlIChub2RlLnBhcmVudCkge1xuICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICBpZiAobm9kZS50YWcgIT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAobm9kZS5mb3IpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxudmFyIGZuRXhwUkUgPSAvXihbXFx3JF9dK3xcXChbXildKj9cXCkpXFxzKj0+fF5mdW5jdGlvblxccyooPzpbXFx3JF0rKT9cXHMqXFwoLztcbnZhciBmbkludm9rZVJFID0gL1xcKFteKV0qP1xcKTsqJC87XG52YXIgc2ltcGxlUGF0aFJFID0gL15bQS1aYS16XyRdW1xcdyRdKig/OlxcLltBLVphLXpfJF1bXFx3JF0qfFxcWydbXiddKj8nXXxcXFtcIlteXCJdKj9cIl18XFxbXFxkK118XFxbW0EtWmEtel8kXVtcXHckXSpdKSokLztcblxuLy8gS2V5Ym9hcmRFdmVudC5rZXlDb2RlIGFsaWFzZXNcbnZhciBrZXlDb2RlcyA9IHtcbiAgZXNjOiAyNyxcbiAgdGFiOiA5LFxuICBlbnRlcjogMTMsXG4gIHNwYWNlOiAzMixcbiAgdXA6IDM4LFxuICBsZWZ0OiAzNyxcbiAgcmlnaHQ6IDM5LFxuICBkb3duOiA0MCxcbiAgJ2RlbGV0ZSc6IFs4LCA0Nl1cbn07XG5cbi8vIEtleWJvYXJkRXZlbnQua2V5IGFsaWFzZXNcbnZhciBrZXlOYW1lcyA9IHtcbiAgLy8gIzc4ODA6IElFMTEgYW5kIEVkZ2UgdXNlIGBFc2NgIGZvciBFc2NhcGUga2V5IG5hbWUuXG4gIGVzYzogWydFc2MnLCAnRXNjYXBlJ10sXG4gIHRhYjogJ1RhYicsXG4gIGVudGVyOiAnRW50ZXInLFxuICAvLyAjOTExMjogSUUxMSB1c2VzIGBTcGFjZWJhcmAgZm9yIFNwYWNlIGtleSBuYW1lLlxuICBzcGFjZTogWycgJywgJ1NwYWNlYmFyJ10sXG4gIC8vICM3ODA2OiBJRTExIHVzZXMga2V5IG5hbWVzIHdpdGhvdXQgYEFycm93YCBwcmVmaXggZm9yIGFycm93IGtleXMuXG4gIHVwOiBbJ1VwJywgJ0Fycm93VXAnXSxcbiAgbGVmdDogWydMZWZ0JywgJ0Fycm93TGVmdCddLFxuICByaWdodDogWydSaWdodCcsICdBcnJvd1JpZ2h0J10sXG4gIGRvd246IFsnRG93bicsICdBcnJvd0Rvd24nXSxcbiAgLy8gIzkxMTI6IElFMTEgdXNlcyBgRGVsYCBmb3IgRGVsZXRlIGtleSBuYW1lLlxuICAnZGVsZXRlJzogWydCYWNrc3BhY2UnLCAnRGVsZXRlJywgJ0RlbCddXG59O1xuXG4vLyAjNDg2ODogbW9kaWZpZXJzIHRoYXQgcHJldmVudCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBsaXN0ZW5lclxuLy8gbmVlZCB0byBleHBsaWNpdGx5IHJldHVybiBudWxsIHNvIHRoYXQgd2UgY2FuIGRldGVybWluZSB3aGV0aGVyIHRvIHJlbW92ZVxuLy8gdGhlIGxpc3RlbmVyIGZvciAub25jZVxudmFyIGdlbkd1YXJkID0gZnVuY3Rpb24gKGNvbmRpdGlvbikgeyByZXR1cm4gKFwiaWYoXCIgKyBjb25kaXRpb24gKyBcIilyZXR1cm4gbnVsbDtcIik7IH07XG5cbnZhciBtb2RpZmllckNvZGUgPSB7XG4gIHN0b3A6ICckZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7JyxcbiAgcHJldmVudDogJyRldmVudC5wcmV2ZW50RGVmYXVsdCgpOycsXG4gIHNlbGY6IGdlbkd1YXJkKFwiJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXRcIiksXG4gIGN0cmw6IGdlbkd1YXJkKFwiISRldmVudC5jdHJsS2V5XCIpLFxuICBzaGlmdDogZ2VuR3VhcmQoXCIhJGV2ZW50LnNoaWZ0S2V5XCIpLFxuICBhbHQ6IGdlbkd1YXJkKFwiISRldmVudC5hbHRLZXlcIiksXG4gIG1ldGE6IGdlbkd1YXJkKFwiISRldmVudC5tZXRhS2V5XCIpLFxuICBsZWZ0OiBnZW5HdWFyZChcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAwXCIpLFxuICBtaWRkbGU6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDFcIiksXG4gIHJpZ2h0OiBnZW5HdWFyZChcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAyXCIpXG59O1xuXG5mdW5jdGlvbiBnZW5IYW5kbGVycyAoXG4gIGV2ZW50cyxcbiAgaXNOYXRpdmVcbikge1xuICB2YXIgcHJlZml4ID0gaXNOYXRpdmUgPyAnbmF0aXZlT246JyA6ICdvbjonO1xuICB2YXIgc3RhdGljSGFuZGxlcnMgPSBcIlwiO1xuICB2YXIgZHluYW1pY0hhbmRsZXJzID0gXCJcIjtcbiAgZm9yICh2YXIgbmFtZSBpbiBldmVudHMpIHtcbiAgICB2YXIgaGFuZGxlckNvZGUgPSBnZW5IYW5kbGVyKGV2ZW50c1tuYW1lXSk7XG4gICAgaWYgKGV2ZW50c1tuYW1lXSAmJiBldmVudHNbbmFtZV0uZHluYW1pYykge1xuICAgICAgZHluYW1pY0hhbmRsZXJzICs9IG5hbWUgKyBcIixcIiArIGhhbmRsZXJDb2RlICsgXCIsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRpY0hhbmRsZXJzICs9IFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIjpcIiArIGhhbmRsZXJDb2RlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIHN0YXRpY0hhbmRsZXJzID0gXCJ7XCIgKyAoc3RhdGljSGFuZGxlcnMuc2xpY2UoMCwgLTEpKSArIFwifVwiO1xuICBpZiAoZHluYW1pY0hhbmRsZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCArIFwiX2QoXCIgKyBzdGF0aWNIYW5kbGVycyArIFwiLFtcIiArIChkeW5hbWljSGFuZGxlcnMuc2xpY2UoMCwgLTEpKSArIFwiXSlcIlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmVmaXggKyBzdGF0aWNIYW5kbGVyc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXIgKGhhbmRsZXIpIHtcbiAgaWYgKCFoYW5kbGVyKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbigpe30nXG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgIHJldHVybiAoXCJbXCIgKyAoaGFuZGxlci5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGdlbkhhbmRsZXIoaGFuZGxlcik7IH0pLmpvaW4oJywnKSkgKyBcIl1cIilcbiAgfVxuXG4gIHZhciBpc01ldGhvZFBhdGggPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlKTtcbiAgdmFyIGlzRnVuY3Rpb25FeHByZXNzaW9uID0gZm5FeHBSRS50ZXN0KGhhbmRsZXIudmFsdWUpO1xuICB2YXIgaXNGdW5jdGlvbkludm9jYXRpb24gPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlLnJlcGxhY2UoZm5JbnZva2VSRSwgJycpKTtcblxuICBpZiAoIWhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgaWYgKGlzTWV0aG9kUGF0aCB8fCBpc0Z1bmN0aW9uRXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIGhhbmRsZXIudmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyAoaXNGdW5jdGlvbkludm9jYXRpb24gPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpIDogaGFuZGxlci52YWx1ZSkgKyBcIn1cIikgLy8gaW5saW5lIHN0YXRlbWVudFxuICB9IGVsc2Uge1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgdmFyIGdlbk1vZGlmaWVyQ29kZSA9ICcnO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIGhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgICBpZiAobW9kaWZpZXJDb2RlW2tleV0pIHtcbiAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IG1vZGlmaWVyQ29kZVtrZXldO1xuICAgICAgICAvLyBsZWZ0L3JpZ2h0XG4gICAgICAgIGlmIChrZXlDb2Rlc1trZXldKSB7XG4gICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZXhhY3QnKSB7XG4gICAgICAgIHZhciBtb2RpZmllcnMgPSAoaGFuZGxlci5tb2RpZmllcnMpO1xuICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gZ2VuR3VhcmQoXG4gICAgICAgICAgWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ11cbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleU1vZGlmaWVyKSB7IHJldHVybiAhbW9kaWZpZXJzW2tleU1vZGlmaWVyXTsgfSlcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleU1vZGlmaWVyKSB7IHJldHVybiAoXCIkZXZlbnQuXCIgKyBrZXlNb2RpZmllciArIFwiS2V5XCIpOyB9KVxuICAgICAgICAgICAgLmpvaW4oJ3x8JylcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgIGNvZGUgKz0gZ2VuS2V5RmlsdGVyKGtleXMpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgbW9kaWZpZXJzIGxpa2UgcHJldmVudCBhbmQgc3RvcCBnZXQgZXhlY3V0ZWQgYWZ0ZXIga2V5IGZpbHRlcmluZ1xuICAgIGlmIChnZW5Nb2RpZmllckNvZGUpIHtcbiAgICAgIGNvZGUgKz0gZ2VuTW9kaWZpZXJDb2RlO1xuICAgIH1cbiAgICB2YXIgaGFuZGxlckNvZGUgPSBpc01ldGhvZFBhdGhcbiAgICAgID8gKFwicmV0dXJuIFwiICsgKGhhbmRsZXIudmFsdWUpICsgXCIoJGV2ZW50KVwiKVxuICAgICAgOiBpc0Z1bmN0aW9uRXhwcmVzc2lvblxuICAgICAgICA/IChcInJldHVybiAoXCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIikoJGV2ZW50KVwiKVxuICAgICAgICA6IGlzRnVuY3Rpb25JbnZvY2F0aW9uXG4gICAgICAgICAgPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpXG4gICAgICAgICAgOiBoYW5kbGVyLnZhbHVlO1xuICAgIHJldHVybiAoXCJmdW5jdGlvbigkZXZlbnQpe1wiICsgY29kZSArIGhhbmRsZXJDb2RlICsgXCJ9XCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuS2V5RmlsdGVyIChrZXlzKSB7XG4gIHJldHVybiAoXG4gICAgLy8gbWFrZSBzdXJlIHRoZSBrZXkgZmlsdGVycyBvbmx5IGFwcGx5IHRvIEtleWJvYXJkRXZlbnRzXG4gICAgLy8gIzk0NDE6IGNhbid0IHVzZSAna2V5Q29kZScgaW4gJGV2ZW50IGJlY2F1c2UgQ2hyb21lIGF1dG9maWxsIGZpcmVzIGZha2VcbiAgICAvLyBrZXkgZXZlbnRzIHRoYXQgZG8gbm90IGhhdmUga2V5Q29kZSBwcm9wZXJ0eS4uLlxuICAgIFwiaWYoISRldmVudC50eXBlLmluZGV4T2YoJ2tleScpJiZcIiArXG4gICAgKGtleXMubWFwKGdlbkZpbHRlckNvZGUpLmpvaW4oJyYmJykpICsgXCIpcmV0dXJuIG51bGw7XCJcbiAgKVxufVxuXG5mdW5jdGlvbiBnZW5GaWx0ZXJDb2RlIChrZXkpIHtcbiAgdmFyIGtleVZhbCA9IHBhcnNlSW50KGtleSwgMTApO1xuICBpZiAoa2V5VmFsKSB7XG4gICAgcmV0dXJuIChcIiRldmVudC5rZXlDb2RlIT09XCIgKyBrZXlWYWwpXG4gIH1cbiAgdmFyIGtleUNvZGUgPSBrZXlDb2Rlc1trZXldO1xuICB2YXIga2V5TmFtZSA9IGtleU5hbWVzW2tleV07XG4gIHJldHVybiAoXG4gICAgXCJfaygkZXZlbnQua2V5Q29kZSxcIiArXG4gICAgKEpTT04uc3RyaW5naWZ5KGtleSkpICsgXCIsXCIgK1xuICAgIChKU09OLnN0cmluZ2lmeShrZXlDb2RlKSkgKyBcIixcIiArXG4gICAgXCIkZXZlbnQua2V5LFwiICtcbiAgICBcIlwiICsgKEpTT04uc3RyaW5naWZ5KGtleU5hbWUpKSArXG4gICAgXCIpXCJcbiAgKVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gb24gKGVsLCBkaXIpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGlyLm1vZGlmaWVycykge1xuICAgIHdhcm4oXCJ2LW9uIHdpdGhvdXQgYXJndW1lbnQgZG9lcyBub3Qgc3VwcG9ydCBtb2RpZmllcnMuXCIpO1xuICB9XG4gIGVsLndyYXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKFwiX2coXCIgKyBjb2RlICsgXCIsXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKTsgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmQkMSAoZWwsIGRpcikge1xuICBlbC53cmFwRGF0YSA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgcmV0dXJuIChcIl9iKFwiICsgY29kZSArIFwiLCdcIiArIChlbC50YWcpICsgXCInLFwiICsgKGRpci52YWx1ZSkgKyBcIixcIiArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMucHJvcCA/ICd0cnVlJyA6ICdmYWxzZScpICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5zeW5jID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGJhc2VEaXJlY3RpdmVzID0ge1xuICBvbjogb24sXG4gIGJpbmQ6IGJpbmQkMSxcbiAgY2xvYWs6IG5vb3Bcbn07XG5cbi8qICAqL1xuXG5cblxuXG5cbnZhciBDb2RlZ2VuU3RhdGUgPSBmdW5jdGlvbiBDb2RlZ2VuU3RhdGUgKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy53YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICB0aGlzLnRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3RyYW5zZm9ybUNvZGUnKTtcbiAgdGhpcy5kYXRhR2VuRm5zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICdnZW5EYXRhJyk7XG4gIHRoaXMuZGlyZWN0aXZlcyA9IGV4dGVuZChleHRlbmQoe30sIGJhc2VEaXJlY3RpdmVzKSwgb3B0aW9ucy5kaXJlY3RpdmVzKTtcbiAgdmFyIGlzUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIHRoaXMubWF5YmVDb21wb25lbnQgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICEhZWwuY29tcG9uZW50IHx8ICFpc1Jlc2VydmVkVGFnKGVsLnRhZyk7IH07XG4gIHRoaXMub25jZUlkID0gMDtcbiAgdGhpcy5zdGF0aWNSZW5kZXJGbnMgPSBbXTtcbiAgdGhpcy5wcmUgPSBmYWxzZTtcbn07XG5cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZSAoXG4gIGFzdCxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBzdGF0ZSA9IG5ldyBDb2RlZ2VuU3RhdGUob3B0aW9ucyk7XG4gIHZhciBjb2RlID0gYXN0ID8gZ2VuRWxlbWVudChhc3QsIHN0YXRlKSA6ICdfYyhcImRpdlwiKSc7XG4gIHJldHVybiB7XG4gICAgcmVuZGVyOiAoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIGNvZGUgKyBcIn1cIiksXG4gICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5FbGVtZW50IChlbCwgc3RhdGUpIHtcbiAgaWYgKGVsLnBhcmVudCkge1xuICAgIGVsLnByZSA9IGVsLnByZSB8fCBlbC5wYXJlbnQucHJlO1xuICB9XG5cbiAgaWYgKGVsLnN0YXRpY1Jvb3QgJiYgIWVsLnN0YXRpY1Byb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5TdGF0aWMoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLm9uY2UgJiYgIWVsLm9uY2VQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuT25jZShlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuRm9yKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFRhcmdldCAmJiAhc3RhdGUucHJlKSB7XG4gICAgcmV0dXJuIGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3ZvaWQgMCdcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIHJldHVybiBnZW5TbG90KGVsLCBzdGF0ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyBjb21wb25lbnQgb3IgZWxlbWVudFxuICAgIHZhciBjb2RlO1xuICAgIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICAgIGNvZGUgPSBnZW5Db21wb25lbnQoZWwuY29tcG9uZW50LCBlbCwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGF0YTtcbiAgICAgIGlmICghZWwucGxhaW4gfHwgKGVsLnByZSAmJiBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCkpKSB7XG4gICAgICAgIGRhdGEgPSBnZW5EYXRhJDIoZWwsIHN0YXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlLCB0cnVlKTtcbiAgICAgIGNvZGUgPSBcIl9jKCdcIiArIChlbC50YWcpICsgXCInXCIgKyAoZGF0YSA/IChcIixcIiArIGRhdGEpIDogJycpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCI7XG4gICAgfVxuICAgIC8vIG1vZHVsZSB0cmFuc2Zvcm1zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS50cmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb2RlID0gc3RhdGUudHJhbnNmb3Jtc1tpXShlbCwgY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBjb2RlXG4gIH1cbn1cblxuLy8gaG9pc3Qgc3RhdGljIHN1Yi10cmVlcyBvdXRcbmZ1bmN0aW9uIGdlblN0YXRpYyAoZWwsIHN0YXRlKSB7XG4gIGVsLnN0YXRpY1Byb2Nlc3NlZCA9IHRydWU7XG4gIC8vIFNvbWUgZWxlbWVudHMgKHRlbXBsYXRlcykgbmVlZCB0byBiZWhhdmUgZGlmZmVyZW50bHkgaW5zaWRlIG9mIGEgdi1wcmVcbiAgLy8gbm9kZS4gIEFsbCBwcmUgbm9kZXMgYXJlIHN0YXRpYyByb290cywgc28gd2UgY2FuIHVzZSB0aGlzIGFzIGEgbG9jYXRpb24gdG9cbiAgLy8gd3JhcCBhIHN0YXRlIGNoYW5nZSBhbmQgcmVzZXQgaXQgdXBvbiBleGl0aW5nIHRoZSBwcmUgbm9kZS5cbiAgdmFyIG9yaWdpbmFsUHJlU3RhdGUgPSBzdGF0ZS5wcmU7XG4gIGlmIChlbC5wcmUpIHtcbiAgICBzdGF0ZS5wcmUgPSBlbC5wcmU7XG4gIH1cbiAgc3RhdGUuc3RhdGljUmVuZGVyRm5zLnB1c2goKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyAoZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwifVwiKSk7XG4gIHN0YXRlLnByZSA9IG9yaWdpbmFsUHJlU3RhdGU7XG4gIHJldHVybiAoXCJfbShcIiArIChzdGF0ZS5zdGF0aWNSZW5kZXJGbnMubGVuZ3RoIC0gMSkgKyAoZWwuc3RhdGljSW5Gb3IgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG59XG5cbi8vIHYtb25jZVxuZnVuY3Rpb24gZ2VuT25jZSAoZWwsIHN0YXRlKSB7XG4gIGVsLm9uY2VQcm9jZXNzZWQgPSB0cnVlO1xuICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5zdGF0aWNJbkZvcikge1xuICAgIHZhciBrZXkgPSAnJztcbiAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuZm9yKSB7XG4gICAgICAgIGtleSA9IHBhcmVudC5rZXk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgICBpZiAoIWtleSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdGF0ZS53YXJuKFxuICAgICAgICBcInYtb25jZSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSB2LWZvciB0aGF0IGlzIGtleWVkLiBcIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Ytb25jZSddXG4gICAgICApO1xuICAgICAgcmV0dXJuIGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICAgIH1cbiAgICByZXR1cm4gKFwiX28oXCIgKyAoZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwiLFwiICsgKHN0YXRlLm9uY2VJZCsrKSArIFwiLFwiICsga2V5ICsgXCIpXCIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSWYgKFxuICBlbCxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0RW1wdHlcbikge1xuICBlbC5pZlByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gZ2VuSWZDb25kaXRpb25zKGVsLmlmQ29uZGl0aW9ucy5zbGljZSgpLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSlcbn1cblxuZnVuY3Rpb24gZ2VuSWZDb25kaXRpb25zIChcbiAgY29uZGl0aW9ucyxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0RW1wdHlcbikge1xuICBpZiAoIWNvbmRpdGlvbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsdEVtcHR5IHx8ICdfZSgpJ1xuICB9XG5cbiAgdmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbnMuc2hpZnQoKTtcbiAgaWYgKGNvbmRpdGlvbi5leHApIHtcbiAgICByZXR1cm4gKFwiKFwiICsgKGNvbmRpdGlvbi5leHApICsgXCIpP1wiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkgKyBcIjpcIiArIChnZW5JZkNvbmRpdGlvbnMoY29uZGl0aW9ucywgc3RhdGUsIGFsdEdlbiwgYWx0RW1wdHkpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSlcbiAgfVxuXG4gIC8vIHYtaWYgd2l0aCB2LW9uY2Ugc2hvdWxkIGdlbmVyYXRlIGNvZGUgbGlrZSAoYSk/X20oMCk6X20oMSlcbiAgZnVuY3Rpb24gZ2VuVGVybmFyeUV4cCAoZWwpIHtcbiAgICByZXR1cm4gYWx0R2VuXG4gICAgICA/IGFsdEdlbihlbCwgc3RhdGUpXG4gICAgICA6IGVsLm9uY2VcbiAgICAgICAgPyBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5Gb3IgKFxuICBlbCxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0SGVscGVyXG4pIHtcbiAgdmFyIGV4cCA9IGVsLmZvcjtcbiAgdmFyIGFsaWFzID0gZWwuYWxpYXM7XG4gIHZhciBpdGVyYXRvcjEgPSBlbC5pdGVyYXRvcjEgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IxKSkgOiAnJztcbiAgdmFyIGl0ZXJhdG9yMiA9IGVsLml0ZXJhdG9yMiA/IChcIixcIiArIChlbC5pdGVyYXRvcjIpKSA6ICcnO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgc3RhdGUubWF5YmVDb21wb25lbnQoZWwpICYmXG4gICAgZWwudGFnICE9PSAnc2xvdCcgJiZcbiAgICBlbC50YWcgIT09ICd0ZW1wbGF0ZScgJiZcbiAgICAhZWwua2V5XG4gICkge1xuICAgIHN0YXRlLndhcm4oXG4gICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1mb3I9XFxcIlwiICsgYWxpYXMgKyBcIiBpbiBcIiArIGV4cCArIFwiXFxcIj46IGNvbXBvbmVudCBsaXN0cyByZW5kZXJlZCB3aXRoIFwiICtcbiAgICAgIFwidi1mb3Igc2hvdWxkIGhhdmUgZXhwbGljaXQga2V5cy4gXCIgK1xuICAgICAgXCJTZWUgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvbGlzdC5odG1sI2tleSBmb3IgbW9yZSBpbmZvLlwiLFxuICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ10sXG4gICAgICB0cnVlIC8qIHRpcCAqL1xuICAgICk7XG4gIH1cblxuICBlbC5mb3JQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIChhbHRIZWxwZXIgfHwgJ19sJykgKyBcIigoXCIgKyBleHAgKyBcIiksXCIgK1xuICAgIFwiZnVuY3Rpb24oXCIgKyBhbGlhcyArIGl0ZXJhdG9yMSArIGl0ZXJhdG9yMiArIFwiKXtcIiArXG4gICAgICBcInJldHVybiBcIiArICgoYWx0R2VuIHx8IGdlbkVsZW1lbnQpKGVsLCBzdGF0ZSkpICtcbiAgICAnfSknXG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMiAoZWwsIHN0YXRlKSB7XG4gIHZhciBkYXRhID0gJ3snO1xuXG4gIC8vIGRpcmVjdGl2ZXMgZmlyc3QuXG4gIC8vIGRpcmVjdGl2ZXMgbWF5IG11dGF0ZSB0aGUgZWwncyBvdGhlciBwcm9wZXJ0aWVzIGJlZm9yZSB0aGV5IGFyZSBnZW5lcmF0ZWQuXG4gIHZhciBkaXJzID0gZ2VuRGlyZWN0aXZlcyhlbCwgc3RhdGUpO1xuICBpZiAoZGlycykgeyBkYXRhICs9IGRpcnMgKyAnLCc7IH1cblxuICAvLyBrZXlcbiAgaWYgKGVsLmtleSkge1xuICAgIGRhdGEgKz0gXCJrZXk6XCIgKyAoZWwua2V5KSArIFwiLFwiO1xuICB9XG4gIC8vIHJlZlxuICBpZiAoZWwucmVmKSB7XG4gICAgZGF0YSArPSBcInJlZjpcIiArIChlbC5yZWYpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnJlZkluRm9yKSB7XG4gICAgZGF0YSArPSBcInJlZkluRm9yOnRydWUsXCI7XG4gIH1cbiAgLy8gcHJlXG4gIGlmIChlbC5wcmUpIHtcbiAgICBkYXRhICs9IFwicHJlOnRydWUsXCI7XG4gIH1cbiAgLy8gcmVjb3JkIG9yaWdpbmFsIHRhZyBuYW1lIGZvciBjb21wb25lbnRzIHVzaW5nIFwiaXNcIiBhdHRyaWJ1dGVcbiAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgIGRhdGEgKz0gXCJ0YWc6XFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCI7XG4gIH1cbiAgLy8gbW9kdWxlIGRhdGEgZ2VuZXJhdGlvbiBmdW5jdGlvbnNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5kYXRhR2VuRm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgZGF0YSArPSBzdGF0ZS5kYXRhR2VuRm5zW2ldKGVsKTtcbiAgfVxuICAvLyBhdHRyaWJ1dGVzXG4gIGlmIChlbC5hdHRycykge1xuICAgIGRhdGEgKz0gXCJhdHRyczpcIiArIChnZW5Qcm9wcyhlbC5hdHRycykpICsgXCIsXCI7XG4gIH1cbiAgLy8gRE9NIHByb3BzXG4gIGlmIChlbC5wcm9wcykge1xuICAgIGRhdGEgKz0gXCJkb21Qcm9wczpcIiArIChnZW5Qcm9wcyhlbC5wcm9wcykpICsgXCIsXCI7XG4gIH1cbiAgLy8gZXZlbnQgaGFuZGxlcnNcbiAgaWYgKGVsLmV2ZW50cykge1xuICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLmV2ZW50cywgZmFsc2UpKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5uYXRpdmVFdmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5uYXRpdmVFdmVudHMsIHRydWUpKSArIFwiLFwiO1xuICB9XG4gIC8vIHNsb3QgdGFyZ2V0XG4gIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHNcbiAgaWYgKGVsLnNsb3RUYXJnZXQgJiYgIWVsLnNsb3RTY29wZSkge1xuICAgIGRhdGEgKz0gXCJzbG90OlwiICsgKGVsLnNsb3RUYXJnZXQpICsgXCIsXCI7XG4gIH1cbiAgLy8gc2NvcGVkIHNsb3RzXG4gIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgIGRhdGEgKz0gKGdlblNjb3BlZFNsb3RzKGVsLCBlbC5zY29wZWRTbG90cywgc3RhdGUpKSArIFwiLFwiO1xuICB9XG4gIC8vIGNvbXBvbmVudCB2LW1vZGVsXG4gIGlmIChlbC5tb2RlbCkge1xuICAgIGRhdGEgKz0gXCJtb2RlbDp7dmFsdWU6XCIgKyAoZWwubW9kZWwudmFsdWUpICsgXCIsY2FsbGJhY2s6XCIgKyAoZWwubW9kZWwuY2FsbGJhY2spICsgXCIsZXhwcmVzc2lvbjpcIiArIChlbC5tb2RlbC5leHByZXNzaW9uKSArIFwifSxcIjtcbiAgfVxuICAvLyBpbmxpbmUtdGVtcGxhdGVcbiAgaWYgKGVsLmlubGluZVRlbXBsYXRlKSB7XG4gICAgdmFyIGlubGluZVRlbXBsYXRlID0gZ2VuSW5saW5lVGVtcGxhdGUoZWwsIHN0YXRlKTtcbiAgICBpZiAoaW5saW5lVGVtcGxhdGUpIHtcbiAgICAgIGRhdGEgKz0gaW5saW5lVGVtcGxhdGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgZGF0YSA9IGRhdGEucmVwbGFjZSgvLCQvLCAnJykgKyAnfSc7XG4gIC8vIHYtYmluZCBkeW5hbWljIGFyZ3VtZW50IHdyYXBcbiAgLy8gdi1iaW5kIHdpdGggZHluYW1pYyBhcmd1bWVudHMgbXVzdCBiZSBhcHBsaWVkIHVzaW5nIHRoZSBzYW1lIHYtYmluZCBvYmplY3RcbiAgLy8gbWVyZ2UgaGVscGVyIHNvIHRoYXQgY2xhc3Mvc3R5bGUvbXVzdFVzZVByb3AgYXR0cnMgYXJlIGhhbmRsZWQgY29ycmVjdGx5LlxuICBpZiAoZWwuZHluYW1pY0F0dHJzKSB7XG4gICAgZGF0YSA9IFwiX2IoXCIgKyBkYXRhICsgXCIsXFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCIgKyAoZ2VuUHJvcHMoZWwuZHluYW1pY0F0dHJzKSkgKyBcIilcIjtcbiAgfVxuICAvLyB2LWJpbmQgZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwRGF0YSkge1xuICAgIGRhdGEgPSBlbC53cmFwRGF0YShkYXRhKTtcbiAgfVxuICAvLyB2LW9uIGRhdGEgd3JhcFxuICBpZiAoZWwud3JhcExpc3RlbmVycykge1xuICAgIGRhdGEgPSBlbC53cmFwTGlzdGVuZXJzKGRhdGEpO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIGdlbkRpcmVjdGl2ZXMgKGVsLCBzdGF0ZSkge1xuICB2YXIgZGlycyA9IGVsLmRpcmVjdGl2ZXM7XG4gIGlmICghZGlycykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0gJ2RpcmVjdGl2ZXM6Wyc7XG4gIHZhciBoYXNSdW50aW1lID0gZmFsc2U7XG4gIHZhciBpLCBsLCBkaXIsIG5lZWRSdW50aW1lO1xuICBmb3IgKGkgPSAwLCBsID0gZGlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIG5lZWRSdW50aW1lID0gdHJ1ZTtcbiAgICB2YXIgZ2VuID0gc3RhdGUuZGlyZWN0aXZlc1tkaXIubmFtZV07XG4gICAgaWYgKGdlbikge1xuICAgICAgLy8gY29tcGlsZS10aW1lIGRpcmVjdGl2ZSB0aGF0IG1hbmlwdWxhdGVzIEFTVC5cbiAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiBpdCBhbHNvIG5lZWRzIGEgcnVudGltZSBjb3VudGVycGFydC5cbiAgICAgIG5lZWRSdW50aW1lID0gISFnZW4oZWwsIGRpciwgc3RhdGUud2Fybik7XG4gICAgfVxuICAgIGlmIChuZWVkUnVudGltZSkge1xuICAgICAgaGFzUnVudGltZSA9IHRydWU7XG4gICAgICByZXMgKz0gXCJ7bmFtZTpcXFwiXCIgKyAoZGlyLm5hbWUpICsgXCJcXFwiLHJhd05hbWU6XFxcIlwiICsgKGRpci5yYXdOYW1lKSArIFwiXFxcIlwiICsgKGRpci52YWx1ZSA/IChcIix2YWx1ZTooXCIgKyAoZGlyLnZhbHVlKSArIFwiKSxleHByZXNzaW9uOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci52YWx1ZSkpKSA6ICcnKSArIChkaXIuYXJnID8gKFwiLGFyZzpcIiArIChkaXIuaXNEeW5hbWljQXJnID8gZGlyLmFyZyA6IChcIlxcXCJcIiArIChkaXIuYXJnKSArIFwiXFxcIlwiKSkpIDogJycpICsgKGRpci5tb2RpZmllcnMgPyAoXCIsbW9kaWZpZXJzOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci5tb2RpZmllcnMpKSkgOiAnJykgKyBcIn0sXCI7XG4gICAgfVxuICB9XG4gIGlmIChoYXNSdW50aW1lKSB7XG4gICAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSkgKyAnXSdcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JbmxpbmVUZW1wbGF0ZSAoZWwsIHN0YXRlKSB7XG4gIHZhciBhc3QgPSBlbC5jaGlsZHJlblswXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKFxuICAgIGVsLmNoaWxkcmVuLmxlbmd0aCAhPT0gMSB8fCBhc3QudHlwZSAhPT0gMVxuICApKSB7XG4gICAgc3RhdGUud2FybihcbiAgICAgICdJbmxpbmUtdGVtcGxhdGUgY29tcG9uZW50cyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgY2hpbGQgZWxlbWVudC4nLFxuICAgICAgeyBzdGFydDogZWwuc3RhcnQgfVxuICAgICk7XG4gIH1cbiAgaWYgKGFzdCAmJiBhc3QudHlwZSA9PT0gMSkge1xuICAgIHZhciBpbmxpbmVSZW5kZXJGbnMgPSBnZW5lcmF0ZShhc3QsIHN0YXRlLm9wdGlvbnMpO1xuICAgIHJldHVybiAoXCJpbmxpbmVUZW1wbGF0ZTp7cmVuZGVyOmZ1bmN0aW9uKCl7XCIgKyAoaW5saW5lUmVuZGVyRm5zLnJlbmRlcikgKyBcIn0sc3RhdGljUmVuZGVyRm5zOltcIiArIChpbmxpbmVSZW5kZXJGbnMuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKFwiZnVuY3Rpb24oKXtcIiArIGNvZGUgKyBcIn1cIik7IH0pLmpvaW4oJywnKSkgKyBcIl19XCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdHMgKFxuICBlbCxcbiAgc2xvdHMsXG4gIHN0YXRlXG4pIHtcbiAgLy8gYnkgZGVmYXVsdCBzY29wZWQgc2xvdHMgYXJlIGNvbnNpZGVyZWQgXCJzdGFibGVcIiwgdGhpcyBhbGxvd3MgY2hpbGRcbiAgLy8gY29tcG9uZW50cyB3aXRoIG9ubHkgc2NvcGVkIHNsb3RzIHRvIHNraXAgZm9yY2VkIHVwZGF0ZXMgZnJvbSBwYXJlbnQuXG4gIC8vIGJ1dCBpbiBzb21lIGNhc2VzIHdlIGhhdmUgdG8gYmFpbC1vdXQgb2YgdGhpcyBvcHRpbWl6YXRpb25cbiAgLy8gZm9yIGV4YW1wbGUgaWYgdGhlIHNsb3QgY29udGFpbnMgZHluYW1pYyBuYW1lcywgaGFzIHYtaWYgb3Igdi1mb3Igb24gdGhlbS4uLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9IGVsLmZvciB8fCBPYmplY3Qua2V5cyhzbG90cykuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHNsb3QgPSBzbG90c1trZXldO1xuICAgIHJldHVybiAoXG4gICAgICBzbG90LnNsb3RUYXJnZXREeW5hbWljIHx8XG4gICAgICBzbG90LmlmIHx8XG4gICAgICBzbG90LmZvciB8fFxuICAgICAgY29udGFpbnNTbG90Q2hpbGQoc2xvdCkgLy8gaXMgcGFzc2luZyBkb3duIHNsb3QgZnJvbSBwYXJlbnQgd2hpY2ggbWF5IGJlIGR5bmFtaWNcbiAgICApXG4gIH0pO1xuXG4gIC8vICM5NTM0OiBpZiBhIGNvbXBvbmVudCB3aXRoIHNjb3BlZCBzbG90cyBpcyBpbnNpZGUgYSBjb25kaXRpb25hbCBicmFuY2gsXG4gIC8vIGl0J3MgcG9zc2libGUgZm9yIHRoZSBzYW1lIGNvbXBvbmVudCB0byBiZSByZXVzZWQgYnV0IHdpdGggZGlmZmVyZW50XG4gIC8vIGNvbXBpbGVkIHNsb3QgY29udGVudC4gVG8gYXZvaWQgdGhhdCwgd2UgZ2VuZXJhdGUgYSB1bmlxdWUga2V5IGJhc2VkIG9uXG4gIC8vIHRoZSBnZW5lcmF0ZWQgY29kZSBvZiBhbGwgdGhlIHNsb3QgY29udGVudHMuXG4gIHZhciBuZWVkc0tleSA9ICEhZWwuaWY7XG5cbiAgLy8gT1Igd2hlbiBpdCBpcyBpbnNpZGUgYW5vdGhlciBzY29wZWQgc2xvdCBvciB2LWZvciAodGhlIHJlYWN0aXZpdHkgbWF5IGJlXG4gIC8vIGRpc2Nvbm5lY3RlZCBkdWUgdG8gdGhlIGludGVybWVkaWF0ZSBzY29wZSB2YXJpYWJsZSlcbiAgLy8gIzk0MzgsICM5NTA2XG4gIC8vIFRPRE86IHRoaXMgY2FuIGJlIGZ1cnRoZXIgb3B0aW1pemVkIGJ5IHByb3Blcmx5IGFuYWx5emluZyBpbi1zY29wZSBiaW5kaW5nc1xuICAvLyBhbmQgc2tpcCBmb3JjZSB1cGRhdGluZyBvbmVzIHRoYXQgZG8gbm90IGFjdHVhbGx5IHVzZSBzY29wZSB2YXJpYWJsZXMuXG4gIGlmICghbmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKFxuICAgICAgICAocGFyZW50LnNsb3RTY29wZSAmJiBwYXJlbnQuc2xvdFNjb3BlICE9PSBlbXB0eVNsb3RTY29wZVRva2VuKSB8fFxuICAgICAgICBwYXJlbnQuZm9yXG4gICAgICApIHtcbiAgICAgICAgbmVlZHNGb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpZiAocGFyZW50LmlmKSB7XG4gICAgICAgIG5lZWRzS2V5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGdlbmVyYXRlZFNsb3RzID0gT2JqZWN0LmtleXMoc2xvdHMpXG4gICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBnZW5TY29wZWRTbG90KHNsb3RzW2tleV0sIHN0YXRlKTsgfSlcbiAgICAuam9pbignLCcpO1xuXG4gIHJldHVybiAoXCJzY29wZWRTbG90czpfdShbXCIgKyBnZW5lcmF0ZWRTbG90cyArIFwiXVwiICsgKG5lZWRzRm9yY2VVcGRhdGUgPyBcIixudWxsLHRydWVcIiA6IFwiXCIpICsgKCFuZWVkc0ZvcmNlVXBkYXRlICYmIG5lZWRzS2V5ID8gKFwiLG51bGwsZmFsc2UsXCIgKyAoaGFzaChnZW5lcmF0ZWRTbG90cykpKSA6IFwiXCIpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gIHZhciBoYXNoID0gNTM4MTtcbiAgdmFyIGkgPSBzdHIubGVuZ3RoO1xuICB3aGlsZShpKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuICByZXR1cm4gaGFzaCA+Pj4gMFxufVxuXG5mdW5jdGlvbiBjb250YWluc1Nsb3RDaGlsZCAoZWwpIHtcbiAgaWYgKGVsLnR5cGUgPT09IDEpIHtcbiAgICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBlbC5jaGlsZHJlbi5zb21lKGNvbnRhaW5zU2xvdENoaWxkKVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90IChcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgdmFyIGlzTGVnYWN5U3ludGF4ID0gZWwuYXR0cnNNYXBbJ3Nsb3Qtc2NvcGUnXTtcbiAgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCAmJiAhaXNMZWdhY3lTeW50YXgpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlLCBnZW5TY29wZWRTbG90LCBcIm51bGxcIilcbiAgfVxuICBpZiAoZWwuZm9yICYmICFlbC5mb3JQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuRm9yKGVsLCBzdGF0ZSwgZ2VuU2NvcGVkU2xvdClcbiAgfVxuICB2YXIgc2xvdFNjb3BlID0gZWwuc2xvdFNjb3BlID09PSBlbXB0eVNsb3RTY29wZVRva2VuXG4gICAgPyBcIlwiXG4gICAgOiBTdHJpbmcoZWwuc2xvdFNjb3BlKTtcbiAgdmFyIGZuID0gXCJmdW5jdGlvbihcIiArIHNsb3RTY29wZSArIFwiKXtcIiArXG4gICAgXCJyZXR1cm4gXCIgKyAoZWwudGFnID09PSAndGVtcGxhdGUnXG4gICAgICA/IGVsLmlmICYmIGlzTGVnYWN5U3ludGF4XG4gICAgICAgID8gKFwiKFwiICsgKGVsLmlmKSArIFwiKT9cIiArIChnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd1bmRlZmluZWQnKSArIFwiOnVuZGVmaW5lZFwiKVxuICAgICAgICA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCdcbiAgICAgIDogZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwifVwiO1xuICAvLyByZXZlcnNlIHByb3h5IHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gIHZhciByZXZlcnNlUHJveHkgPSBzbG90U2NvcGUgPyBcIlwiIDogXCIscHJveHk6dHJ1ZVwiO1xuICByZXR1cm4gKFwie2tleTpcIiArIChlbC5zbG90VGFyZ2V0IHx8IFwiXFxcImRlZmF1bHRcXFwiXCIpICsgXCIsZm46XCIgKyBmbiArIHJldmVyc2VQcm94eSArIFwifVwiKVxufVxuXG5mdW5jdGlvbiBnZW5DaGlsZHJlbiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgY2hlY2tTa2lwLFxuICBhbHRHZW5FbGVtZW50LFxuICBhbHRHZW5Ob2RlXG4pIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG4gIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICB2YXIgZWwkMSA9IGNoaWxkcmVuWzBdO1xuICAgIC8vIG9wdGltaXplIHNpbmdsZSB2LWZvclxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIGVsJDEuZm9yICYmXG4gICAgICBlbCQxLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICAgZWwkMS50YWcgIT09ICdzbG90J1xuICAgICkge1xuICAgICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlID0gY2hlY2tTa2lwXG4gICAgICAgID8gc3RhdGUubWF5YmVDb21wb25lbnQoZWwkMSkgPyBcIiwxXCIgOiBcIiwwXCJcbiAgICAgICAgOiBcIlwiO1xuICAgICAgcmV0dXJuIChcIlwiICsgKChhbHRHZW5FbGVtZW50IHx8IGdlbkVsZW1lbnQpKGVsJDEsIHN0YXRlKSkgKyBub3JtYWxpemF0aW9uVHlwZSlcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlJDEgPSBjaGVja1NraXBcbiAgICAgID8gZ2V0Tm9ybWFsaXphdGlvblR5cGUoY2hpbGRyZW4sIHN0YXRlLm1heWJlQ29tcG9uZW50KVxuICAgICAgOiAwO1xuICAgIHZhciBnZW4gPSBhbHRHZW5Ob2RlIHx8IGdlbk5vZGU7XG4gICAgcmV0dXJuIChcIltcIiArIChjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGdlbihjLCBzdGF0ZSk7IH0pLmpvaW4oJywnKSkgKyBcIl1cIiArIChub3JtYWxpemF0aW9uVHlwZSQxID8gKFwiLFwiICsgbm9ybWFsaXphdGlvblR5cGUkMSkgOiAnJykpXG4gIH1cbn1cblxuLy8gZGV0ZXJtaW5lIHRoZSBub3JtYWxpemF0aW9uIG5lZWRlZCBmb3IgdGhlIGNoaWxkcmVuIGFycmF5LlxuLy8gMDogbm8gbm9ybWFsaXphdGlvbiBuZWVkZWRcbi8vIDE6IHNpbXBsZSBub3JtYWxpemF0aW9uIG5lZWRlZCAocG9zc2libGUgMS1sZXZlbCBkZWVwIG5lc3RlZCBhcnJheSlcbi8vIDI6IGZ1bGwgbm9ybWFsaXphdGlvbiBuZWVkZWRcbmZ1bmN0aW9uIGdldE5vcm1hbGl6YXRpb25UeXBlIChcbiAgY2hpbGRyZW4sXG4gIG1heWJlQ29tcG9uZW50XG4pIHtcbiAgdmFyIHJlcyA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWwgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoZWwudHlwZSAhPT0gMSkge1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKG5lZWRzTm9ybWFsaXphdGlvbihlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbmVlZHNOb3JtYWxpemF0aW9uKGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDI7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBpZiAobWF5YmVDb21wb25lbnQoZWwpIHx8XG4gICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG1heWJlQ29tcG9uZW50KGMuYmxvY2spOyB9KSkpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbmVlZHNOb3JtYWxpemF0aW9uIChlbCkge1xuICByZXR1cm4gZWwuZm9yICE9PSB1bmRlZmluZWQgfHwgZWwudGFnID09PSAndGVtcGxhdGUnIHx8IGVsLnRhZyA9PT0gJ3Nsb3QnXG59XG5cbmZ1bmN0aW9uIGdlbk5vZGUgKG5vZGUsIHN0YXRlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICByZXR1cm4gZ2VuRWxlbWVudChub2RlLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDMgJiYgbm9kZS5pc0NvbW1lbnQpIHtcbiAgICByZXR1cm4gZ2VuQ29tbWVudChub2RlKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZW5UZXh0KG5vZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuVGV4dCAodGV4dCkge1xuICByZXR1cm4gKFwiX3YoXCIgKyAodGV4dC50eXBlID09PSAyXG4gICAgPyB0ZXh0LmV4cHJlc3Npb24gLy8gbm8gbmVlZCBmb3IgKCkgYmVjYXVzZSBhbHJlYWR5IHdyYXBwZWQgaW4gX3MoKVxuICAgIDogdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKEpTT04uc3RyaW5naWZ5KHRleHQudGV4dCkpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Db21tZW50IChjb21tZW50KSB7XG4gIHJldHVybiAoXCJfZShcIiArIChKU09OLnN0cmluZ2lmeShjb21tZW50LnRleHQpKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5TbG90IChlbCwgc3RhdGUpIHtcbiAgdmFyIHNsb3ROYW1lID0gZWwuc2xvdE5hbWUgfHwgJ1wiZGVmYXVsdFwiJztcbiAgdmFyIGNoaWxkcmVuID0gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKTtcbiAgdmFyIHJlcyA9IFwiX3QoXCIgKyBzbG90TmFtZSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKTtcbiAgdmFyIGF0dHJzID0gZWwuYXR0cnMgfHwgZWwuZHluYW1pY0F0dHJzXG4gICAgPyBnZW5Qcm9wcygoZWwuYXR0cnMgfHwgW10pLmNvbmNhdChlbC5keW5hbWljQXR0cnMgfHwgW10pLm1hcChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gKHtcbiAgICAgICAgLy8gc2xvdCBwcm9wcyBhcmUgY2FtZWxpemVkXG4gICAgICAgIG5hbWU6IGNhbWVsaXplKGF0dHIubmFtZSksXG4gICAgICAgIHZhbHVlOiBhdHRyLnZhbHVlLFxuICAgICAgICBkeW5hbWljOiBhdHRyLmR5bmFtaWNcbiAgICAgIH0pOyB9KSlcbiAgICA6IG51bGw7XG4gIHZhciBiaW5kJCQxID0gZWwuYXR0cnNNYXBbJ3YtYmluZCddO1xuICBpZiAoKGF0dHJzIHx8IGJpbmQkJDEpICYmICFjaGlsZHJlbikge1xuICAgIHJlcyArPSBcIixudWxsXCI7XG4gIH1cbiAgaWYgKGF0dHJzKSB7XG4gICAgcmVzICs9IFwiLFwiICsgYXR0cnM7XG4gIH1cbiAgaWYgKGJpbmQkJDEpIHtcbiAgICByZXMgKz0gKGF0dHJzID8gJycgOiAnLG51bGwnKSArIFwiLFwiICsgYmluZCQkMTtcbiAgfVxuICByZXR1cm4gcmVzICsgJyknXG59XG5cbi8vIGNvbXBvbmVudE5hbWUgaXMgZWwuY29tcG9uZW50LCB0YWtlIGl0IGFzIGFyZ3VtZW50IHRvIHNodW4gZmxvdydzIHBlc3NpbWlzdGljIHJlZmluZW1lbnRcbmZ1bmN0aW9uIGdlbkNvbXBvbmVudCAoXG4gIGNvbXBvbmVudE5hbWUsXG4gIGVsLFxuICBzdGF0ZVxuKSB7XG4gIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7XG4gIHJldHVybiAoXCJfYyhcIiArIGNvbXBvbmVudE5hbWUgKyBcIixcIiArIChnZW5EYXRhJDIoZWwsIHN0YXRlKSkgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJykgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gZ2VuUHJvcHMgKHByb3BzKSB7XG4gIHZhciBzdGF0aWNQcm9wcyA9IFwiXCI7XG4gIHZhciBkeW5hbWljUHJvcHMgPSBcIlwiO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3AgPSBwcm9wc1tpXTtcbiAgICB2YXIgdmFsdWUgPSB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMocHJvcC52YWx1ZSk7XG4gICAgaWYgKHByb3AuZHluYW1pYykge1xuICAgICAgZHluYW1pY1Byb3BzICs9IChwcm9wLm5hbWUpICsgXCIsXCIgKyB2YWx1ZSArIFwiLFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0aWNQcm9wcyArPSBcIlxcXCJcIiArIChwcm9wLm5hbWUpICsgXCJcXFwiOlwiICsgdmFsdWUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgc3RhdGljUHJvcHMgPSBcIntcIiArIChzdGF0aWNQcm9wcy5zbGljZSgwLCAtMSkpICsgXCJ9XCI7XG4gIGlmIChkeW5hbWljUHJvcHMpIHtcbiAgICByZXR1cm4gKFwiX2QoXCIgKyBzdGF0aWNQcm9wcyArIFwiLFtcIiArIChkeW5hbWljUHJvcHMuc2xpY2UoMCwgLTEpKSArIFwiXSlcIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RhdGljUHJvcHNcbiAgfVxufVxuXG4vLyAjMzg5NSwgIzQyNjhcbmZ1bmN0aW9uIHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyAodGV4dCkge1xuICByZXR1cm4gdGV4dFxuICAgIC5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKVxuICAgIC5yZXBsYWNlKC9cXHUyMDI5L2csICdcXFxcdTIwMjknKVxufVxuXG4vKiAgKi9cblxuXG5cbi8vIHRoZXNlIGtleXdvcmRzIHNob3VsZCBub3QgYXBwZWFyIGluc2lkZSBleHByZXNzaW9ucywgYnV0IG9wZXJhdG9ycyBsaWtlXG4vLyB0eXBlb2YsIGluc3RhbmNlb2YgYW5kIGluIGFyZSBhbGxvd2VkXG52YXIgcHJvaGliaXRlZEtleXdvcmRSRSA9IG5ldyBSZWdFeHAoJ1xcXFxiJyArIChcbiAgJ2RvLGlmLGZvcixsZXQsbmV3LHRyeSx2YXIsY2FzZSxlbHNlLHdpdGgsYXdhaXQsYnJlYWssY2F0Y2gsY2xhc3MsY29uc3QsJyArXG4gICdzdXBlcix0aHJvdyx3aGlsZSx5aWVsZCxkZWxldGUsZXhwb3J0LGltcG9ydCxyZXR1cm4sc3dpdGNoLGRlZmF1bHQsJyArXG4gICdleHRlbmRzLGZpbmFsbHksY29udGludWUsZGVidWdnZXIsZnVuY3Rpb24sYXJndW1lbnRzJ1xuKS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxifFxcXFxiJykgKyAnXFxcXGInKTtcblxuLy8gdGhlc2UgdW5hcnkgb3BlcmF0b3JzIHNob3VsZCBub3QgYmUgdXNlZCBhcyBwcm9wZXJ0eS9tZXRob2QgbmFtZXNcbnZhciB1bmFyeU9wZXJhdG9yc1JFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAnZGVsZXRlLHR5cGVvZix2b2lkJ1xuKS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCl8XFxcXGInKSArICdcXFxccypcXFxcKFteXFxcXCldKlxcXFwpJyk7XG5cbi8vIHN0cmlwIHN0cmluZ3MgaW4gZXhwcmVzc2lvbnNcbnZhciBzdHJpcFN0cmluZ1JFID0gLycoPzpbXidcXFxcXXxcXFxcLikqJ3xcIig/OlteXCJcXFxcXXxcXFxcLikqXCJ8YCg/OlteYFxcXFxdfFxcXFwuKSpcXCRcXHt8XFx9KD86W15gXFxcXF18XFxcXC4pKmB8YCg/OlteYFxcXFxdfFxcXFwuKSpgL2c7XG5cbi8vIGRldGVjdCBwcm9ibGVtYXRpYyBleHByZXNzaW9ucyBpbiBhIHRlbXBsYXRlXG5mdW5jdGlvbiBkZXRlY3RFcnJvcnMgKGFzdCwgd2Fybikge1xuICBpZiAoYXN0KSB7XG4gICAgY2hlY2tOb2RlKGFzdCwgd2Fybik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tOb2RlIChub2RlLCB3YXJuKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIG5vZGUuYXR0cnNNYXApIHtcbiAgICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG5vZGUuYXR0cnNNYXBbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHZhciByYW5nZSA9IG5vZGUucmF3QXR0cnNNYXBbbmFtZV07XG4gICAgICAgICAgaWYgKG5hbWUgPT09ICd2LWZvcicpIHtcbiAgICAgICAgICAgIGNoZWNrRm9yKG5vZGUsIChcInYtZm9yPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvblJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgIGNoZWNrRXZlbnQodmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tFeHByZXNzaW9uKHZhbHVlLCAobmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hlY2tOb2RlKG5vZGUuY2hpbGRyZW5baV0sIHdhcm4pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDIpIHtcbiAgICBjaGVja0V4cHJlc3Npb24obm9kZS5leHByZXNzaW9uLCBub2RlLnRleHQsIHdhcm4sIG5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrRXZlbnQgKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgdmFyIHN0aXBwZWQgPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJyk7XG4gIHZhciBrZXl3b3JkTWF0Y2ggPSBzdGlwcGVkLm1hdGNoKHVuYXJ5T3BlcmF0b3JzUkUpO1xuICBpZiAoa2V5d29yZE1hdGNoICYmIHN0aXBwZWQuY2hhckF0KGtleXdvcmRNYXRjaC5pbmRleCAtIDEpICE9PSAnJCcpIHtcbiAgICB3YXJuKFxuICAgICAgXCJhdm9pZCB1c2luZyBKYXZhU2NyaXB0IHVuYXJ5IG9wZXJhdG9yIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgIFwiXFxcIlwiICsgKGtleXdvcmRNYXRjaFswXSkgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbiBcIiArICh0ZXh0LnRyaW0oKSksXG4gICAgICByYW5nZVxuICAgICk7XG4gIH1cbiAgY2hlY2tFeHByZXNzaW9uKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpO1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvciAobm9kZSwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgY2hlY2tFeHByZXNzaW9uKG5vZGUuZm9yIHx8ICcnLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLmFsaWFzLCAndi1mb3IgYWxpYXMnLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMSwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICBjaGVja0lkZW50aWZpZXIobm9kZS5pdGVyYXRvcjIsICd2LWZvciBpdGVyYXRvcicsIHRleHQsIHdhcm4sIHJhbmdlKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJZGVudGlmaWVyIChcbiAgaWRlbnQsXG4gIHR5cGUsXG4gIHRleHQsXG4gIHdhcm4sXG4gIHJhbmdlXG4pIHtcbiAgaWYgKHR5cGVvZiBpZGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZ1bmN0aW9uKChcInZhciBcIiArIGlkZW50ICsgXCI9X1wiKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgd2FybigoXCJpbnZhbGlkIFwiICsgdHlwZSArIFwiIFxcXCJcIiArIGlkZW50ICsgXCJcXFwiIGluIGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSksIHJhbmdlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFeHByZXNzaW9uIChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIHRyeSB7XG4gICAgbmV3IEZ1bmN0aW9uKChcInJldHVybiBcIiArIGV4cCkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGtleXdvcmRNYXRjaCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKS5tYXRjaChwcm9oaWJpdGVkS2V5d29yZFJFKTtcbiAgICBpZiAoa2V5d29yZE1hdGNoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImF2b2lkIHVzaW5nIEphdmFTY3JpcHQga2V5d29yZCBhcyBwcm9wZXJ0eSBuYW1lOiBcIiArXG4gICAgICAgIFwiXFxcIlwiICsgKGtleXdvcmRNYXRjaFswXSkgKyBcIlxcXCJcXG4gIFJhdyBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSksXG4gICAgICAgIHJhbmdlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImludmFsaWQgZXhwcmVzc2lvbjogXCIgKyAoZS5tZXNzYWdlKSArIFwiIGluXFxuXFxuXCIgK1xuICAgICAgICBcIiAgICBcIiArIGV4cCArIFwiXFxuXFxuXCIgK1xuICAgICAgICBcIiAgUmF3IGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSArIFwiXFxuXCIsXG4gICAgICAgIHJhbmdlXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHJhbmdlID0gMjtcblxuZnVuY3Rpb24gZ2VuZXJhdGVDb2RlRnJhbWUgKFxuICBzb3VyY2UsXG4gIHN0YXJ0LFxuICBlbmRcbikge1xuICBpZiAoIHN0YXJ0ID09PSB2b2lkIDAgKSBzdGFydCA9IDA7XG4gIGlmICggZW5kID09PSB2b2lkIDAgKSBlbmQgPSBzb3VyY2UubGVuZ3RoO1xuXG4gIHZhciBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvXFxyP1xcbi8pO1xuICB2YXIgY291bnQgPSAwO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3VudCArPSBsaW5lc1tpXS5sZW5ndGggKyAxO1xuICAgIGlmIChjb3VudCA+PSBzdGFydCkge1xuICAgICAgZm9yICh2YXIgaiA9IGkgLSByYW5nZTsgaiA8PSBpICsgcmFuZ2UgfHwgZW5kID4gY291bnQ7IGorKykge1xuICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBsaW5lcy5sZW5ndGgpIHsgY29udGludWUgfVxuICAgICAgICByZXMucHVzaCgoXCJcIiArIChqICsgMSkgKyAocmVwZWF0JDEoXCIgXCIsIDMgLSBTdHJpbmcoaiArIDEpLmxlbmd0aCkpICsgXCJ8ICBcIiArIChsaW5lc1tqXSkpKTtcbiAgICAgICAgdmFyIGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XG4gICAgICAgIGlmIChqID09PSBpKSB7XG4gICAgICAgICAgLy8gcHVzaCB1bmRlcmxpbmVcbiAgICAgICAgICB2YXIgcGFkID0gc3RhcnQgLSAoY291bnQgLSBsaW5lTGVuZ3RoKSArIDE7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGVuZCA+IGNvdW50ID8gbGluZUxlbmd0aCAtIHBhZCA6IGVuZCAtIHN0YXJ0O1xuICAgICAgICAgIHJlcy5wdXNoKFwiICAgfCAgXCIgKyByZXBlYXQkMShcIiBcIiwgcGFkKSArIHJlcGVhdCQxKFwiXlwiLCBsZW5ndGgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChqID4gaSkge1xuICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCQxID0gTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpO1xuICAgICAgICAgICAgcmVzLnB1c2goXCIgICB8ICBcIiArIHJlcGVhdCQxKFwiXlwiLCBsZW5ndGgkMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb3VudCArPSBsaW5lTGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcy5qb2luKCdcXG4nKVxufVxuXG5mdW5jdGlvbiByZXBlYXQkMSAoc3RyLCBuKSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKG4gPiAwKSB7XG4gICAgd2hpbGUgKHRydWUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgaWYgKG4gJiAxKSB7IHJlc3VsdCArPSBzdHI7IH1cbiAgICAgIG4gPj4+PSAxO1xuICAgICAgaWYgKG4gPD0gMCkgeyBicmVhayB9XG4gICAgICBzdHIgKz0gc3RyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb24gKGNvZGUsIGVycm9ycykge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oY29kZSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3JzLnB1c2goeyBlcnI6IGVyciwgY29kZTogY29kZSB9KTtcbiAgICByZXR1cm4gbm9vcFxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4gKGNvbXBpbGUpIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29tcGlsZVRvRnVuY3Rpb25zIChcbiAgICB0ZW1wbGF0ZSxcbiAgICBvcHRpb25zLFxuICAgIHZtXG4gICkge1xuICAgIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuICAgIHZhciB3YXJuJCQxID0gb3B0aW9ucy53YXJuIHx8IHdhcm47XG4gICAgZGVsZXRlIG9wdGlvbnMud2FybjtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBkZXRlY3QgcG9zc2libGUgQ1NQIHJlc3RyaWN0aW9uXG4gICAgICB0cnkge1xuICAgICAgICBuZXcgRnVuY3Rpb24oJ3JldHVybiAxJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLnRvU3RyaW5nKCkubWF0Y2goL3Vuc2FmZS1ldmFsfENTUC8pKSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgICdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIHRoZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFZ1ZS5qcyBpbiBhbiAnICtcbiAgICAgICAgICAgICdlbnZpcm9ubWVudCB3aXRoIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHRoYXQgcHJvaGliaXRzIHVuc2FmZS1ldmFsLiAnICtcbiAgICAgICAgICAgICdUaGUgdGVtcGxhdGUgY29tcGlsZXIgY2Fubm90IHdvcmsgaW4gdGhpcyBlbnZpcm9ubWVudC4gQ29uc2lkZXIgJyArXG4gICAgICAgICAgICAncmVsYXhpbmcgdGhlIHBvbGljeSB0byBhbGxvdyB1bnNhZmUtZXZhbCBvciBwcmUtY29tcGlsaW5nIHlvdXIgJyArXG4gICAgICAgICAgICAndGVtcGxhdGVzIGludG8gcmVuZGVyIGZ1bmN0aW9ucy4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNoZWNrIGNhY2hlXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuZGVsaW1pdGVyc1xuICAgICAgPyBTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXJzKSArIHRlbXBsYXRlXG4gICAgICA6IHRlbXBsYXRlO1xuICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICByZXR1cm4gY2FjaGVba2V5XVxuICAgIH1cblxuICAgIC8vIGNvbXBpbGVcbiAgICB2YXIgY29tcGlsZWQgPSBjb21waWxlKHRlbXBsYXRlLCBvcHRpb25zKTtcblxuICAgIC8vIGNoZWNrIGNvbXBpbGF0aW9uIGVycm9ycy90aXBzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb21waWxlZC5lcnJvcnMgJiYgY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgICAgICBcIkVycm9yIGNvbXBpbGluZyB0ZW1wbGF0ZTpcXG5cXG5cIiArIChlLm1zZykgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgICAgZ2VuZXJhdGVDb2RlRnJhbWUodGVtcGxhdGUsIGUuc3RhcnQsIGUuZW5kKSxcbiAgICAgICAgICAgICAgdm1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgIFwiRXJyb3IgY29tcGlsaW5nIHRlbXBsYXRlOlxcblxcblwiICsgdGVtcGxhdGUgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIChcIi0gXCIgKyBlKTsgfSkuam9pbignXFxuJykgKyAnXFxuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbXBpbGVkLnRpcHMgJiYgY29tcGlsZWQudGlwcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRpcChlLm1zZywgdm0pOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKG1zZykgeyByZXR1cm4gdGlwKG1zZywgdm0pOyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHR1cm4gY29kZSBpbnRvIGZ1bmN0aW9uc1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgZm5HZW5FcnJvcnMgPSBbXTtcbiAgICByZXMucmVuZGVyID0gY3JlYXRlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyLCBmbkdlbkVycm9ycyk7XG4gICAgcmVzLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbihjb2RlLCBmbkdlbkVycm9ycylcbiAgICB9KTtcblxuICAgIC8vIGNoZWNrIGZ1bmN0aW9uIGdlbmVyYXRpb24gZXJyb3JzLlxuICAgIC8vIHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIGlmIHRoZXJlIGlzIGEgYnVnIGluIHRoZSBjb21waWxlciBpdHNlbGYuXG4gICAgLy8gbW9zdGx5IGZvciBjb2RlZ2VuIGRldmVsb3BtZW50IHVzZVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoKCFjb21waWxlZC5lcnJvcnMgfHwgIWNvbXBpbGVkLmVycm9ycy5sZW5ndGgpICYmIGZuR2VuRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgIFwiRmFpbGVkIHRvIGdlbmVyYXRlIHJlbmRlciBmdW5jdGlvbjpcXG5cXG5cIiArXG4gICAgICAgICAgZm5HZW5FcnJvcnMubWFwKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgIHZhciBlcnIgPSByZWYuZXJyO1xuICAgICAgICAgICAgdmFyIGNvZGUgPSByZWYuY29kZTtcblxuICAgICAgICAgICAgcmV0dXJuICgoZXJyLnRvU3RyaW5nKCkpICsgXCIgaW5cXG5cXG5cIiArIGNvZGUgKyBcIlxcblwiKTtcbiAgICAgICAgfSkuam9pbignXFxuJyksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKGNhY2hlW2tleV0gPSByZXMpXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyQ3JlYXRvciAoYmFzZUNvbXBpbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyIChiYXNlT3B0aW9ucykge1xuICAgIGZ1bmN0aW9uIGNvbXBpbGUgKFxuICAgICAgdGVtcGxhdGUsXG4gICAgICBvcHRpb25zXG4gICAgKSB7XG4gICAgICB2YXIgZmluYWxPcHRpb25zID0gT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucyk7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgdGlwcyA9IFtdO1xuXG4gICAgICB2YXIgd2FybiA9IGZ1bmN0aW9uIChtc2csIHJhbmdlLCB0aXApIHtcbiAgICAgICAgKHRpcCA/IHRpcHMgOiBlcnJvcnMpLnB1c2gobXNnKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgICB2YXIgbGVhZGluZ1NwYWNlTGVuZ3RoID0gdGVtcGxhdGUubWF0Y2goL15cXHMqLylbMF0ubGVuZ3RoO1xuXG4gICAgICAgICAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHJhbmdlLCB0aXApIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0geyBtc2c6IG1zZyB9O1xuICAgICAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5zdGFydCA9IHJhbmdlLnN0YXJ0ICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRhdGEuZW5kID0gcmFuZ2UuZW5kICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChkYXRhKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIG1lcmdlIGN1c3RvbSBtb2R1bGVzXG4gICAgICAgIGlmIChvcHRpb25zLm1vZHVsZXMpIHtcbiAgICAgICAgICBmaW5hbE9wdGlvbnMubW9kdWxlcyA9XG4gICAgICAgICAgICAoYmFzZU9wdGlvbnMubW9kdWxlcyB8fCBbXSkuY29uY2F0KG9wdGlvbnMubW9kdWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVyZ2UgY3VzdG9tIGRpcmVjdGl2ZXNcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aXZlcykge1xuICAgICAgICAgIGZpbmFsT3B0aW9ucy5kaXJlY3RpdmVzID0gZXh0ZW5kKFxuICAgICAgICAgICAgT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucy5kaXJlY3RpdmVzIHx8IG51bGwpLFxuICAgICAgICAgICAgb3B0aW9ucy5kaXJlY3RpdmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb3B5IG90aGVyIG9wdGlvbnNcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSAnbW9kdWxlcycgJiYga2V5ICE9PSAnZGlyZWN0aXZlcycpIHtcbiAgICAgICAgICAgIGZpbmFsT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmaW5hbE9wdGlvbnMud2FybiA9IHdhcm47XG5cbiAgICAgIHZhciBjb21waWxlZCA9IGJhc2VDb21waWxlKHRlbXBsYXRlLnRyaW0oKSwgZmluYWxPcHRpb25zKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRldGVjdEVycm9ycyhjb21waWxlZC5hc3QsIHdhcm4pO1xuICAgICAgfVxuICAgICAgY29tcGlsZWQuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgY29tcGlsZWQudGlwcyA9IHRpcHM7XG4gICAgICByZXR1cm4gY29tcGlsZWRcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29tcGlsZTogY29tcGlsZSxcbiAgICAgIGNvbXBpbGVUb0Z1bmN0aW9uczogY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25Gbihjb21waWxlKVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gYGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcmAgYWxsb3dzIGNyZWF0aW5nIGNvbXBpbGVycyB0aGF0IHVzZSBhbHRlcm5hdGl2ZVxuLy8gcGFyc2VyL29wdGltaXplci9jb2RlZ2VuLCBlLmcgdGhlIFNTUiBvcHRpbWl6aW5nIGNvbXBpbGVyLlxuLy8gSGVyZSB3ZSBqdXN0IGV4cG9ydCBhIGRlZmF1bHQgY29tcGlsZXIgdXNpbmcgdGhlIGRlZmF1bHQgcGFydHMuXG52YXIgY3JlYXRlQ29tcGlsZXIgPSBjcmVhdGVDb21waWxlckNyZWF0b3IoZnVuY3Rpb24gYmFzZUNvbXBpbGUgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBhc3QgPSBwYXJzZSh0ZW1wbGF0ZS50cmltKCksIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5vcHRpbWl6ZSAhPT0gZmFsc2UpIHtcbiAgICBvcHRpbWl6ZShhc3QsIG9wdGlvbnMpO1xuICB9XG4gIHZhciBjb2RlID0gZ2VuZXJhdGUoYXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICBhc3Q6IGFzdCxcbiAgICByZW5kZXI6IGNvZGUucmVuZGVyLFxuICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmJDEgPSBjcmVhdGVDb21waWxlcihiYXNlT3B0aW9ucyk7XG52YXIgY29tcGlsZSA9IHJlZiQxLmNvbXBpbGU7XG52YXIgY29tcGlsZVRvRnVuY3Rpb25zID0gcmVmJDEuY29tcGlsZVRvRnVuY3Rpb25zO1xuXG4vKiAgKi9cblxuLy8gY2hlY2sgd2hldGhlciBjdXJyZW50IGJyb3dzZXIgZW5jb2RlcyBhIGNoYXIgaW5zaWRlIGF0dHJpYnV0ZSB2YWx1ZXNcbnZhciBkaXY7XG5mdW5jdGlvbiBnZXRTaG91bGREZWNvZGUgKGhyZWYpIHtcbiAgZGl2ID0gZGl2IHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gaHJlZiA/IFwiPGEgaHJlZj1cXFwiXFxuXFxcIi8+XCIgOiBcIjxkaXYgYT1cXFwiXFxuXFxcIi8+XCI7XG4gIHJldHVybiBkaXYuaW5uZXJIVE1MLmluZGV4T2YoJyYjMTA7JykgPiAwXG59XG5cbi8vICMzNjYzOiBJRSBlbmNvZGVzIG5ld2xpbmVzIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzIHdoaWxlIG90aGVyIGJyb3dzZXJzIGRvbid0XG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSBpbkJyb3dzZXIgPyBnZXRTaG91bGREZWNvZGUoZmFsc2UpIDogZmFsc2U7XG4vLyAjNjgyODogY2hyb21lIGVuY29kZXMgY29udGVudCBpbiBhW2hyZWZdXG52YXIgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKHRydWUpIDogZmFsc2U7XG5cbi8qICAqL1xuXG52YXIgaWRUb1RlbXBsYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChpZCkge1xuICB2YXIgZWwgPSBxdWVyeShpZCk7XG4gIHJldHVybiBlbCAmJiBlbC5pbm5lckhUTUxcbn0pO1xuXG52YXIgbW91bnQgPSBWdWUucHJvdG90eXBlLiRtb3VudDtcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBxdWVyeShlbCk7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuYm9keSB8fCBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJEbyBub3QgbW91bnQgVnVlIHRvIDxodG1sPiBvciA8Ym9keT4gLSBtb3VudCB0byBub3JtYWwgZWxlbWVudHMgaW5zdGVhZC5cIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgLy8gcmVzb2x2ZSB0ZW1wbGF0ZS9lbCBhbmQgY29udmVydCB0byByZW5kZXIgZnVuY3Rpb25cbiAgaWYgKCFvcHRpb25zLnJlbmRlcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodGVtcGxhdGUuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICB0ZW1wbGF0ZSA9IGlkVG9UZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAoXCJUZW1wbGF0ZSBlbGVtZW50IG5vdCBmb3VuZCBvciBpcyBlbXB0eTogXCIgKyAob3B0aW9ucy50ZW1wbGF0ZSkpLFxuICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZS5ub2RlVHlwZSkge1xuICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLmlubmVySFRNTDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybignaW52YWxpZCB0ZW1wbGF0ZSBvcHRpb246JyArIHRlbXBsYXRlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAgIHRlbXBsYXRlID0gZ2V0T3V0ZXJIVE1MKGVsKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICAgIG1hcmsoJ2NvbXBpbGUnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiA9IGNvbXBpbGVUb0Z1bmN0aW9ucyh0ZW1wbGF0ZSwge1xuICAgICAgICBvdXRwdXRTb3VyY2VSYW5nZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcbiAgICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IHNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgICAgICBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6IHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICAgICAgZGVsaW1pdGVyczogb3B0aW9ucy5kZWxpbWl0ZXJzLFxuICAgICAgICBjb21tZW50czogb3B0aW9ucy5jb21tZW50c1xuICAgICAgfSwgdGhpcyk7XG4gICAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICAgIHZhciBzdGF0aWNSZW5kZXJGbnMgPSByZWYuc3RhdGljUmVuZGVyRm5zO1xuICAgICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXI7XG4gICAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZucztcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICBtYXJrKCdjb21waWxlIGVuZCcpO1xuICAgICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh0aGlzLl9uYW1lKSArIFwiIGNvbXBpbGVcIiksICdjb21waWxlJywgJ2NvbXBpbGUgZW5kJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtb3VudC5jYWxsKHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vKipcbiAqIEdldCBvdXRlckhUTUwgb2YgZWxlbWVudHMsIHRha2luZyBjYXJlXG4gKiBvZiBTVkcgZWxlbWVudHMgaW4gSUUgYXMgd2VsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJIVE1MIChlbCkge1xuICBpZiAoZWwub3V0ZXJIVE1MKSB7XG4gICAgcmV0dXJuIGVsLm91dGVySFRNTFxuICB9IGVsc2Uge1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwuY2xvbmVOb2RlKHRydWUpKTtcbiAgICByZXR1cm4gY29udGFpbmVyLmlubmVySFRNTFxuICB9XG59XG5cblZ1ZS5jb21waWxlID0gY29tcGlsZVRvRnVuY3Rpb25zO1xuXG5leHBvcnQgZGVmYXVsdCBWdWU7XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbmRpdltkYXRhLXYtYThlNjFhNjJde1xcclxcbiAgZmxvYXQ6IGxlZnQ7XFxufVxcbi5wcm9kdWN0c1tkYXRhLXYtYThlNjFhNjJde1xcclxcbiAgd2lkdGg6IDgwJTtcXHJcXG4gIG1hcmdpbjogMCBhdXRvO1xcclxcbiAgcGFkZGluZzogMzBweCAxMCUgMzBweDtcXHJcXG4gIGJhY2tncm91bmQ6IHJnYig4OSwgODksIDg5KTtcXG59XFxuLnByby1jb2xbZGF0YS12LWE4ZTYxYTYyXXtcXHJcXG4gIHdpZHRoOiAyNSU7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDMycHg7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4ucHJvLWdyb3VwLXRpdGxlW2RhdGEtdi1hOGU2MWE2Ml17XFxyXFxuICBmb250LXNpemU6IDE4cHg7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBwYWRkaW5nOiAxNXB4IDA7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDI4cHg7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiDlvq7ova/pm4Xpu5E7XFxufVxcbi5wcm8tZ3JvdXAtdGl0bGVbZGF0YS12LWE4ZTYxYTYyXTo6YWZ0ZXJ7XFxyXFxuICBjb250ZW50OiBcXFwiIFxcXCI7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgbGVmdDogMDtcXHJcXG4gICAgYm90dG9tOiAwO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAxcHg7XFxyXFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjOWI5ZWE0O1xcclxcbiAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDAgMDtcXHJcXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xcclxcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGVZKC41KTtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZVkoLjUpO1xcbn1cXG4ucHJvLWJsb2NrW2RhdGEtdi0wZWYzMTUwZV1bZGF0YS12LWE4ZTYxYTYyXSB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLnByby10aHVtYltkYXRhLXYtMGVmMzE1MGVdW2RhdGEtdi1hOGU2MWE2Ml0ge1xcclxcbiAgICB3aWR0aDogNTJweDtcXHJcXG4gICAgaGVpZ2h0OiA1MnB4O1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7XFxyXFxuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGZsb2F0OiBsZWZ0O1xcbn1cXG4ucHJvLXRpdGxlW2RhdGEtdi0wZWYzMTUwZV1bZGF0YS12LWE4ZTYxYTYyXSB7XFxyXFxuICAgIGNvbG9yOiAjZWFlYWVhO1xcclxcbiAgICBmb250LXNpemU6IDE2cHg7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAyMnB4O1xcclxcbiAgICBtYXJnaW4tdG9wOiA4cHg7XFxyXFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxyXFxuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4ucHJvLXN1bW1hcnlbZGF0YS12LTBlZjMxNTBlXVtkYXRhLXYtYThlNjFhNjJdIHtcXHJcXG4gICAgZm9udC1zaXplOiAxMnB4O1xcclxcbiAgICBjb2xvcjogI2NhY2VkNDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbi5rYWl0aVtkYXRhLXYtYThlNjFhNjJdIHtcXHJcXG4gICAgZm9udC1mYW1pbHk6IEthaVRpO1xcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50L3Byb2R1Y3RzLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBb0RBO0VBQ0EsV0FBQTtBQUNBO0FBQ0E7RUFDQSxVQUFBO0VBQ0EsY0FBQTtFQUNBLHNCQUFBO0VBQ0EsMkJBQUE7QUFDQTtBQUNBO0VBQ0EsVUFBQTtFQUNBLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxxQkFBQTtBQUNBO0FBQ0E7RUFDQSxlQUFBO0lBQ0EsV0FBQTtJQUNBLGVBQUE7SUFDQSxtQkFBQTtJQUNBLGdCQUFBO0lBQ0EsZ0JBQUE7SUFDQSxrQkFBQTtJQUNBLGlCQUFBO0lBQ0EsaUJBQUE7QUFDQTtBQUNBO0VBQ0EsWUFBQTtJQUNBLGtCQUFBO0lBQ0EsT0FBQTtJQUNBLFNBQUE7SUFDQSxXQUFBO0lBQ0EsV0FBQTtJQUNBLDZCQUFBO0lBQ0EsNkJBQUE7SUFDQSxxQkFBQTtJQUNBLDZCQUFBO0lBQ0EscUJBQUE7QUFDQTtBQUNBO0lBQ0EsbUJBQUE7SUFDQSxlQUFBO0FBQ0E7QUFDQTtJQUNBLFdBQUE7SUFDQSxZQUFBO0lBQ0Esa0JBQUE7SUFDQSx5QkFBQTtJQUNBLHNCQUFBO0lBQ0EsbUJBQUE7SUFDQSxXQUFBO0FBQ0E7QUFDQTtJQUNBLGNBQUE7SUFDQSxlQUFBO0lBQ0EsZ0JBQUE7SUFDQSxnQkFBQTtJQUNBLGlCQUFBO0lBQ0EsZUFBQTtJQUNBLG1CQUFBO0lBQ0EsdUJBQUE7SUFDQSxnQkFBQTtBQUNBO0FBQ0E7SUFDQSxlQUFBO0lBQ0EsY0FBQTtJQUNBLGlCQUFBO0lBQ0EsZ0JBQUE7QUFDQTtBQUNBO0lBQ0Esa0JBQUE7QUFDQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxyXFxuICA8ZGl2IGNsYXNzPVxcXCJwcm9kdWN0cyBwcm9kdWN0XFxcIj5cXHJcXG4gICAgIDxkaXYgZGF0YS12LTBlZjMxNTBlPVxcXCJcXFwiIGNsYXNzPVxcXCJwcm8tY29sXFxcIj5cXHJcXG4gICAgICAgPGg0IGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiBjbGFzcz1cXFwicHJvLWdyb3VwLXRpdGxlXFxcIj7mmbrog73nlKjlk4E8L2g0PlxcclxcbiAgICAgICA8ZGl2IGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiBjbGFzcz1cXFwiZmxleC1yb3cgcHJvLWJsb2NrXFxcIj5cXHJcXG4gICAgICAgICA8aW1nIGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiBzcmM9XFxcIi9pbWcvMTU0NTEwMDE1Nl9iY2Q3Y2Y0Y2ZkZWFlOGI4ZGY0M2RlYTM2YTUyYjNjOS5wbmdcXFwiIGFsdD1cXFwiXFxcIiBjbGFzcz1cXFwicHJvLXRodW1iXFxcIj5cXHJcXG4gICAgICAgICA8ZGl2IGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiAgQGNsaWNrPVxcXCJwcm9cXFwiPlxcclxcbiAgICAgICAgICAgPGg1IGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiBjbGFzcz1cXFwicHJvLXRpdGxlIHByby1oNVxcXCI+5a6g54mp6aWu5rC05py6PC9oNT5cXHJcXG4gICAgICAgICAgIDxwIGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiBjbGFzcz1cXFwicHJvLXN1bW1hcnkga2FpdGlcXFwiPuWRteaKpOeIseWuoCDlgaXlurfppa7msLQ8L3A+XFxyXFxuICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgIDwvZGl2Pjxicj5cXHJcXG4gICAgICAgICAgIDxkaXYgZGF0YS12LTBlZjMxNTBlPVxcXCJcXFwiIGNsYXNzPVxcXCJmbGV4LXJvdyBwcm8tYmxvY2tcXFwiPlxcclxcbiAgICAgICAgICAgICA8aW1nIGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiBzcmM9XFxcIi9pbWcvMTU2OTU2Njc0MV81YzNkNDc3ZjkyOTMxMDhkMTA1Y2MxNGZhYmEyZDliMi5wbmdcXFwiIGFsdD1cXFwiXFxcIiBjbGFzcz1cXFwicHJvLXRodW1iXFxcIj5cXHJcXG4gICAgICAgICAgICAgPGRpdiBkYXRhLXYtMGVmMzE1MGU9XFxcIlxcXCI+XFxyXFxuICAgICAgICAgICAgICAgPGg1IGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiBjbGFzcz1cXFwicHJvLXRpdGxlIHByby1oNVxcXCI+5pm66IO95a6g54mp6Zu26aOf5py6PC9oNT5cXHJcXG4gICAgICAgICAgICAgICA8cCBkYXRhLXYtMGVmMzE1MGU9XFxcIlxcXCIgY2xhc3M9XFxcInByby1zdW1tYXJ5IGthaXRpXFxcIj7mmbrog73igJzpgJfnjKvigJ0g6L+c56iL4oCc6YGb54uX4oCdPC9wPlxcclxcbiAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiBjbGFzcz1cXFwicHJvLWNvbFxcXCI+XFxyXFxuICAgICAgICAgICAgPGg0IGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiBjbGFzcz1cXFwicHJvLWdyb3VwLXRpdGxlXFxcIj7muIXmtIE8L2g0PlxcclxcbiAgICAgICAgICAgIFxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPGRpdiBkYXRhLXYtMGVmMzE1MGU9XFxcIlxcXCIgY2xhc3M9XFxcInByby1jb2xcXFwiPlxcclxcbiAgICAgICA8aDQgZGF0YS12LTBlZjMxNTBlPVxcXCJcXFwiIGNsYXNzPVxcXCJwcm8tZ3JvdXAtdGl0bGVcXFwiPumFjeS7tjwvaDQ+XFxyXFxuICAgICAgIDxkaXYgZGF0YS12LTBlZjMxNTBlPVxcXCJcXFwiIGNsYXNzPVxcXCJmbGV4LXJvdyBwcm8tYmxvY2tcXFwiPlxcclxcbiAgICAgICAgIDxpbWcgZGF0YS12LTBlZjMxNTBlPVxcXCJcXFwiIHNyYz1cXFwiL2ltZy8xNTQ1MTAwNzc5XzViZmIwZDVmYTA0NjUxMWE2NGRjN2NhZDljZmY4ZDM0LnBuZ1xcXCIgYWx0PVxcXCJcXFwiIGNsYXNzPVxcXCJwcm8tdGh1bWJcXFwiPlxcclxcbiAgICAgICAgIDxkaXYgZGF0YS12LTBlZjMxNTBlPVxcXCJcXFwiPlxcclxcbiAgICAgICAgICAgPGg1IGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiBjbGFzcz1cXFwicHJvLXRpdGxlIHByby1oNVxcXCI+5a6g54mp6aWu5rC05py65ruk6IqvPC9oNT5cXHJcXG4gICAgICAgICAgIDxwIGRhdGEtdi0wZWYzMTUwZT1cXFwiXFxcIiBjbGFzcz1cXFwicHJvLXN1bW1hcnkga2FpdGlcXFwiPuS8mOi0qOa7pOadkCDlm5vph43ov4fmu6Q8L3A+XFxyXFxuICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgIDwvZGl2Pjxicj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgPC9kaXY+XFxyXFxuPC90ZW1wbGF0ZT5cXHJcXG48c2NyaXB0PlxcclxcbmV4cG9ydCBkZWZhdWx0IHtcXHJcXG4gIG5hbWU6XFxcInByb2R1Y3RzXFxcIixcXHJcXG4gZGF0YSgpe1xcclxcbiAgIHJldHVybnt9XFxyXFxuIH0gLFxcclxcbiAgIG1ldGhvZHM6e1xcclxcbiAgICBwcm8oKXtcXHJcXG4gICAgICBsb2NhdGlvbi5ocmVmPVxcXCJwcm9kdWN0Lmh0bWxcXFwiXFxyXFxuICAgIH1cXHJcXG4gIH0sXFxyXFxuIG1vdW50ZWQoKXtcXHJcXG5cXHJcXG4gfVxcclxcbn1cXHJcXG48L3NjcmlwdD5cXHJcXG48c3R5bGUgc2NvcGVkPlxcclxcbmRpdntcXHJcXG4gIGZsb2F0OiBsZWZ0O1xcclxcbn1cXHJcXG4ucHJvZHVjdHN7XFxyXFxuICB3aWR0aDogODAlO1xcclxcbiAgbWFyZ2luOiAwIGF1dG87XFxyXFxuICBwYWRkaW5nOiAzMHB4IDEwJSAzMHB4O1xcclxcbiAgYmFja2dyb3VuZDogcmdiKDg5LCA4OSwgODkpO1xcclxcbn1cXHJcXG4ucHJvLWNvbHtcXHJcXG4gIHdpZHRoOiAyNSU7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDMycHg7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbn1cXHJcXG4ucHJvLWdyb3VwLXRpdGxle1xcclxcbiAgZm9udC1zaXplOiAxOHB4O1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgcGFkZGluZzogMTVweCAwO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xcclxcbiAgICBmb250LXdlaWdodDogNDAwO1xcclxcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAyOHB4O1xcclxcbiAgICBmb250LWZhbWlseTog5b6u6L2v6ZuF6buRO1xcclxcbn1cXHJcXG4ucHJvLWdyb3VwLXRpdGxlOjphZnRlcntcXHJcXG4gIGNvbnRlbnQ6IFxcXCIgXFxcIjtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBsZWZ0OiAwO1xcclxcbiAgICBib3R0b206IDA7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDFweDtcXHJcXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM5YjllYTQ7XFxyXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xcclxcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XFxyXFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZVkoLjUpO1xcclxcbiAgICB0cmFuc2Zvcm06IHNjYWxlWSguNSk7XFxyXFxufVxcclxcbi5wcm8tYmxvY2tbZGF0YS12LTBlZjMxNTBlXSB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuLnByby10aHVtYltkYXRhLXYtMGVmMzE1MGVdIHtcXHJcXG4gICAgd2lkdGg6IDUycHg7XFxyXFxuICAgIGhlaWdodDogNTJweDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xcclxcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcclxcbiAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBmbG9hdDogbGVmdDtcXHJcXG59XFxyXFxuLnByby10aXRsZVtkYXRhLXYtMGVmMzE1MGVdIHtcXHJcXG4gICAgY29sb3I6ICNlYWVhZWE7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDIycHg7XFxyXFxuICAgIG1hcmdpbi10b3A6IDhweDtcXHJcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXHJcXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxufVxcclxcbi5wcm8tc3VtbWFyeVtkYXRhLXYtMGVmMzE1MGVdIHtcXHJcXG4gICAgZm9udC1zaXplOiAxMnB4O1xcclxcbiAgICBjb2xvcjogI2NhY2VkNDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxufVxcclxcbi5rYWl0aSB7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBLYWlUaTtcXHJcXG59XFxyXFxuPC9zdHlsZT5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uaGVhZGVyW2RhdGEtdi01YmEwNDdlYl17XFxyXFxuICBoZWlnaHQ6IDcycHg7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxyXFxuICBjb2xvcjogI2ZmZjtcXG59XFxudWxbZGF0YS12LTViYTA0N2ViXSxvbFtkYXRhLXYtNWJhMDQ3ZWJdLGxpW2RhdGEtdi01YmEwNDdlYl17XFxyXFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxyXFxuICBoZWlnaHQ6IDcycHg7XFxyXFxuICBsaW5lLWhlaWdodDogNzJweDtcXHJcXG4gIHBhZGRpbmctbGVmdDogMjBweDtcXG59XFxuYVtkYXRhLXYtNWJhMDQ3ZWJde1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcbi5oZWFkZXI+LmxvZ29bZGF0YS12LTViYTA0N2ViXXtcXHJcXG4gIGZsb2F0OiBsZWZ0O1xcclxcbiAgd2lkdGg6IDgzcHg7XFxyXFxuICBoZWlnaHQ6IDM1cHg7XFxyXFxuICBtYXJnaW4tdG9wOiAxNXB4O1xcclxcbiAgbWFyZ2luLWxlZnQ6IDEwJTtcXHJcXG4gIG1hcmdpbi1yaWdodDogMTUlO1xcbn1cXG4uaGVhZGVyPnVsW2RhdGEtdi01YmEwNDdlYl17XFxyXFxuICB3aWR0aDogYXV0bztcXHJcXG4gIGZsb2F0OiBsZWZ0O1xcclxcbiAgbWFyZ2luLXJpZ2h0OiAxMCU7XFxufVxcbi5oZWFkZXI+dWw+bGlbZGF0YS12LTViYTA0N2ViXXtcXHJcXG4gIGhlaWdodDogNzJweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiA3MnB4O1xcclxcbiAgZmxvYXQ6IGxlZnQ7XFxyXFxuICB3aWR0aDogMTAwcHg7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDIwcHg7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICBmb250LWZhbWlseTog5b6u6L2v6ZuF6buRO1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgY29sb3I6ICNjY2M7XFxufVxcbi5vbmVbZGF0YS12LTViYTA0N2ViXXtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7XFxyXFxuICBiYWNrZ3JvdW5kOiAjMDAwO1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICBoZWlnaHQ6IGF1dG87XFxyXFxuICB3aWR0aDogMTUwcHg7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbiAgei1pbmRleDogOTk5OSAhaW1wb3J0YW50O1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgbWFyZ2luLWxlZnQ6IC0yMHB4O1xcbn1cXG4ub25lPmxpPmFbZGF0YS12LTViYTA0N2ViXXtcXHJcXG4gIGNvbG9yOiAjY2NjO1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG4ub25lPmxpW2RhdGEtdi01YmEwNDdlYl06aG92ZXJ7XFxyXFxuICBiYWNrZ3JvdW5kOiAjNDQ0O1xcbn1cXG4uaGVhZGVyPi5zaG9wcGluZ1tkYXRhLXYtNWJhMDQ3ZWJde1xcclxcbiAgd2lkdGg6IDIwcHg7XFxyXFxuICBoZWlnaHQ6IDIwcHg7XFxyXFxuICBtYXJnaW4tdG9wOiAzMHB4O1xcbn1cXG4ucHJvZHVjdFtkYXRhLXYtNWJhMDQ3ZWJde1xcclxcbiAgei1pbmRleDogOTk5O1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgbGVmdDogMDtcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudC9oZWFkZXJzLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBcUZBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtFQUNBLFdBQUE7QUFDQTtBQUNBO0VBQ0EscUJBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtBQUNBO0FBQ0E7RUFDQSxXQUFBO0VBQ0EscUJBQUE7QUFFQTtBQUNBO0VBQ0EsV0FBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxnQkFBQTtFQUNBLGlCQUFBO0FBQ0E7QUFDQTtFQUNBLFdBQUE7RUFDQSxXQUFBO0VBQ0EsaUJBQUE7QUFDQTtBQUNBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLGVBQUE7RUFDQSxpQkFBQTtFQUNBLGVBQUE7RUFDQSxXQUFBO0FBQ0E7QUFDQTtFQUNBLHNCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxTQUFBO0VBQ0EsVUFBQTtFQUNBLHdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxrQkFBQTtBQUVBO0FBQ0E7RUFDQSxXQUFBO0VBQ0EsZUFBQTtBQUNBO0FBQ0E7RUFDQSxnQkFBQTtBQUNBO0FBQ0E7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0FBQ0E7QUFDQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLE9BQUE7QUFDQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxyXFxuIDxkaXYgY2xhc3M9XFxcImhlYWRlclxcXCI+XFxyXFxuICAgIDxpbWcgc3JjPVxcXCIvaW1nL2xvZ28ucG5nXFxcIiBjbGFzcz1cXFwibG9nb1xcXCI+XFxyXFxuICA8dWw+XFxyXFxuICAgIDxsaT7pppbpobU8L2xpPlxcclxcbiAgICA8bGkgQG1vdXNlZW50ZXI9XFxcImNoYW5nZURvd25cXFwiIEBtb3VzZWxlYXZlPVxcXCJjaGFuZ2VVcFxcXCI+5Lqn5ZOBXFxyXFxuICAgICAgPHByb2R1Y3RzIHYtaWY9XFxcImhpZGVcXFwiPjwvcHJvZHVjdHM+XFxyXFxuICAgIDwvbGk+XFxyXFxuICAgIDxsaSBAbW91c2VlbnRlcj1cXFwiY2hhbmdlRG93bk9uZVxcXCIgQG1vdXNlbGVhdmU9XFxcImNoYW5nZVVwT25lXFxcIj7lqpLkvZNcXHJcXG4gICAgICAgPHVsIHYtaWY9XFxcInNob3dcXFwiIGNsYXNzPVxcXCJvbmVcXFwiPlxcclxcbiAgICAgICAgPGxpID48YSBocmVmPVxcXCJuZXdzLmh0bWxcXFwiPuaWsOmXuzwvYT48L2xpPlxcclxcbiAgICAgICAgPGxpPjxhIGhyZWY9XFxcIiNcXFwiPuinhumikTwvYT48L2xpPlxcclxcbiAgICAgIDwvdWw+XFxyXFxuICAgIDwvbGk+XFxyXFxuICAgIDxsaSBAbW91c2VlbnRlcj1cXFwiY2hhbmdlRG93blR3b1xcXCIgQG1vdXNlbGVhdmU9XFxcImNoYW5nZVVwVHdvXFxcIj7lhbPkuo5cXHJcXG4gICAgICA8dWwgY2xhc3M9XFxcIm9uZVxcXCIgdi1pZj1cXFwic2hvd0Rvd25cXFwiPlxcclxcbiAgICAgICAgPGxpPjxhIGhyZWY9XFxcImFib3V0Lmh0bWxcXFwiPuWTgeeJjOaVheS6izwvYT48L2xpPlxcclxcbiAgICAgICAgPGxpPjxhIGhyZWY9XFxcIiNcXFwiPuWboumYn+S7i+e7jTwvYT48L2xpPlxcclxcbiAgICAgICAgPGxpPuWVhuWKoeWQiOS9nDwvbGk+XFxyXFxuICAgICAgICA8bGk+5bel5L2c5py65LyaPC9saT5cXHJcXG4gICAgICA8L3VsPlxcclxcbiAgICA8L2xpPlxcclxcbiAgICA8bGkgQG1vdXNlZW50ZXI9XFxcImNoYW5nZURvd25UaHJlZVxcXCIgQG1vdXNlbGVhdmU9XFxcImNoYW5nZVVwVGhyZWVcXFwiPuaUr+aMgVxcclxcbiAgICAgIDx1bCBjbGFzcz1cXFwib25lXFxcIiB2LWlmPVxcXCJzaG93VXBcXFwiPlxcclxcbiAgICAgICAgPGxpPuW4uOingemXrumimDwvbGk+XFxyXFxuICAgICAgICA8bGk+5ZSu5ZCO5pyN5YqhPC9saT5cXHJcXG4gICAgICAgIDxsaT7niYjmnYPlo7DmmI48L2xpPlxcclxcbiAgICAgICAgPGxpPumakOengeaUv+etljwvbGk+XFxyXFxuICAgICAgPC91bD5cXHJcXG4gICAgPC9saT5cXHJcXG4gIDwvdWw+XFxyXFxuICA8aW1nIHNyYz1cXFwiL2ltZy9zaG9wcGluZy5wbmdcXFwiIGNsYXNzPVxcXCJzaG9wcGluZ1xcXCI+XFxyXFxuICBcXHJcXG4gPC9kaXY+XFxyXFxuPC90ZW1wbGF0ZT5cXHJcXG48c2NyaXB0PlxcclxcbmltcG9ydCB2dWUgZnJvbSAndnVlJ1xcclxcbmltcG9ydCBwcm9kdWN0cyBmcm9tICcuL3Byb2R1Y3RzLnZ1ZSdcXHJcXG5cXHJcXG5leHBvcnQgZGVmYXVsdCB7XFxyXFxuICBuYW1lOlxcXCJoZWFkZXJzXFxcIixcXHJcXG4gIGRhdGEoKXtcXHJcXG4gICAgcmV0dXJue1xcclxcbiAgICAgIHNob3c6ZmFsc2UsXFxyXFxuICAgICAgc2hvd0Rvd246ZmFsc2UsXFxyXFxuICAgICAgc2hvd1VwOmZhbHNlLFxcclxcbiAgICAgIGhpZGU6ZmFsc2VcXHJcXG4gICAgfVxcclxcbiAgfSxcXHJcXG4gIG1ldGhvZHM6e1xcclxcbiAgICBjaGFuZ2VEb3duT25lOmZ1bmN0aW9uKCl7XFxyXFxuICAgICAgICB0aGlzLnNob3c9dHJ1ZVxcclxcbiAgICAgIFxcclxcbiAgICB9LFxcclxcbiAgICBjaGFuZ2VVcE9uZTpmdW5jdGlvbigpe1xcclxcbiAgICAgIHRoaXMuc2hvdz1mYWxzZVxcclxcbiAgICAgY29uc29sZS5sb2coMTExKTtcXHJcXG4gICAgfSxcXHJcXG4gICAgY2hhbmdlRG93blR3bzpmdW5jdGlvbigpe1xcclxcbiAgICAgIHRoaXMuc2hvd0Rvd249dHJ1ZVxcclxcbiAgICB9LFxcclxcbiAgICBjaGFuZ2VVcFR3bzpmdW5jdGlvbigpe1xcclxcbiAgICAgIHRoaXMuc2hvd0Rvd249ZmFsc2VcXHJcXG4gICAgfSxcXHJcXG4gICAgY2hhbmdlRG93blRocmVlOmZ1bmN0aW9uKCl7XFxyXFxuICAgICAgdGhpcy5zaG93VXA9dHJ1ZVxcclxcbiAgICB9LFxcclxcbiAgICBjaGFuZ2VVcFRocmVlOmZ1bmN0aW9uKCl7XFxyXFxuICAgICAgdGhpcy5zaG93VXA9ZmFsc2VcXHJcXG4gICAgfSxcXHJcXG4gICAgY2hhbmdlRG93bjpmdW5jdGlvbigpe1xcclxcbiAgICAgIHRoaXMuaGlkZT10cnVlXFxyXFxuICAgIH0sXFxyXFxuICAgIGNoYW5nZVVwOmZ1bmN0aW9uKCl7XFxyXFxuICAgICAgdGhpcy5oaWRlPWZhbHNlXFxyXFxuICAgIH1cXHJcXG4gIH0sXFxyXFxuICBtb3VudGVkOntcXHJcXG5cXHJcXG4gIH0sXFxyXFxuICBjb21wb25lbnRzOntwcm9kdWN0c31cXHJcXG4gIFxcclxcbn1cXHJcXG48L3NjcmlwdD5cXHJcXG48c3R5bGUgc2NvcGVkPlxcclxcbi5oZWFkZXJ7XFxyXFxuICBoZWlnaHQ6IDcycHg7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxyXFxuICBjb2xvcjogI2ZmZjtcXHJcXG59XFxyXFxudWwsb2wsbGl7XFxyXFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxyXFxuICBoZWlnaHQ6IDcycHg7XFxyXFxuICBsaW5lLWhlaWdodDogNzJweDtcXHJcXG4gIHBhZGRpbmctbGVmdDogMjBweDtcXHJcXG59XFxyXFxuYXtcXHJcXG4gIGNvbG9yOiAjZmZmO1xcclxcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgXFxyXFxufVxcclxcbi5oZWFkZXI+LmxvZ297XFxyXFxuICBmbG9hdDogbGVmdDtcXHJcXG4gIHdpZHRoOiA4M3B4O1xcclxcbiAgaGVpZ2h0OiAzNXB4O1xcclxcbiAgbWFyZ2luLXRvcDogMTVweDtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAxMCU7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDE1JTtcXHJcXG59XFxyXFxuLmhlYWRlcj51bHtcXHJcXG4gIHdpZHRoOiBhdXRvO1xcclxcbiAgZmxvYXQ6IGxlZnQ7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDEwJTtcXHJcXG59XFxyXFxuLmhlYWRlcj51bD5saXtcXHJcXG4gIGhlaWdodDogNzJweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiA3MnB4O1xcclxcbiAgZmxvYXQ6IGxlZnQ7XFxyXFxuICB3aWR0aDogMTAwcHg7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDIwcHg7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICBmb250LWZhbWlseTog5b6u6L2v6ZuF6buRO1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgY29sb3I6ICNjY2M7XFxyXFxufVxcclxcbi5vbmV7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCAjMDAwO1xcclxcbiAgYmFja2dyb3VuZDogIzAwMDtcXHJcXG4gIGNvbG9yOiAjZmZmO1xcclxcbiAgaGVpZ2h0OiBhdXRvO1xcclxcbiAgd2lkdGg6IDE1MHB4O1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG4gIHotaW5kZXg6IDk5OTkgIWltcG9ydGFudDtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAtMjBweDtcXHJcXG4gIFxcclxcbn1cXHJcXG4ub25lPmxpPmF7XFxyXFxuICBjb2xvcjogI2NjYztcXHJcXG4gIGZvbnQtc2l6ZTogMTZweDtcXHJcXG59XFxyXFxuLm9uZT5saTpob3ZlcntcXHJcXG4gIGJhY2tncm91bmQ6ICM0NDQ7XFxyXFxufVxcclxcbi5oZWFkZXI+LnNob3BwaW5ne1xcclxcbiAgd2lkdGg6IDIwcHg7XFxyXFxuICBoZWlnaHQ6IDIwcHg7XFxyXFxuICBtYXJnaW4tdG9wOiAzMHB4O1xcclxcbn1cXHJcXG4ucHJvZHVjdHtcXHJcXG4gIHotaW5kZXg6IDk5OTtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIGxlZnQ6IDA7XFxyXFxufVxcclxcbjwvc3R5bGU+XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxudWxbZGF0YS12LTU2ODYyZDlkXSxvbFtkYXRhLXYtNTY4NjJkOWRdLGxpW2RhdGEtdi01Njg2MmQ5ZF17XFxyXFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbiAgbWFyZ2luOiAwO1xcbn1cXG5hW2RhdGEtdi01Njg2MmQ5ZF17XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICBjb2xvcjogI2NhY2VkNDtcXG59XFxuYVtkYXRhLXYtNTY4NjJkOWRdOmhvdmVye1xcclxcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5mb290ZXJbZGF0YS12LTU2ODYyZDlkXXtcXHJcXG4gIHdpZHRoOiA4OCU7XFxyXFxuICBiYWNrZ3JvdW5kOiAjNDA0MDQwO1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDEyJTtcXHJcXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcXG59XFxuZGl2W2RhdGEtdi01Njg2MmQ5ZF17XFxyXFxuICBmbG9hdDogbGVmdDtcXG59XFxuLm5ld3NbZGF0YS12LTU2ODYyZDlkXXtcXHJcXG4gIHdpZHRoOiAzMDBweDtcXHJcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICBtYXJnaW4tcmlnaHQ6MTIwcHggO1xcbn1cXG4ubmV3cz5oNFtkYXRhLXYtNTY4NjJkOWRde1xcclxcbiAgaGVpZ2h0OiA0NHB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDQ0cHg7XFxufVxcbi5uZXdzPnVsPmxpW2RhdGEtdi01Njg2MmQ5ZF17XFxyXFxuICB3aWR0aDogMzAwcHg7XFxyXFxuICBoZWlnaHQ6IDQ0cHg7XFxyXFxuICBsaW5lLWhlaWdodDogNDRweDtcXHJcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXHJcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDEyMHB4O1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMnB4O1xcclxcbiAgYm9yZGVyLWJvdHRvbToxcHggZGFzaGVkICM2NTZiNzMgIDtcXG59XFxuLnB1YltkYXRhLXYtNTY4NjJkOWRde1xcclxcbiAgbWFyZ2luLXJpZ2h0OiAxMjBweDtcXG59XFxuLnB1Yj51bD5oNFtkYXRhLXYtNTY4NjJkOWRde1xcclxcbiAgXFxyXFxuICBoZWlnaHQ6IDQ0cHg7XFxyXFxuICBsaW5lLWhlaWdodDogNDRweDtcXHJcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuLnB1Yj51bD5saVtkYXRhLXYtNTY4NjJkOWRde1xcclxcbiAgbGluZS1oZWlnaHQ6IDQ0cHg7XFxyXFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcbi5ib3R0b21bZGF0YS12LTU2ODYyZDlkXXtcXHJcXG4gIGZsb2F0OiBsZWZ0O1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBjb2xvcjogI2NhY2VkNDtcXHJcXG4gIG1hcmdpbjogNTBweCAwIDtcXG59XFxuLmJvdHRvbT5wW2RhdGEtdi01Njg2MmQ5ZF17XFxyXFxuIGZsb2F0OiBsZWZ0O1xcclxcbiBtYXJnaW4tcmlnaHQ6IDEyMHB4O1xcbn1cXG4uZm9vdGVyLWZsb3dbZGF0YS12LTU2ODYyZDlkXXtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmZvb3Rlci1mbG93PmgxW2RhdGEtdi01Njg2MmQ5ZF17XFxyXFxuICBmb250LXNpemU6IDIwcHg7XFxyXFxuICBjb2xvcjogI2ZmZjtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcclxcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxufVxcbi5mb290ZXItZmxvdz5wW2RhdGEtdi01Njg2MmQ5ZF17XFxyXFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuLmZvb3Rlci1jb2RlW2RhdGEtdi01Njg2MmQ5ZF17XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5mb290ZXItY29kZT5pbWdbZGF0YS12LTU2ODYyZDlkXXtcXHJcXG4gIHdpZHRoOiA2MHB4O1xcclxcbiAgaGVpZ2h0OiA2MHB4O1xcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50L2Zvb3RlcnMudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUEwREE7RUFDQSxxQkFBQTtFQUNBLFVBQUE7RUFDQSxTQUFBO0FBQ0E7QUFDQTtFQUNBLHFCQUFBO0VBQ0EsY0FBQTtBQUNBO0FBQ0E7RUFDQSxXQUFBO0FBQ0E7QUFDQTtFQUNBLFVBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0FBQ0E7QUFDQTtFQUNBLFdBQUE7QUFDQTtBQUNBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7QUFHQTtBQUNBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0FBQ0E7QUFDQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxnQkFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtFQUNBLGtDQUFBO0FBQ0E7QUFDQTtFQUNBLG1CQUFBO0FBQ0E7QUFDQTs7RUFFQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxlQUFBO0FBQ0E7QUFDQTtFQUNBLGlCQUFBO0VBQ0EsZUFBQTtBQUNBO0FBQ0E7RUFDQSxXQUFBO0VBQ0EsV0FBQTtFQUNBLGNBQUE7RUFDQSxlQUFBO0FBQ0E7QUFDQTtDQUNBLFdBQUE7Q0FDQSxtQkFBQTtBQUNBO0FBQ0E7RUFDQSxrQkFBQTtBQUNBO0FBQ0E7RUFDQSxlQUFBO0VBQ0EsV0FBQTtFQUNBLGlCQUFBO0VBQ0EsaUJBQUE7QUFDQTtBQUNBO0VBQ0EsaUJBQUE7QUFDQTtBQUNBO0VBQ0Esa0JBQUE7QUFDQTtBQUNBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7QUFFQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxyXFxuICA8ZGl2IGNsYXNzPVxcXCJmb290ZXJcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJuZXdzXFxcIj5cXHJcXG4gICAgICA8dWw+XFxyXFxuICAgICAgICA8aDQ+5paw6Ze7PC9oND5cXHJcXG4gICAgICAgIDxsaT48YSBocmVmPVxcXCIjXFxcIj7lsI/nsbPmnInlk4HkuIrmnrbkuJPkuLrnjKvnjKvni5fni5fmiZPpgKDnmoTigJznrKzkuIDlj7Dppa7msLTmnLrigJ3vvJ/vvIE8L2E+PC9saT5cXHJcXG4gICAgICAgIDxsaT48YSBocmVmPVxcXCIjXFxcIj7pgInmi6nnjKvnjKvni5fni5flrqDnianppa7msLTmnLrvvIzorqnkvaDnmoTniLHlrqDllp3lh7rlgaXlurfvvIzllp3lh7rkuZDotqM8L2E+PC9saT5cXHJcXG4gICAgICAgIDxsaT48YSBocmVmPVxcXCIjXFxcIj7pgInmi6nnjKvnjKvni5fni5flrqDnianppa7msLTmnLrvvIzorqnkvaDnmoTniLHlrqDllp3lh7rlgaXlurfvvIzllp3lh7rkuZDotqM8L2E+PC9saT5cXHJcXG4gICAgICAgIDxsaT48YSBocmVmPVxcXCIjXFxcIj7op6PmlL7pk7LlsY7lrpjvvIznjKvnjKvni5fni5flrqDnianppa7msLTmnLrkvZPpqow8L2E+PC9saT5cXHJcXG4gICAgICA8L3VsPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiAgY2xhc3M9XFxcInB1YlxcXCI+XFxyXFxuICAgICAgPHVsPlxcclxcbiAgICAgICAgPGg0PuWFs+S6juaIkeS7rDwvaDQ+XFxyXFxuICAgICAgICA8bGkgdi1mb3I9XFxcIih2LGluZGV4KSBpbiBhYm91dFxcXCIgOmtleT1cXFwiaW5kZXhcXFwiPjxhIGhyZWY9XFxcIiNcXFwiPnt7dn19PC9hPjwvbGk+XFxyXFxuICAgICAgPC91bD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInB1YlxcXCIgPlxcclxcbiAgICAgIDx1bD5cXHJcXG4gICAgICAgIDxoND7mlK/mjIE8L2g0PlxcclxcbiAgICAgICAgPGxpIHYtZm9yPVxcXCIodixpbmRleCkgaW4gc3VwcG9zZVxcXCIgOmtleT1cXFwiaW5kZXhcXFwiPjxhIGhyZWY9XFxcIiNcXFwiPnt7dn19PC9hPjwvbGk+XFxyXFxuICAgICAgPC91bD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInB1YlxcXCI+XFxyXFxuICAgICAgPHVsPlxcclxcbiAgICAgICAgPGg0PuWFs+azqOaIkeS7rDwvaDQ+XFxyXFxuICAgICAgICA8bGkgdi1mb3I9XFxcIih2LGluZGV4KSBpbiBvdXJzXFxcIiA6a2V5PVxcXCJpbmRleFxcXCI+PGEgaHJlZj1cXFwiI1xcXCI+e3t2fX08L2E+PC9saT5cXHJcXG4gICAgICA8L3VsPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiYm90dG9tXFxcIj5cXHJcXG4gICAgICA8cD5Db3B5cmlnaHQgwqkgMjAxOCBLaXR0ZW4mUHVwcHkgQ28ubHRkIEFsbCByaWdodHMgcmVzZXJ2ZWQuIOS6rElDUOWkhzE4MDQ1MDQ05Y+3LTE8L3A+XFxyXFxuICAgICAgPGRpdiAgc3R5bGU9XFxcImRpc3BsYXk6IGZsZXg7XFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInRleHQtcmlnaHQgZm9vdGVyLWZsb3dcXFwiIHN0eWxlPVxcXCJwYWRkaW5nLXJpZ2h0OiAyMHB4OyBtYXJnaW4tdG9wOiAtMnB4O1xcXCI+XFxyXFxuICAgICAgICAgIDxoMSAgY2xhc3M9XFxcImZsb3ctZm9udFxcXCI+NDAwLTk5OS0yMjUwPC9oMT5cXHJcXG4gICAgICAgICAgPHAgIGNsYXNzPVxcXCJmbG93LXRpdGxlXFxcIj7lkajkuIDliLDlkajml6U5OjAwLTIyOjAwPC9wPlxcclxcbiAgICAgICAgICA8cCAgY2xhc3M9XFxcImZsb3ctdGl0bGVcXFwiPijku4XmlLbluILor53otLkpPC9wPlxcclxcbiAgICAgICAgICA8cCAgY2xhc3M9XFxcImZsb3ctdGl0bGVcXFwiPuWVhuWKoemCrueuse+8mmJ1c2luZXNzQG1tZ2cuZnVuPC9wPlxcclxcbiAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgPGRpdiAgY2xhc3M9XFxcImZvb3Rlci1jb2RlXFxcIj5cXHJcXG4gICAgICAgICAgICA8aW1nICBzcmM9XFxcIi9pbWcvcHVibGljLWFjY291bnQuMzdmZDFmOTUucG5nXFxcIiBhbHQ9XFxcIlxcXCIgY2xhc3M9XFxcImltZy1jb2RlXFxcIj5cXHJcXG4gICAgICAgICAgICA8cCAgY2xhc3M9XFxcImNvZGUtdGl0bGVcXFwiPuaJq+eggeWFs+azqOWumOaWueW+ruS/oTwvcD5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2Rpdj5cXHJcXG48L3RlbXBsYXRlPlxcclxcbjxzY3JpcHQ+XFxyXFxuZXhwb3J0IGRlZmF1bHQge1xcclxcbiAgZGF0YSgpe1xcclxcbiAgICByZXR1cm57XFxyXFxuICAgICAgYWJvdXQ6W1xcXCLlk4HniYzmlYXkuotcXFwiLFxcXCLlm6LpmJ/ku4vnu41cXFwiLFxcXCLllYbliqHlkIjkvZxcXFwiLFxcXCLlt6XkvZzmnLrkvJpcXFwiXSxcXHJcXG4gICAgICBzdXBwb3NlOltcXFwi5bi46KeB6Zeu6aKYXFxcIixcXFwi5ZSu5ZCO5pyN5YqhXFxcIixcXFwi54mI5p2D5aOw5piOXFxcIixcXFwi6ZqQ56eB5pS/562WXFxcIl0sXFxyXFxuICAgICAgb3VyczpbXFxcIuWumOaWueW+ruS/oVxcXCIsXFxcIuaWsOa1quW+ruWNmlxcXCIsXFxcIuS4gOaXpeeMq1xcXCJdXFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XFxyXFxuPC9zY3JpcHQ+XFxyXFxuPHN0eWxlIHNjb3BlZD5cXHJcXG51bCxvbCxsaXtcXHJcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVxcclxcbmF7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICBjb2xvcjogI2NhY2VkNDtcXHJcXG59XFxyXFxuYTpob3ZlcntcXHJcXG4gIGNvbG9yOiAjZmZmO1xcclxcbn1cXHJcXG4uZm9vdGVye1xcclxcbiAgd2lkdGg6IDg4JTtcXHJcXG4gIGJhY2tncm91bmQ6ICM0MDQwNDA7XFxyXFxuICBjb2xvcjogI2ZmZjtcXHJcXG4gIHBhZGRpbmctbGVmdDogMTIlO1xcclxcbiAgcGFkZGluZy10b3A6IDEwMHB4O1xcclxcbn1cXHJcXG5kaXZ7XFxyXFxuICBmbG9hdDogbGVmdDtcXHJcXG59XFxyXFxuLm5ld3N7XFxyXFxuICB3aWR0aDogMzAwcHg7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgbWFyZ2luLXJpZ2h0OjEyMHB4IDtcXHJcXG5cXHJcXG5cXHJcXG59XFxyXFxuLm5ld3M+aDR7XFxyXFxuICBoZWlnaHQ6IDQ0cHg7XFxyXFxuICBsaW5lLWhlaWdodDogNDRweDtcXHJcXG59XFxyXFxuLm5ld3M+dWw+bGl7XFxyXFxuICB3aWR0aDogMzAwcHg7XFxyXFxuICBoZWlnaHQ6IDQ0cHg7XFxyXFxuICBsaW5lLWhlaWdodDogNDRweDtcXHJcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXHJcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDEyMHB4O1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMnB4O1xcclxcbiAgYm9yZGVyLWJvdHRvbToxcHggZGFzaGVkICM2NTZiNzMgIDtcXHJcXG59XFxyXFxuLnB1YntcXHJcXG4gIG1hcmdpbi1yaWdodDogMTIwcHg7XFxyXFxufVxcclxcbi5wdWI+dWw+aDR7XFxyXFxuICBcXHJcXG4gIGhlaWdodDogNDRweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiA0NHB4O1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbn1cXHJcXG4ucHViPnVsPmxpe1xcclxcbiAgbGluZS1oZWlnaHQ6IDQ0cHg7XFxyXFxuICBmb250LXNpemU6IDE0cHg7XFxyXFxufVxcclxcbi5ib3R0b217XFxyXFxuICBmbG9hdDogbGVmdDtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgY29sb3I6ICNjYWNlZDQ7XFxyXFxuICBtYXJnaW46IDUwcHggMCA7XFxyXFxufVxcclxcbi5ib3R0b20+cHtcXHJcXG4gZmxvYXQ6IGxlZnQ7XFxyXFxuIG1hcmdpbi1yaWdodDogMTIwcHg7XFxyXFxufVxcclxcbi5mb290ZXItZmxvd3tcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuLmZvb3Rlci1mbG93Pmgxe1xcclxcbiAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICBsaW5lLWhlaWdodDogMzBweDtcXHJcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbn1cXHJcXG4uZm9vdGVyLWZsb3c+cHtcXHJcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbn1cXHJcXG4uZm9vdGVyLWNvZGV7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcbi5mb290ZXItY29kZT5pbWd7XFxyXFxuICB3aWR0aDogNjBweDtcXHJcXG4gIGhlaWdodDogNjBweDtcXHJcXG4gIFxcclxcbn1cXHJcXG48L3N0eWxlPlwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVhZGVyXCIgfSwgW1xuICAgIF9jKFwiaW1nXCIsIHsgc3RhdGljQ2xhc3M6IFwibG9nb1wiLCBhdHRyczogeyBzcmM6IFwiL2ltZy9sb2dvLnBuZ1wiIH0gfSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcInVsXCIsIFtcbiAgICAgIF9jKFwibGlcIiwgW192bS5fdihcIummlumhtVwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImxpXCIsXG4gICAgICAgIHsgb246IHsgbW91c2VlbnRlcjogX3ZtLmNoYW5nZURvd24sIG1vdXNlbGVhdmU6IF92bS5jaGFuZ2VVcCB9IH0sXG4gICAgICAgIFtfdm0uX3YoXCLkuqflk4FcXG4gICAgIFwiKSwgX3ZtLmhpZGUgPyBfYyhcInByb2R1Y3RzXCIpIDogX3ZtLl9lKCldLFxuICAgICAgICAxXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImxpXCIsXG4gICAgICAgIHsgb246IHsgbW91c2VlbnRlcjogX3ZtLmNoYW5nZURvd25PbmUsIG1vdXNlbGVhdmU6IF92bS5jaGFuZ2VVcE9uZSB9IH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfdm0uX3YoXCLlqpLkvZNcXG4gICAgICBcIiksXG4gICAgICAgICAgX3ZtLnNob3dcbiAgICAgICAgICAgID8gX2MoXCJ1bFwiLCB7IHN0YXRpY0NsYXNzOiBcIm9uZVwiIH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX20oMCksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfdm0uX20oMSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIDogX3ZtLl9lKClcbiAgICAgICAgXVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICB7IG9uOiB7IG1vdXNlZW50ZXI6IF92bS5jaGFuZ2VEb3duVHdvLCBtb3VzZWxlYXZlOiBfdm0uY2hhbmdlVXBUd28gfSB9LFxuICAgICAgICBbXG4gICAgICAgICAgX3ZtLl92KFwi5YWz5LqOXFxuICAgICBcIiksXG4gICAgICAgICAgX3ZtLnNob3dEb3duXG4gICAgICAgICAgICA/IF9jKFwidWxcIiwgeyBzdGF0aWNDbGFzczogXCJvbmVcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl9tKDIpLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX3ZtLl9tKDMpLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbX3ZtLl92KFwi5ZWG5Yqh5ZCI5L2cXCIpXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtfdm0uX3YoXCLlt6XkvZzmnLrkvJpcIildKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImxpXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBvbjogeyBtb3VzZWVudGVyOiBfdm0uY2hhbmdlRG93blRocmVlLCBtb3VzZWxlYXZlOiBfdm0uY2hhbmdlVXBUaHJlZSB9XG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfdm0uX3YoXCLmlK/mjIFcXG4gICAgIFwiKSxcbiAgICAgICAgICBfdm0uc2hvd1VwXG4gICAgICAgICAgICA/IF9jKFwidWxcIiwgeyBzdGF0aWNDbGFzczogXCJvbmVcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbX3ZtLl92KFwi5bi46KeB6Zeu6aKYXCIpXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtfdm0uX3YoXCLllK7lkI7mnI3liqFcIildKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgW192bS5fdihcIueJiOadg+WjsOaYjlwiKV0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbX3ZtLl92KFwi6ZqQ56eB5pS/562WXCIpXSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIDogX3ZtLl9lKClcbiAgICAgICAgXVxuICAgICAgKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJpbWdcIiwgeyBzdGF0aWNDbGFzczogXCJzaG9wcGluZ1wiLCBhdHRyczogeyBzcmM6IFwiL2ltZy9zaG9wcGluZy5wbmdcIiB9IH0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImxpXCIsIFtcbiAgICAgIF9jKFwiYVwiLCB7IGF0dHJzOiB7IGhyZWY6IFwibmV3cy5odG1sXCIgfSB9LCBbX3ZtLl92KFwi5paw6Ze7XCIpXSlcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImxpXCIsIFtfYyhcImFcIiwgeyBhdHRyczogeyBocmVmOiBcIiNcIiB9IH0sIFtfdm0uX3YoXCLop4bpopFcIildKV0pXG4gIH0sXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwibGlcIiwgW1xuICAgICAgX2MoXCJhXCIsIHsgYXR0cnM6IHsgaHJlZjogXCJhYm91dC5odG1sXCIgfSB9LCBbX3ZtLl92KFwi5ZOB54mM5pWF5LqLXCIpXSlcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImxpXCIsIFtfYyhcImFcIiwgeyBhdHRyczogeyBocmVmOiBcIiNcIiB9IH0sIFtfdm0uX3YoXCLlm6LpmJ/ku4vnu41cIildKV0pXG4gIH1cbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2hlYWRlcnMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaGVhZGVycy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCI8dGVtcGxhdGU+XHJcbiA8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+XHJcbiAgICA8aW1nIHNyYz1cIi9pbWcvbG9nby5wbmdcIiBjbGFzcz1cImxvZ29cIj5cclxuICA8dWw+XHJcbiAgICA8bGk+6aaW6aG1PC9saT5cclxuICAgIDxsaSBAbW91c2VlbnRlcj1cImNoYW5nZURvd25cIiBAbW91c2VsZWF2ZT1cImNoYW5nZVVwXCI+5Lqn5ZOBXHJcbiAgICAgIDxwcm9kdWN0cyB2LWlmPVwiaGlkZVwiPjwvcHJvZHVjdHM+XHJcbiAgICA8L2xpPlxyXG4gICAgPGxpIEBtb3VzZWVudGVyPVwiY2hhbmdlRG93bk9uZVwiIEBtb3VzZWxlYXZlPVwiY2hhbmdlVXBPbmVcIj7lqpLkvZNcclxuICAgICAgIDx1bCB2LWlmPVwic2hvd1wiIGNsYXNzPVwib25lXCI+XHJcbiAgICAgICAgPGxpID48YSBocmVmPVwibmV3cy5odG1sXCI+5paw6Ze7PC9hPjwvbGk+XHJcbiAgICAgICAgPGxpPjxhIGhyZWY9XCIjXCI+6KeG6aKRPC9hPjwvbGk+XHJcbiAgICAgIDwvdWw+XHJcbiAgICA8L2xpPlxyXG4gICAgPGxpIEBtb3VzZWVudGVyPVwiY2hhbmdlRG93blR3b1wiIEBtb3VzZWxlYXZlPVwiY2hhbmdlVXBUd29cIj7lhbPkuo5cclxuICAgICAgPHVsIGNsYXNzPVwib25lXCIgdi1pZj1cInNob3dEb3duXCI+XHJcbiAgICAgICAgPGxpPjxhIGhyZWY9XCJhYm91dC5odG1sXCI+5ZOB54mM5pWF5LqLPC9hPjwvbGk+XHJcbiAgICAgICAgPGxpPjxhIGhyZWY9XCIjXCI+5Zui6Zif5LuL57uNPC9hPjwvbGk+XHJcbiAgICAgICAgPGxpPuWVhuWKoeWQiOS9nDwvbGk+XHJcbiAgICAgICAgPGxpPuW3peS9nOacuuS8mjwvbGk+XHJcbiAgICAgIDwvdWw+XHJcbiAgICA8L2xpPlxyXG4gICAgPGxpIEBtb3VzZWVudGVyPVwiY2hhbmdlRG93blRocmVlXCIgQG1vdXNlbGVhdmU9XCJjaGFuZ2VVcFRocmVlXCI+5pSv5oyBXHJcbiAgICAgIDx1bCBjbGFzcz1cIm9uZVwiIHYtaWY9XCJzaG93VXBcIj5cclxuICAgICAgICA8bGk+5bi46KeB6Zeu6aKYPC9saT5cclxuICAgICAgICA8bGk+5ZSu5ZCO5pyN5YqhPC9saT5cclxuICAgICAgICA8bGk+54mI5p2D5aOw5piOPC9saT5cclxuICAgICAgICA8bGk+6ZqQ56eB5pS/562WPC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvbGk+XHJcbiAgPC91bD5cclxuICA8aW1nIHNyYz1cIi9pbWcvc2hvcHBpbmcucG5nXCIgY2xhc3M9XCJzaG9wcGluZ1wiPlxyXG4gIFxyXG4gPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmltcG9ydCB2dWUgZnJvbSAndnVlJ1xyXG5pbXBvcnQgcHJvZHVjdHMgZnJvbSAnLi9wcm9kdWN0cy52dWUnXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgbmFtZTpcImhlYWRlcnNcIixcclxuICBkYXRhKCl7XHJcbiAgICByZXR1cm57XHJcbiAgICAgIHNob3c6ZmFsc2UsXHJcbiAgICAgIHNob3dEb3duOmZhbHNlLFxyXG4gICAgICBzaG93VXA6ZmFsc2UsXHJcbiAgICAgIGhpZGU6ZmFsc2VcclxuICAgIH1cclxuICB9LFxyXG4gIG1ldGhvZHM6e1xyXG4gICAgY2hhbmdlRG93bk9uZTpmdW5jdGlvbigpe1xyXG4gICAgICAgIHRoaXMuc2hvdz10cnVlXHJcbiAgICAgIFxyXG4gICAgfSxcclxuICAgIGNoYW5nZVVwT25lOmZ1bmN0aW9uKCl7XHJcbiAgICAgIHRoaXMuc2hvdz1mYWxzZVxyXG4gICAgIGNvbnNvbGUubG9nKDExMSk7XHJcbiAgICB9LFxyXG4gICAgY2hhbmdlRG93blR3bzpmdW5jdGlvbigpe1xyXG4gICAgICB0aGlzLnNob3dEb3duPXRydWVcclxuICAgIH0sXHJcbiAgICBjaGFuZ2VVcFR3bzpmdW5jdGlvbigpe1xyXG4gICAgICB0aGlzLnNob3dEb3duPWZhbHNlXHJcbiAgICB9LFxyXG4gICAgY2hhbmdlRG93blRocmVlOmZ1bmN0aW9uKCl7XHJcbiAgICAgIHRoaXMuc2hvd1VwPXRydWVcclxuICAgIH0sXHJcbiAgICBjaGFuZ2VVcFRocmVlOmZ1bmN0aW9uKCl7XHJcbiAgICAgIHRoaXMuc2hvd1VwPWZhbHNlXHJcbiAgICB9LFxyXG4gICAgY2hhbmdlRG93bjpmdW5jdGlvbigpe1xyXG4gICAgICB0aGlzLmhpZGU9dHJ1ZVxyXG4gICAgfSxcclxuICAgIGNoYW5nZVVwOmZ1bmN0aW9uKCl7XHJcbiAgICAgIHRoaXMuaGlkZT1mYWxzZVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgbW91bnRlZDp7XHJcblxyXG4gIH0sXHJcbiAgY29tcG9uZW50czp7cHJvZHVjdHN9XHJcbiAgXHJcbn1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBzY29wZWQ+XHJcbi5oZWFkZXJ7XHJcbiAgaGVpZ2h0OiA3MnB4O1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGJhY2tncm91bmQ6ICMwMDA7XHJcbiAgY29sb3I6ICNmZmY7XHJcbn1cclxudWwsb2wsbGl7XHJcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xyXG4gIGhlaWdodDogNzJweDtcclxuICBsaW5lLWhlaWdodDogNzJweDtcclxuICBwYWRkaW5nLWxlZnQ6IDIwcHg7XHJcbn1cclxuYXtcclxuICBjb2xvcjogI2ZmZjtcclxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgXHJcbn1cclxuLmhlYWRlcj4ubG9nb3tcclxuICBmbG9hdDogbGVmdDtcclxuICB3aWR0aDogODNweDtcclxuICBoZWlnaHQ6IDM1cHg7XHJcbiAgbWFyZ2luLXRvcDogMTVweDtcclxuICBtYXJnaW4tbGVmdDogMTAlO1xyXG4gIG1hcmdpbi1yaWdodDogMTUlO1xyXG59XHJcbi5oZWFkZXI+dWx7XHJcbiAgd2lkdGg6IGF1dG87XHJcbiAgZmxvYXQ6IGxlZnQ7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxMCU7XHJcbn1cclxuLmhlYWRlcj51bD5saXtcclxuICBoZWlnaHQ6IDcycHg7XHJcbiAgbGluZS1oZWlnaHQ6IDcycHg7XHJcbiAgZmxvYXQ6IGxlZnQ7XHJcbiAgd2lkdGg6IDEwMHB4O1xyXG4gIHBhZGRpbmctbGVmdDogMjBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgZm9udC1mYW1pbHk6IOW+rui9r+mbhem7kTtcclxuICBmb250LXNpemU6IDE2cHg7XHJcbiAgY29sb3I6ICNjY2M7XHJcbn1cclxuLm9uZXtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjMDAwO1xyXG4gIGJhY2tncm91bmQ6ICMwMDA7XHJcbiAgY29sb3I6ICNmZmY7XHJcbiAgaGVpZ2h0OiBhdXRvO1xyXG4gIHdpZHRoOiAxNTBweDtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMDtcclxuICB6LWluZGV4OiA5OTk5ICFpbXBvcnRhbnQ7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIG1hcmdpbi1sZWZ0OiAtMjBweDtcclxuICBcclxufVxyXG4ub25lPmxpPmF7XHJcbiAgY29sb3I6ICNjY2M7XHJcbiAgZm9udC1zaXplOiAxNnB4O1xyXG59XHJcbi5vbmU+bGk6aG92ZXJ7XHJcbiAgYmFja2dyb3VuZDogIzQ0NDtcclxufVxyXG4uaGVhZGVyPi5zaG9wcGluZ3tcclxuICB3aWR0aDogMjBweDtcclxuICBoZWlnaHQ6IDIwcHg7XHJcbiAgbWFyZ2luLXRvcDogMzBweDtcclxufVxyXG4ucHJvZHVjdHtcclxuICB6LWluZGV4OiA5OTk7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIGxlZnQ6IDA7XHJcbn1cclxuPC9zdHlsZT4iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9oZWFkZXJzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTViYTA0N2ViJnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vaGVhZGVycy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NWJhMDQ3ZWImc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaGVhZGVycy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2hlYWRlcnMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL2hlYWRlcnMudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NWJhMDQ3ZWImc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjViYTA0N2ViXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcTGlua1xcXFx3ZWJcXFxc54yr54yr54uX54uX56eR5oqAXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzViYTA0N2ViJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzViYTA0N2ViJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzViYTA0N2ViJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9oZWFkZXJzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01YmEwNDdlYiZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc1YmEwNDdlYicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2NvbXBvbmVudC9oZWFkZXJzLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmb290ZXJcIiB9LCBbXG4gICAgX3ZtLl9tKDApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJwdWJcIiB9LCBbXG4gICAgICBfYyhcbiAgICAgICAgXCJ1bFwiLFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJoNFwiLCBbX3ZtLl92KFwi5YWz5LqO5oiR5LusXCIpXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfdm0uX2woX3ZtLmFib3V0LCBmdW5jdGlvbih2LCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jKFwibGlcIiwgeyBrZXk6IGluZGV4IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJhXCIsIHsgYXR0cnM6IHsgaHJlZjogXCIjXCIgfSB9LCBbX3ZtLl92KF92bS5fcyh2KSldKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICB9KVxuICAgICAgICBdLFxuICAgICAgICAyXG4gICAgICApXG4gICAgXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInB1YlwiIH0sIFtcbiAgICAgIF9jKFxuICAgICAgICBcInVsXCIsXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcImg0XCIsIFtfdm0uX3YoXCLmlK/mjIFcIildKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF92bS5fbChfdm0uc3VwcG9zZSwgZnVuY3Rpb24odiwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBfYyhcImxpXCIsIHsga2V5OiBpbmRleCB9LCBbXG4gICAgICAgICAgICAgIF9jKFwiYVwiLCB7IGF0dHJzOiB7IGhyZWY6IFwiI1wiIH0gfSwgW192bS5fdihfdm0uX3ModikpXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgfSlcbiAgICAgICAgXSxcbiAgICAgICAgMlxuICAgICAgKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJwdWJcIiB9LCBbXG4gICAgICBfYyhcbiAgICAgICAgXCJ1bFwiLFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJoNFwiLCBbX3ZtLl92KFwi5YWz5rOo5oiR5LusXCIpXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfdm0uX2woX3ZtLm91cnMsIGZ1bmN0aW9uKHYsIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gX2MoXCJsaVwiLCB7IGtleTogaW5kZXggfSwgW1xuICAgICAgICAgICAgICBfYyhcImFcIiwgeyBhdHRyczogeyBocmVmOiBcIiNcIiB9IH0sIFtfdm0uX3YoX3ZtLl9zKHYpKV0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIH0pXG4gICAgICAgIF0sXG4gICAgICAgIDJcbiAgICAgIClcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS5fbSgxKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJuZXdzXCIgfSwgW1xuICAgICAgX2MoXCJ1bFwiLCBbXG4gICAgICAgIF9jKFwiaDRcIiwgW192bS5fdihcIuaWsOmXu1wiKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICBfYyhcImFcIiwgeyBhdHRyczogeyBocmVmOiBcIiNcIiB9IH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcIuWwj+exs+acieWTgeS4iuaetuS4k+S4uueMq+eMq+eLl+eLl+aJk+mAoOeahOKAnOesrOS4gOWPsOmlruawtOacuuKAne+8n++8gVwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICBfYyhcImFcIiwgeyBhdHRyczogeyBocmVmOiBcIiNcIiB9IH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcIumAieaLqeeMq+eMq+eLl+eLl+WuoOeJqemlruawtOacuu+8jOiuqeS9oOeahOeIseWuoOWWneWHuuWBpeW6t++8jOWWneWHuuS5kOi2o1wiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICBfYyhcImFcIiwgeyBhdHRyczogeyBocmVmOiBcIiNcIiB9IH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcIumAieaLqeeMq+eMq+eLl+eLl+WuoOeJqemlruawtOacuu+8jOiuqeS9oOeahOeIseWuoOWWneWHuuWBpeW6t++8jOWWneWHuuS5kOi2o1wiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICBfYyhcImFcIiwgeyBhdHRyczogeyBocmVmOiBcIiNcIiB9IH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcIuino+aUvumTsuWxjuWumO+8jOeMq+eMq+eLl+eLl+WuoOeJqemlruawtOacuuS9k+mqjFwiKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICBdKVxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYm90dG9tXCIgfSwgW1xuICAgICAgX2MoXCJwXCIsIFtcbiAgICAgICAgX3ZtLl92KFxuICAgICAgICAgIFwiQ29weXJpZ2h0IMKpIDIwMTggS2l0dGVuJlB1cHB5IENvLmx0ZCBBbGwgcmlnaHRzIHJlc2VydmVkLiDkuqxJQ1DlpIcxODA0NTA0NOWPty0xXCJcbiAgICAgICAgKVxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNTdHlsZTogeyBkaXNwbGF5OiBcImZsZXhcIiB9IH0sIFtcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJ0ZXh0LXJpZ2h0IGZvb3Rlci1mbG93XCIsXG4gICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBcInBhZGRpbmctcmlnaHRcIjogXCIyMHB4XCIsIFwibWFyZ2luLXRvcFwiOiBcIi0ycHhcIiB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcImgxXCIsIHsgc3RhdGljQ2xhc3M6IFwiZmxvdy1mb250XCIgfSwgW192bS5fdihcIjQwMC05OTktMjI1MFwiKV0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImZsb3ctdGl0bGVcIiB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihcIuWRqOS4gOWIsOWRqOaXpTk6MDAtMjI6MDBcIilcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImZsb3ctdGl0bGVcIiB9LCBbX3ZtLl92KFwiKOS7heaUtuW4guivnei0uSlcIildKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJmbG93LXRpdGxlXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCLllYbliqHpgq7nrrHvvJpidXNpbmVzc0BtbWdnLmZ1blwiKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9vdGVyLWNvZGVcIiB9LCBbXG4gICAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiaW1nLWNvZGVcIixcbiAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogXCIvaW1nL3B1YmxpYy1hY2NvdW50LjM3ZmQxZjk1LnBuZ1wiLCBhbHQ6IFwiXCIgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiY29kZS10aXRsZVwiIH0sIFtfdm0uX3YoXCLmiavnoIHlhbPms6jlrpjmlrnlvq7kv6FcIildKVxuICAgICAgICBdKVxuICAgICAgXSlcbiAgICBdKVxuICB9XG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IGNsYXNzPVwiZm9vdGVyXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwibmV3c1wiPlxyXG4gICAgICA8dWw+XHJcbiAgICAgICAgPGg0PuaWsOmXuzwvaDQ+XHJcbiAgICAgICAgPGxpPjxhIGhyZWY9XCIjXCI+5bCP57Gz5pyJ5ZOB5LiK5p625LiT5Li654yr54yr54uX54uX5omT6YCg55qE4oCc56ys5LiA5Y+w6aWu5rC05py64oCd77yf77yBPC9hPjwvbGk+XHJcbiAgICAgICAgPGxpPjxhIGhyZWY9XCIjXCI+6YCJ5oup54yr54yr54uX54uX5a6g54mp6aWu5rC05py677yM6K6p5L2g55qE54ix5a6g5Zad5Ye65YGl5bq377yM5Zad5Ye65LmQ6LajPC9hPjwvbGk+XHJcbiAgICAgICAgPGxpPjxhIGhyZWY9XCIjXCI+6YCJ5oup54yr54yr54uX54uX5a6g54mp6aWu5rC05py677yM6K6p5L2g55qE54ix5a6g5Zad5Ye65YGl5bq377yM5Zad5Ye65LmQ6LajPC9hPjwvbGk+XHJcbiAgICAgICAgPGxpPjxhIGhyZWY9XCIjXCI+6Kej5pS+6ZOy5bGO5a6Y77yM54yr54yr54uX54uX5a6g54mp6aWu5rC05py65L2T6aqMPC9hPjwvbGk+XHJcbiAgICAgIDwvdWw+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgIGNsYXNzPVwicHViXCI+XHJcbiAgICAgIDx1bD5cclxuICAgICAgICA8aDQ+5YWz5LqO5oiR5LusPC9oND5cclxuICAgICAgICA8bGkgdi1mb3I9XCIodixpbmRleCkgaW4gYWJvdXRcIiA6a2V5PVwiaW5kZXhcIj48YSBocmVmPVwiI1wiPnt7dn19PC9hPjwvbGk+XHJcbiAgICAgIDwvdWw+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJwdWJcIiA+XHJcbiAgICAgIDx1bD5cclxuICAgICAgICA8aDQ+5pSv5oyBPC9oND5cclxuICAgICAgICA8bGkgdi1mb3I9XCIodixpbmRleCkgaW4gc3VwcG9zZVwiIDprZXk9XCJpbmRleFwiPjxhIGhyZWY9XCIjXCI+e3t2fX08L2E+PC9saT5cclxuICAgICAgPC91bD5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cInB1YlwiPlxyXG4gICAgICA8dWw+XHJcbiAgICAgICAgPGg0PuWFs+azqOaIkeS7rDwvaDQ+XHJcbiAgICAgICAgPGxpIHYtZm9yPVwiKHYsaW5kZXgpIGluIG91cnNcIiA6a2V5PVwiaW5kZXhcIj48YSBocmVmPVwiI1wiPnt7dn19PC9hPjwvbGk+XHJcbiAgICAgIDwvdWw+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJib3R0b21cIj5cclxuICAgICAgPHA+Q29weXJpZ2h0IMKpIDIwMTggS2l0dGVuJlB1cHB5IENvLmx0ZCBBbGwgcmlnaHRzIHJlc2VydmVkLiDkuqxJQ1DlpIcxODA0NTA0NOWPty0xPC9wPlxyXG4gICAgICA8ZGl2ICBzdHlsZT1cImRpc3BsYXk6IGZsZXg7XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtcmlnaHQgZm9vdGVyLWZsb3dcIiBzdHlsZT1cInBhZGRpbmctcmlnaHQ6IDIwcHg7IG1hcmdpbi10b3A6IC0ycHg7XCI+XHJcbiAgICAgICAgICA8aDEgIGNsYXNzPVwiZmxvdy1mb250XCI+NDAwLTk5OS0yMjUwPC9oMT5cclxuICAgICAgICAgIDxwICBjbGFzcz1cImZsb3ctdGl0bGVcIj7lkajkuIDliLDlkajml6U5OjAwLTIyOjAwPC9wPlxyXG4gICAgICAgICAgPHAgIGNsYXNzPVwiZmxvdy10aXRsZVwiPijku4XmlLbluILor53otLkpPC9wPlxyXG4gICAgICAgICAgPHAgIGNsYXNzPVwiZmxvdy10aXRsZVwiPuWVhuWKoemCrueuse+8mmJ1c2luZXNzQG1tZ2cuZnVuPC9wPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2ICBjbGFzcz1cImZvb3Rlci1jb2RlXCI+XHJcbiAgICAgICAgICAgIDxpbWcgIHNyYz1cIi9pbWcvcHVibGljLWFjY291bnQuMzdmZDFmOTUucG5nXCIgYWx0PVwiXCIgY2xhc3M9XCJpbWctY29kZVwiPlxyXG4gICAgICAgICAgICA8cCAgY2xhc3M9XCJjb2RlLXRpdGxlXCI+5omr56CB5YWz5rOo5a6Y5pa55b6u5L+hPC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGRhdGEoKXtcclxuICAgIHJldHVybntcclxuICAgICAgYWJvdXQ6W1wi5ZOB54mM5pWF5LqLXCIsXCLlm6LpmJ/ku4vnu41cIixcIuWVhuWKoeWQiOS9nFwiLFwi5bel5L2c5py65LyaXCJdLFxyXG4gICAgICBzdXBwb3NlOltcIuW4uOingemXrumimFwiLFwi5ZSu5ZCO5pyN5YqhXCIsXCLniYjmnYPlo7DmmI5cIixcIumakOengeaUv+etllwiXSxcclxuICAgICAgb3VyczpbXCLlrpjmlrnlvq7kv6FcIixcIuaWsOa1quW+ruWNmlwiLFwi5LiA5pel54yrXCJdXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgc2NvcGVkPlxyXG51bCxvbCxsaXtcclxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XHJcbiAgcGFkZGluZzogMDtcclxuICBtYXJnaW46IDA7XHJcbn1cclxuYXtcclxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgY29sb3I6ICNjYWNlZDQ7XHJcbn1cclxuYTpob3ZlcntcclxuICBjb2xvcjogI2ZmZjtcclxufVxyXG4uZm9vdGVye1xyXG4gIHdpZHRoOiA4OCU7XHJcbiAgYmFja2dyb3VuZDogIzQwNDA0MDtcclxuICBjb2xvcjogI2ZmZjtcclxuICBwYWRkaW5nLWxlZnQ6IDEyJTtcclxuICBwYWRkaW5nLXRvcDogMTAwcHg7XHJcbn1cclxuZGl2e1xyXG4gIGZsb2F0OiBsZWZ0O1xyXG59XHJcbi5uZXdze1xyXG4gIHdpZHRoOiAzMDBweDtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIG1hcmdpbi1yaWdodDoxMjBweCA7XHJcblxyXG5cclxufVxyXG4ubmV3cz5oNHtcclxuICBoZWlnaHQ6IDQ0cHg7XHJcbiAgbGluZS1oZWlnaHQ6IDQ0cHg7XHJcbn1cclxuLm5ld3M+dWw+bGl7XHJcbiAgd2lkdGg6IDMwMHB4O1xyXG4gIGhlaWdodDogNDRweDtcclxuICBsaW5lLWhlaWdodDogNDRweDtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIG1hcmdpbi1yaWdodDogMTIwcHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMnB4O1xyXG4gIGJvcmRlci1ib3R0b206MXB4IGRhc2hlZCAjNjU2YjczICA7XHJcbn1cclxuLnB1YntcclxuICBtYXJnaW4tcmlnaHQ6IDEyMHB4O1xyXG59XHJcbi5wdWI+dWw+aDR7XHJcbiAgXHJcbiAgaGVpZ2h0OiA0NHB4O1xyXG4gIGxpbmUtaGVpZ2h0OiA0NHB4O1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxufVxyXG4ucHViPnVsPmxpe1xyXG4gIGxpbmUtaGVpZ2h0OiA0NHB4O1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxufVxyXG4uYm90dG9te1xyXG4gIGZsb2F0OiBsZWZ0O1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGNvbG9yOiAjY2FjZWQ0O1xyXG4gIG1hcmdpbjogNTBweCAwIDtcclxufVxyXG4uYm90dG9tPnB7XHJcbiBmbG9hdDogbGVmdDtcclxuIG1hcmdpbi1yaWdodDogMTIwcHg7XHJcbn1cclxuLmZvb3Rlci1mbG93e1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxufVxyXG4uZm9vdGVyLWZsb3c+aDF7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGNvbG9yOiAjZmZmO1xyXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xyXG59XHJcbi5mb290ZXItZmxvdz5we1xyXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xyXG59XHJcbi5mb290ZXItY29kZXtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuLmZvb3Rlci1jb2RlPmltZ3tcclxuICB3aWR0aDogNjBweDtcclxuICBoZWlnaHQ6IDYwcHg7XHJcbiAgXHJcbn1cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vZm9vdGVycy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9mb290ZXJzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2Zvb3RlcnMudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NTY4NjJkOWQmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9mb290ZXJzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01Njg2MmQ5ZCZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9mb290ZXJzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vZm9vdGVycy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vZm9vdGVycy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD01Njg2MmQ5ZCZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiNTY4NjJkOWRcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFxMaW5rXFxcXHdlYlxcXFznjKvnjKvni5fni5fnp5HmioBcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNTY4NjJkOWQnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNTY4NjJkOWQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNTY4NjJkOWQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL2Zvb3RlcnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU2ODYyZDlkJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzU2ODYyZDlkJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvY29tcG9uZW50L2Zvb3RlcnMudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcXG4qW2RhdGEtdi01ODc2NWUwYV17XFxyXFxuICBtYXJnaW46IDAgYXV0bztcXHJcXG4gIGZvbnQtZmFtaWx5OiDlvq7ova/pm4Xpu5E7XFxufVxcbi5jb250YWluZXJbZGF0YS12LTU4NzY1ZTBhXXtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgbWF4LXdpZHRoOiAxMDgwcHg7XFxyXFxuIG1hcmdpbjogMCBhdXRvO1xcclxcbiBkaXNwbGF5OiBmbGV4O1xcclxcbiBwYWRkaW5nLWJvdHRvbTogODBweDtcXG59XFxuLmNvbnRhaW5lcj4ubGlzdFtkYXRhLXYtNTg3NjVlMGFde1xcclxcbiAgd2lkdGg6IDMzJTtcXHJcXG4gIG1hcmdpbjogMCAzMHB4O1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uY29udGFpbmVyPi5saXN0PmltZ1tkYXRhLXYtNTg3NjVlMGFde1xcclxcbiAgd2lkdGg6IDc3Ljc4JTtcXHJcXG4gIGhlaWdodDogNzcuNzglO1xcbn1cXG4uY29udGFpbmVyPi5saXN0PmgzW2RhdGEtdi01ODc2NWUwYV17XFxyXFxuICBmb250LXNpemU6IDI0cHg7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcclxcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG59XFxuLmNvbnRhaW5lcj4ubGlzdD5wW2RhdGEtdi01ODc2NWUwYV17XFxyXFxuICBmb250LXNpemU6IDE4cHg7XFxyXFxuICBjb2xvcjogIzY2NjtcXHJcXG4gIHBhZGRpbmc6IDAgNTVweDtcXG59XFxyXFxuXFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudC9jb250ZW50cy1pbmRleC52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQTJCQTtFQUNBLGNBQUE7RUFDQSxpQkFBQTtBQUNBO0FBQ0E7RUFDQSxXQUFBO0VBQ0EsaUJBQUE7Q0FDQSxjQUFBO0NBQ0EsYUFBQTtDQUNBLG9CQUFBO0FBQ0E7QUFDQTtFQUNBLFVBQUE7RUFDQSxjQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0FBQ0E7QUFDQTtFQUNBLGFBQUE7RUFDQSxjQUFBO0FBQ0E7QUFDQTtFQUNBLGVBQUE7RUFDQSxtQkFBQTtFQUNBLGdCQUFBO0FBQ0E7QUFDQTtFQUNBLGVBQUE7RUFDQSxXQUFBO0VBQ0EsZUFBQTtBQUNBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXHJcXG4gIDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImxpc3RcXFwiPlxcclxcbiAgICAgIDxpbWcgc3JjPVxcXCIvaW1nLzE1NDUyMDUyODdfMjIyYTNlOTY1YzFlNzkwZTQxNWQwNjI1YWM0Mjk1YjEuanBnXFxcIj5cXHJcXG4gICAgICA8aDM+5a6g54mp6aWu5rC05py65ruk6IqvPC9oMz5cXHJcXG4gICAgICA8cD7kvJjotKjmu6TmnZAg5Zub6YeN6L+H5rukPC9wPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgIDxkaXYgY2xhc3M9XFxcImxpc3RcXFwiPlxcclxcbiAgICAgIDxpbWcgc3JjPVxcXCIvaW1nLzE1Njk1NzAzNzJfNjk5MjlhZGM1M2JiNDVmNTMwOWNlYThhOWQzNDQ3YzIuanBnXFxcIj5cXHJcXG4gICAgICA8aDM+5pm66IO95a6g54mp6Zu26aOf5py6PC9oMz5cXHJcXG4gICAgICA8cD7mmbrog73igJzpgJfnjKvigJ0g6L+c56iL4oCc6YGb54uX4oCdPC9wPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwibGlzdFxcXCI+XFxyXFxuICAgICAgPGltZyBzcmM9XFxcIi4uLy4uL2Rpc3QvaW1nLzE1NDYwODk2OTRfZDE4M2RiNDQ3YzE3ZGI0YmVjMGJhNTExMGQwNjUzZWYuanBnXFxcIj5cXHJcXG4gICAgICA8aDM+5a6g54mp6aWu5rC05py6PC9oMz5cXHJcXG4gICAgICA8cD7lkbXmiqTniLHlrqAg5YGl5bq36aWu5rC0PC9wPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwib25cXFwiPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gIDwvZGl2PlxcclxcbjwvdGVtcGxhdGU+XFxyXFxuPHNjcmlwdD5cXHJcXG5leHBvcnQgZGVmYXVsdCB7XFxyXFxuICBcXHJcXG59XFxyXFxuPC9zY3JpcHQ+XFxyXFxuPHN0eWxlIHNjb3BlZD5cXHJcXG4qe1xcclxcbiAgbWFyZ2luOiAwIGF1dG87XFxyXFxuICBmb250LWZhbWlseTog5b6u6L2v6ZuF6buRO1xcclxcbn1cXHJcXG4uY29udGFpbmVye1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBtYXgtd2lkdGg6IDEwODBweDtcXHJcXG4gbWFyZ2luOiAwIGF1dG87XFxyXFxuIGRpc3BsYXk6IGZsZXg7XFxyXFxuIHBhZGRpbmctYm90dG9tOiA4MHB4O1xcclxcbn1cXHJcXG4uY29udGFpbmVyPi5saXN0e1xcclxcbiAgd2lkdGg6IDMzJTtcXHJcXG4gIG1hcmdpbjogMCAzMHB4O1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG4uY29udGFpbmVyPi5saXN0PmltZ3tcXHJcXG4gIHdpZHRoOiA3Ny43OCU7XFxyXFxuICBoZWlnaHQ6IDc3Ljc4JTtcXHJcXG59XFxyXFxuLmNvbnRhaW5lcj4ubGlzdD5oM3tcXHJcXG4gIGZvbnQtc2l6ZTogMjRweDtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxuICBmb250LXdlaWdodDogNDAwO1xcclxcbn1cXHJcXG4uY29udGFpbmVyPi5saXN0PnB7XFxyXFxuICBmb250LXNpemU6IDE4cHg7XFxyXFxuICBjb2xvcjogIzY2NjtcXHJcXG4gIHBhZGRpbmc6IDAgNTVweDtcXHJcXG59XFxyXFxuXFxyXFxuPC9zdHlsZT5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX3ZtLl9tKDApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbnRhaW5lclwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGlzdFwiIH0sIFtcbiAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgIGF0dHJzOiB7IHNyYzogXCIvaW1nLzE1NDUyMDUyODdfMjIyYTNlOTY1YzFlNzkwZTQxNWQwNjI1YWM0Mjk1YjEuanBnXCIgfVxuICAgICAgICB9KSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJoM1wiLCBbX3ZtLl92KFwi5a6g54mp6aWu5rC05py65ruk6IqvXCIpXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwicFwiLCBbX3ZtLl92KFwi5LyY6LSo5ruk5p2QIOWbm+mHjei/h+a7pFwiKV0pXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxpc3RcIiB9LCBbXG4gICAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICBhdHRyczogeyBzcmM6IFwiL2ltZy8xNTY5NTcwMzcyXzY5OTI5YWRjNTNiYjQ1ZjUzMDljZWE4YTlkMzQ0N2MyLmpwZ1wiIH1cbiAgICAgICAgfSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiaDNcIiwgW192bS5fdihcIuaZuuiDveWuoOeJqembtumjn+aculwiKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcInBcIiwgW192bS5fdihcIuaZuuiDveKAnOmAl+eMq+KAnSDov5znqIvigJzpgZvni5figJ1cIildKVxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsaXN0XCIgfSwgW1xuICAgICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgIHNyYzogcmVxdWlyZShcIi4uLy4uL2Rpc3QvaW1nLzE1NDYwODk2OTRfZDE4M2RiNDQ3YzE3ZGI0YmVjMGJhNTExMGQwNjUzZWYuanBnXCIpXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJoM1wiLCBbX3ZtLl92KFwi5a6g54mp6aWu5rC05py6XCIpXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwicFwiLCBbX3ZtLl92KFwi5ZG15oqk54ix5a6gIOWBpeW6t+mlruawtFwiKV0pXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIm9uXCIgfSlcbiAgICBdKVxuICB9XG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwibGlzdFwiPlxyXG4gICAgICA8aW1nIHNyYz1cIi9pbWcvMTU0NTIwNTI4N18yMjJhM2U5NjVjMWU3OTBlNDE1ZDA2MjVhYzQyOTViMS5qcGdcIj5cclxuICAgICAgPGgzPuWuoOeJqemlruawtOacuua7pOiKrzwvaDM+XHJcbiAgICAgIDxwPuS8mOi0qOa7pOadkCDlm5vph43ov4fmu6Q8L3A+XHJcbiAgICA8L2Rpdj5cclxuICAgICA8ZGl2IGNsYXNzPVwibGlzdFwiPlxyXG4gICAgICA8aW1nIHNyYz1cIi9pbWcvMTU2OTU3MDM3Ml82OTkyOWFkYzUzYmI0NWY1MzA5Y2VhOGE5ZDM0NDdjMi5qcGdcIj5cclxuICAgICAgPGgzPuaZuuiDveWuoOeJqembtumjn+acujwvaDM+XHJcbiAgICAgIDxwPuaZuuiDveKAnOmAl+eMq+KAnSDov5znqIvigJzpgZvni5figJ08L3A+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJsaXN0XCI+XHJcbiAgICAgIDxpbWcgc3JjPVwiLi4vLi4vZGlzdC9pbWcvMTU0NjA4OTY5NF9kMTgzZGI0NDdjMTdkYjRiZWMwYmE1MTEwZDA2NTNlZi5qcGdcIj5cclxuICAgICAgPGgzPuWuoOeJqemlruawtOacujwvaDM+XHJcbiAgICAgIDxwPuWRteaKpOeIseWuoCDlgaXlurfppa7msLQ8L3A+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJvblwiPlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBcclxufVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIHNjb3BlZD5cclxuKntcclxuICBtYXJnaW46IDAgYXV0bztcclxuICBmb250LWZhbWlseTog5b6u6L2v6ZuF6buRO1xyXG59XHJcbi5jb250YWluZXJ7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWF4LXdpZHRoOiAxMDgwcHg7XHJcbiBtYXJnaW46IDAgYXV0bztcclxuIGRpc3BsYXk6IGZsZXg7XHJcbiBwYWRkaW5nLWJvdHRvbTogODBweDtcclxufVxyXG4uY29udGFpbmVyPi5saXN0e1xyXG4gIHdpZHRoOiAzMyU7XHJcbiAgbWFyZ2luOiAwIDMwcHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG4uY29udGFpbmVyPi5saXN0PmltZ3tcclxuICB3aWR0aDogNzcuNzglO1xyXG4gIGhlaWdodDogNzcuNzglO1xyXG59XHJcbi5jb250YWluZXI+Lmxpc3Q+aDN7XHJcbiAgZm9udC1zaXplOiAyNHB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDQwMDtcclxufVxyXG4uY29udGFpbmVyPi5saXN0PnB7XHJcbiAgZm9udC1zaXplOiAxOHB4O1xyXG4gIGNvbG9yOiAjNjY2O1xyXG4gIHBhZGRpbmc6IDAgNTVweDtcclxufVxyXG5cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vY29udGVudHMtaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vY29udGVudHMtaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vY29udGVudHMtaW5kZXgudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NTg3NjVlMGEmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9jb250ZW50cy1pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTg3NjVlMGEmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vY29udGVudHMtaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9jb250ZW50cy1pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vY29udGVudHMtaW5kZXgudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NTg3NjVlMGEmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjU4NzY1ZTBhXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcTGlua1xcXFx3ZWJcXFxc54yr54yr54uX54uX56eR5oqAXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzU4NzY1ZTBhJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzU4NzY1ZTBhJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzU4NzY1ZTBhJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9jb250ZW50cy1pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTg3NjVlMGEmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNTg3NjVlMGEnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9jb21wb25lbnQvY29udGVudHMtaW5kZXgudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI3NjMwODM2NWRjMzJlMzJiYTU1YmQ0OGQzNzEwZDc3Yi5qcGdcIjsiLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5iYW5uZXI+aW1nW2RhdGEtdi02NjUwNmZiMl17XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogNDAwcHg7XFxufVxcbi50ZXh0W2RhdGEtdi02NjUwNmZiMl17XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVxcbi50ZXh0PmgyW2RhdGEtdi02NjUwNmZiMl17XFxyXFxuICAgIGZvbnQtc2l6ZTogMzZweDtcXHJcXG4gICAgZm9udC1mYW1pbHk6IFBpbmdGYW5nU0MtTWVkaXVtO1xcclxcbiAgICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgICBjb2xvcjogIzExMTtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDQ4cHg7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgbWFyZ2luOiA4MHB4IDAgMzBweDtcXG59XFxuLnRleHQ+LmNvbnRhaW5bZGF0YS12LTY2NTA2ZmIyXXtcXHJcXG4gICAgd2lkdGg6IDcyMHB4O1xcclxcbiAgICBtYXJnaW46IDAgYXV0bztcXHJcXG4gICAgZm9udC1mYW1pbHk6IFBpbmdGYW5nU0MtUmVndWxhcjtcXHJcXG4gICAgY29sb3I6ICMzMzM7XFxufVxcbi50ZXh0Pi5jb250YWluPnBbZGF0YS12LTY2NTA2ZmIyXXtcXHJcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgICBsaW5lLWhlaWdodDogMjhweDtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudC9hYm91dC52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQWVBO0VBQ0EsV0FBQTtFQUNBLGFBQUE7QUFDQTtBQUNBO0lBQ0EsV0FBQTtJQUNBLFlBQUE7QUFDQTtBQUNBO0lBQ0EsZUFBQTtJQUNBLDhCQUFBO0lBQ0EsZ0JBQUE7SUFDQSxXQUFBO0lBQ0EsaUJBQUE7SUFDQSxrQkFBQTtJQUNBLG1CQUFBO0FBQ0E7QUFDQTtJQUNBLFlBQUE7SUFDQSxjQUFBO0lBQ0EsK0JBQUE7SUFDQSxXQUFBO0FBQ0E7QUFDQTtJQUNBLGVBQUE7SUFDQSxpQkFBQTtJQUNBLG1CQUFBO0FBQ0FcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcclxcbiAgPGRpdiBjbGFzcz1cXFwibWFpblxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImJhbm5lclxcXCI+XFxyXFxuICAgICAgPGltZyBzcmM9XFxcIi9pbWcvYnJhbmRzdG9yeS5iZjQ2NzhjMS5qcGdcXFwiIGFsdD1cXFwiXFxcIj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInRleHRcXFwiPlxcclxcbiAgICAgIDxoMj7lrqDniLHnlJ/mtLs8L2gyPlxcclxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRhaW5cXFwiPlxcclxcbiAgICAgICAgPHA+54yr54yr54uX54uX77yM5LiA5Liq5LiT5rOo5a6g54mp5ZKM5Lq65a6g55Sf5rS755qE5YWI6ZSL5ZOB54mM44CCPC9wPlxcclxcbiAgICAgICAgPHA+5LiA55u05Lul5p2l77yM54yr54yr54uX54uX5ZOB54mM6YO95Z2a5oyB5omT6YCg5aW95ZOB5ZGz6auY5oCn5Lu35q+U55qE5a6g54mp55So5oi377yM5Z2a5oyB5Lul57KJ5Lid55So5oi35oCd57u05o6o5Yqo5a6g54mp6KGM5Lia55qE5Y+Y6Z2p5Y2H57qn77yM5bm25LiU5Z2a5oyB5pW05ZCI5LyY6LSo5L6b5bqU6ZO+77yM5Z2a5oyB5byV5YWl6buR56eR5oqA77yM5Li65YW75a6g54ix5a6g55So5oi35oyB57ut5omT6YCg5aW95pyN5Yqh44CB5aW95Lqn5ZOB77yM5Yib6YCg5pu0576O5aW955qE6JCM5a6g55Sf5rS744CCPC9wPlxcclxcbiAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gIDwvZGl2PlxcclxcbjwvdGVtcGxhdGU+XFxyXFxuPHN0eWxlICBzY29wZWQ+XFxyXFxuLmJhbm5lcj5pbWd7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogNDAwcHg7XFxyXFxufVxcclxcbiAgLnRleHR7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICB9XFxyXFxuICAudGV4dD5oMntcXHJcXG4gICAgZm9udC1zaXplOiAzNnB4O1xcclxcbiAgICBmb250LWZhbWlseTogUGluZ0ZhbmdTQy1NZWRpdW07XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxuICAgIGNvbG9yOiAjMTExO1xcclxcbiAgICBsaW5lLWhlaWdodDogNDhweDtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBtYXJnaW46IDgwcHggMCAzMHB4O1xcclxcbiAgfVxcclxcbiAgLnRleHQ+LmNvbnRhaW57XFxyXFxuICAgIHdpZHRoOiA3MjBweDtcXHJcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBQaW5nRmFuZ1NDLVJlZ3VsYXI7XFxyXFxuICAgIGNvbG9yOiAjMzMzO1xcclxcbiAgfVxcclxcbiAgICAudGV4dD4uY29udGFpbj5we1xcclxcbiAgICBmb250LXNpemU6IDE2cHg7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAyOHB4O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcclxcbiAgICB9XFxyXFxuPC9zdHlsZT5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfdm0uX20oMClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibWFpblwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYmFubmVyXCIgfSwgW1xuICAgICAgICBfYyhcImltZ1wiLCB7IGF0dHJzOiB7IHNyYzogXCIvaW1nL2JyYW5kc3RvcnkuYmY0Njc4YzEuanBnXCIsIGFsdDogXCJcIiB9IH0pXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRleHRcIiB9LCBbXG4gICAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcIuWuoOeIseeUn+a0u1wiKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbnRhaW5cIiB9LCBbXG4gICAgICAgICAgX2MoXCJwXCIsIFtfdm0uX3YoXCLnjKvnjKvni5fni5fvvIzkuIDkuKrkuJPms6jlrqDnianlkozkurrlrqDnlJ/mtLvnmoTlhYjplIvlk4HniYzjgIJcIildKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwicFwiLCBbXG4gICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgIFwi5LiA55u05Lul5p2l77yM54yr54yr54uX54uX5ZOB54mM6YO95Z2a5oyB5omT6YCg5aW95ZOB5ZGz6auY5oCn5Lu35q+U55qE5a6g54mp55So5oi377yM5Z2a5oyB5Lul57KJ5Lid55So5oi35oCd57u05o6o5Yqo5a6g54mp6KGM5Lia55qE5Y+Y6Z2p5Y2H57qn77yM5bm25LiU5Z2a5oyB5pW05ZCI5LyY6LSo5L6b5bqU6ZO+77yM5Z2a5oyB5byV5YWl6buR56eR5oqA77yM5Li65YW75a6g54ix5a6g55So5oi35oyB57ut5omT6YCg5aW95pyN5Yqh44CB5aW95Lqn5ZOB77yM5Yib6YCg5pu0576O5aW955qE6JCM5a6g55Sf5rS744CCXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSlcbiAgICBdKVxuICB9XG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2Fib3V0LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTY2NTA2ZmIyJnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vYWJvdXQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY2NTA2ZmIyJnNjb3BlZD10cnVlJlwiXG52YXIgc2NyaXB0ID0ge31cbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vYWJvdXQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NjY1MDZmYjImc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjY2NTA2ZmIyXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcTGlua1xcXFx3ZWJcXFxc54yr54yr54uX54uX56eR5oqAXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzY2NTA2ZmIyJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzY2NTA2ZmIyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzY2NTA2ZmIyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9hYm91dC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjY1MDZmYjImc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNjY1MDZmYjInLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9jb21wb25lbnQvYWJvdXQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xyXG5pbXBvcnQgaGVhZGVycyBmcm9tICcuL2NvbXBvbmVudC9oZWFkZXJzLnZ1ZSdcclxuaW1wb3J0IGZvb3RlcnMgZnJvbSAnLi9jb21wb25lbnQvZm9vdGVycy52dWUnXHJcbmltcG9ydCBwcm9kdWN0cyBmcm9tICcuL2NvbXBvbmVudC9wcm9kdWN0cy52dWUnXHJcbmltcG9ydCBjb250ZW50c2luZGV4IGZyb20gJy4vY29tcG9uZW50L2NvbnRlbnRzLWluZGV4LnZ1ZSdcclxuaW1wb3J0IGFib3V0IGZyb20gJy4vY29tcG9uZW50L2Fib3V0LnZ1ZSdcclxubmV3IFZ1ZSh7XHJcbiAgZWw6XCIjYWJvdXRcIixcclxuICBkYXRhOntcclxuICAgIFxyXG4gIH0sXHJcbiAgXHJcbiAgXHJcbiAgY29tcG9uZW50czp7aGVhZGVycyxmb290ZXJzLHByb2R1Y3RzLGNvbnRlbnRzaW5kZXgsYWJvdXR9XHJcbiAgXHJcbn0pIl0sInNvdXJjZVJvb3QiOiIifQ==